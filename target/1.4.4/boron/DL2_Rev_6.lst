
/mnt/space/workspace/particle/DL2_Rev_6/target/1.4.4/boron/DL2_Rev_6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00009390  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000000  2003f400  2003f400  0001d588  2**0
                  CONTENTS
  4 .data         000001ac  2003db1c  000dd3b0  0000db1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000b28  2003dcc8  2003dcc8  0001dcc8  2**3
                  ALLOC
  6 .module_info_suffix 00000028  000dd55c  000dd55c  0001d55c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000dd584  000dd584  0001d584  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001c75b9  00000000  00000000  0001d588  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00023243  00000000  00000000  001e4b41  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00003740  00000000  00000000  00207d84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00051f2e  00000000  00000000  0020b4c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0005d587  00000000  00000000  0025d3f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0011e384  00000000  00000000  002ba979  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0003077c  00000000  00000000  003d8cfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000066e0  00000000  00000000  00409479  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000106cc  00000000  00000000  0040fb5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f007 f9dc 	bl	db3ee <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f007 f9e1 	bl	db404 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003db1c 	.word	0x2003db1c
   d404c:	000dd3b0 	.word	0x000dd3b0
   d4050:	2003dcc8 	.word	0x2003dcc8
   d4054:	2003dcc8 	.word	0x2003dcc8
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f004 ff33 	bl	d8ec8 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000dd3ac 	.word	0x000dd3ac
   d4084:	000dd324 	.word	0x000dd324

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 bfca 	b.w	d5020 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 fe7b 	bl	d4d88 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f004 bee5 	b.w	d8e64 <_post_loop>

000d409a <_Znwj>:
   d409a:	f003 be9b 	b.w	d7dd4 <malloc>

000d409e <_ZdlPv>:
   d409e:	f003 bea1 	b.w	d7de4 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f003 be9f 	b.w	d7de4 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <_Z15Tip_Int_Handlerv>:
  }
  return(0);
}

//   An INT_0 interrupt is generated by the rain gauge reed switch.
void Tip_Int_Handler() {
   d40b8:	b510      	push	{r4, lr}
  int level = 0;
  tip_count += 1;
   d40ba:	4a05      	ldr	r2, [pc, #20]	; (d40d0 <_Z15Tip_Int_Handlerv+0x18>)
  //  digitalWrite(13, HIGH);
  //delay(100); can't use delays in an ISR on the boron because they rely on interrupts.  it redlights the board. -fwb-31Jan20_2255
  //delayMicroseconds(1000);
  while (level == 0) {
    level = digitalRead(REED_PIN);
   d40bc:	4c05      	ldr	r4, [pc, #20]	; (d40d4 <_Z15Tip_Int_Handlerv+0x1c>)
}

//   An INT_0 interrupt is generated by the rain gauge reed switch.
void Tip_Int_Handler() {
  int level = 0;
  tip_count += 1;
   d40be:	6813      	ldr	r3, [r2, #0]
   d40c0:	3301      	adds	r3, #1
   d40c2:	6013      	str	r3, [r2, #0]
  //  digitalWrite(13, HIGH);
  //delay(100); can't use delays in an ISR on the boron because they rely on interrupts.  it redlights the board. -fwb-31Jan20_2255
  //delayMicroseconds(1000);
  while (level == 0) {
    level = digitalRead(REED_PIN);
   d40c4:	8820      	ldrh	r0, [r4, #0]
   d40c6:	f005 ff19 	bl	d9efc <digitalRead>
  int level = 0;
  tip_count += 1;
  //  digitalWrite(13, HIGH);
  //delay(100); can't use delays in an ISR on the boron because they rely on interrupts.  it redlights the board. -fwb-31Jan20_2255
  //delayMicroseconds(1000);
  while (level == 0) {
   d40ca:	2800      	cmp	r0, #0
   d40cc:	d0fa      	beq.n	d40c4 <_Z15Tip_Int_Handlerv+0xc>
    level = digitalRead(REED_PIN);
  }
  //  digitalWrite(13, LOW);
}
   d40ce:	bd10      	pop	{r4, pc}
   d40d0:	2003e168 	.word	0x2003e168
   d40d4:	2003db20 	.word	0x2003db20

000d40d8 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d40d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d40da:	4602      	mov	r2, r0
   d40dc:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d40de:	7913      	ldrb	r3, [r2, #4]
   d40e0:	6895      	ldr	r5, [r2, #8]
   d40e2:	b133      	cbz	r3, d40f2 <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d40e4:	b93d      	cbnz	r5, d40f6 <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d40e6:	490c      	ldr	r1, [pc, #48]	; (d4118 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d40e8:	b004      	add	sp, #16
   d40ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d40ee:	f005 b9e3 	b.w	d94b8 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d40f2:	4b0a      	ldr	r3, [pc, #40]	; (d411c <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d40f4:	e000      	b.n	d40f8 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d40f6:	4b0a      	ldr	r3, [pc, #40]	; (d4120 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d40f8:	7b16      	ldrb	r6, [r2, #12]
   d40fa:	4c0a      	ldr	r4, [pc, #40]	; (d4124 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d40fc:	490a      	ldr	r1, [pc, #40]	; (d4128 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d40fe:	7b52      	ldrb	r2, [r2, #13]
   d4100:	9202      	str	r2, [sp, #8]
   d4102:	2e01      	cmp	r6, #1
   d4104:	bf08      	it	eq
   d4106:	4621      	moveq	r1, r4
   d4108:	9101      	str	r1, [sp, #4]
   d410a:	9500      	str	r5, [sp, #0]
   d410c:	4a07      	ldr	r2, [pc, #28]	; (d412c <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d410e:	2100      	movs	r1, #0
   d4110:	f005 fa14 	bl	d953c <_ZN5Print11printf_implEbPKcz>
  }
   d4114:	b004      	add	sp, #16
   d4116:	bd70      	pop	{r4, r5, r6, pc}
   d4118:	000dc7ed 	.word	0x000dc7ed
   d411c:	000dcbdb 	.word	0x000dcbdb
   d4120:	000dc7dc 	.word	0x000dc7dc
   d4124:	000dc7e5 	.word	0x000dc7e5
   d4128:	000dc7e9 	.word	0x000dc7e9
   d412c:	000dc803 	.word	0x000dc803

000d4130 <_Z14Save_to_SDCardi.part.6>:
  voltage = 0;
  realtemp = 0;
  calc_var = 0;
}

void Save_to_SDCard(int lclRepCnt) {
   d4130:	b510      	push	{r4, lr}
  if (lclRepCnt == 0) {
    printToCard.print(dataPnt00ago);
    delay(500);
  }
  else if (lclRepCnt == 2) {
    printToCard.print(dataPnt10ago);
   d4132:	4c0d      	ldr	r4, [pc, #52]	; (d4168 <_Z14Save_to_SDCardi.part.6+0x38>)
   d4134:	490d      	ldr	r1, [pc, #52]	; (d416c <_Z14Save_to_SDCardi.part.6+0x3c>)
   d4136:	4620      	mov	r0, r4
   d4138:	f005 f9be 	bl	d94b8 <_ZN5Print5printEPKc>
    delay(500);
   d413c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4140:	f004 fe6e 	bl	d8e20 <delay>
    printToCard.print(dataPnt05ago);
   d4144:	490a      	ldr	r1, [pc, #40]	; (d4170 <_Z14Save_to_SDCardi.part.6+0x40>)
   d4146:	4620      	mov	r0, r4
   d4148:	f005 f9b6 	bl	d94b8 <_ZN5Print5printEPKc>
    delay(500);
   d414c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4150:	f004 fe66 	bl	d8e20 <delay>
    printToCard.print(dataPnt00ago);
   d4154:	4620      	mov	r0, r4
   d4156:	4907      	ldr	r1, [pc, #28]	; (d4174 <_Z14Save_to_SDCardi.part.6+0x44>)
   d4158:	f005 f9ae 	bl	d94b8 <_ZN5Print5printEPKc>
    delay(500);
   d415c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
		Serial.write(data);
	}
	// close the file:
	myFile.close();
  */
}
   d4160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    printToCard.print(dataPnt10ago);
    delay(500);
    printToCard.print(dataPnt05ago);
    delay(500);
    printToCard.print(dataPnt00ago);
    delay(500);
   d4164:	f004 be5c 	b.w	d8e20 <delay>
   d4168:	2003e180 	.word	0x2003e180
   d416c:	2003dbc8 	.word	0x2003dbc8
   d4170:	2003db68 	.word	0x2003db68
   d4174:	2003db2c 	.word	0x2003db2c

000d4178 <_Z16Read_the_Analogsv>:
  }
  //memset(tmpstr,0,sizeof(tmpstr));
  return 0;
}

int Read_the_Analogs() { 
   d4178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
// SYNTAX
analogRead(pin);
analogRead() takes one argument pin: the number of the analog input pin to read from (A0 - A5)
analogRead() returns an integer value ranging from 0 to 4095.
*/
if (PROGRAM == 0) {
   d417c:	4fbb      	ldr	r7, [pc, #748]	; (d446c <_Z16Read_the_Analogsv+0x2f4>)
   d417e:	4cbc      	ldr	r4, [pc, #752]	; (d4470 <_Z16Read_the_Analogsv+0x2f8>)
   d4180:	6839      	ldr	r1, [r7, #0]
  }
  //memset(tmpstr,0,sizeof(tmpstr));
  return 0;
}

int Read_the_Analogs() { 
   d4182:	b085      	sub	sp, #20
// SYNTAX
analogRead(pin);
analogRead() takes one argument pin: the number of the analog input pin to read from (A0 - A5)
analogRead() returns an integer value ranging from 0 to 4095.
*/
if (PROGRAM == 0) {
   d4184:	b949      	cbnz	r1, d419a <_Z16Read_the_Analogsv+0x22>
  depth = 9999;
  velocity = 9999;
   d4186:	4abb      	ldr	r2, [pc, #748]	; (d4474 <_Z16Read_the_Analogsv+0x2fc>)
analogRead(pin);
analogRead() takes one argument pin: the number of the analog input pin to read from (A0 - A5)
analogRead() returns an integer value ranging from 0 to 4095.
*/
if (PROGRAM == 0) {
  depth = 9999;
   d4188:	f242 730f 	movw	r3, #9999	; 0x270f
  velocity = 9999;
   d418c:	8013      	strh	r3, [r2, #0]
  wtr_temp = 9999;
   d418e:	4aba      	ldr	r2, [pc, #744]	; (d4478 <_Z16Read_the_Analogsv+0x300>)
analogRead(pin);
analogRead() takes one argument pin: the number of the analog input pin to read from (A0 - A5)
analogRead() returns an integer value ranging from 0 to 4095.
*/
if (PROGRAM == 0) {
  depth = 9999;
   d4190:	8023      	strh	r3, [r4, #0]
  velocity = 9999;
  wtr_temp = 9999;
   d4192:	8013      	strh	r3, [r2, #0]
  air_temp = 9999;
   d4194:	4ab9      	ldr	r2, [pc, #740]	; (d447c <_Z16Read_the_Analogsv+0x304>)
   d4196:	8013      	strh	r3, [r2, #0]
  return (0);
   d4198:	e3a2      	b.n	d48e0 <_Z16Read_the_Analogsv+0x768>
}
if (PROGRAM == 1) {
   d419a:	2901      	cmp	r1, #1
   d419c:	4db8      	ldr	r5, [pc, #736]	; (d4480 <_Z16Read_the_Analogsv+0x308>)
   d419e:	d166      	bne.n	d426e <_Z16Read_the_Analogsv+0xf6>
  // website says  0.25 to 9.84 ft/s, manual says 0.0-9.84 ft/s
  //just another hack...
	//it turns out the bigfoot has some logic on-board, and it does some averaging of the readings and is quite delayed once it 
	// starts reading.  For that reason, we're going to slow down and take a reading every second for 20 seconds and then
	// average those.  A full 775*10*2 = 15,500, so we still shouldn't overflow anything. -fwb-3May20
  short_Nap = 280; //shorten the sleep time since we're lengthening the awake time
   d41a0:	4bb8      	ldr	r3, [pc, #736]	; (d4484 <_Z16Read_the_Analogsv+0x30c>)
  digitalWrite(FOURTWENTY_PWR, HIGH); 
   d41a2:	8828      	ldrh	r0, [r5, #0]
  delay(10000); //let everyone stabilize.  The velocity probe takes 8 seconds per the manual; I upped it to 10.
  for (int j = 0; j<9 ; j++) { //uint16_t max is 65535, max ADC is 4095*5 = ~20000
    depth += analogRead(DEPTH_READ);
   d41a4:	f8df b2ec 	ldr.w	fp, [pc, #748]	; d4494 <_Z16Read_the_Analogsv+0x31c>
    delay(100); //
    velocity += analogRead(VELO_READ); 
   d41a8:	f8df a2c8 	ldr.w	sl, [pc, #712]	; d4474 <_Z16Read_the_Analogsv+0x2fc>
  // website says  0.25 to 9.84 ft/s, manual says 0.0-9.84 ft/s
  //just another hack...
	//it turns out the bigfoot has some logic on-board, and it does some averaging of the readings and is quite delayed once it 
	// starts reading.  For that reason, we're going to slow down and take a reading every second for 20 seconds and then
	// average those.  A full 775*10*2 = 15,500, so we still shouldn't overflow anything. -fwb-3May20
  short_Nap = 280; //shorten the sleep time since we're lengthening the awake time
   d41ac:	f44f 728c 	mov.w	r2, #280	; 0x118
   d41b0:	601a      	str	r2, [r3, #0]
  digitalWrite(FOURTWENTY_PWR, HIGH); 
   d41b2:	f005 fe8a 	bl	d9eca <digitalWrite>
  delay(10000); //let everyone stabilize.  The velocity probe takes 8 seconds per the manual; I upped it to 10.
   d41b6:	f242 7010 	movw	r0, #10000	; 0x2710
   d41ba:	f004 fe31 	bl	d8e20 <delay>
   d41be:	f04f 0909 	mov.w	r9, #9
  for (int j = 0; j<9 ; j++) { //uint16_t max is 65535, max ADC is 4095*5 = ~20000
    depth += analogRead(DEPTH_READ);
   d41c2:	f8bb 0000 	ldrh.w	r0, [fp]
   d41c6:	f8df 82a8 	ldr.w	r8, [pc, #680]	; d4470 <_Z16Read_the_Analogsv+0x2f8>
   d41ca:	4eaa      	ldr	r6, [pc, #680]	; (d4474 <_Z16Read_the_Analogsv+0x2fc>)
   d41cc:	f005 fea9 	bl	d9f22 <analogRead>
   d41d0:	8823      	ldrh	r3, [r4, #0]
   d41d2:	4418      	add	r0, r3
   d41d4:	8020      	strh	r0, [r4, #0]
    delay(100); //
   d41d6:	2064      	movs	r0, #100	; 0x64
   d41d8:	f004 fe22 	bl	d8e20 <delay>
    velocity += analogRead(VELO_READ); 
   d41dc:	4baa      	ldr	r3, [pc, #680]	; (d4488 <_Z16Read_the_Analogsv+0x310>)
   d41de:	8818      	ldrh	r0, [r3, #0]
   d41e0:	f005 fe9f 	bl	d9f22 <analogRead>
   d41e4:	f8ba 3000 	ldrh.w	r3, [sl]
   d41e8:	4418      	add	r0, r3
   d41ea:	f8aa 0000 	strh.w	r0, [sl]
    // extended this to 900 milliseconds because this unit averages its own readings and takes a bit to adjust
    delay(900); 
   d41ee:	f44f 7061 	mov.w	r0, #900	; 0x384
   d41f2:	f004 fe15 	bl	d8e20 <delay>
	// starts reading.  For that reason, we're going to slow down and take a reading every second for 20 seconds and then
	// average those.  A full 775*10*2 = 15,500, so we still shouldn't overflow anything. -fwb-3May20
  short_Nap = 280; //shorten the sleep time since we're lengthening the awake time
  digitalWrite(FOURTWENTY_PWR, HIGH); 
  delay(10000); //let everyone stabilize.  The velocity probe takes 8 seconds per the manual; I upped it to 10.
  for (int j = 0; j<9 ; j++) { //uint16_t max is 65535, max ADC is 4095*5 = ~20000
   d41f6:	f1b9 0901 	subs.w	r9, r9, #1
   d41fa:	d1e2      	bne.n	d41c2 <_Z16Read_the_Analogsv+0x4a>
    delay(100); //
    velocity += analogRead(VELO_READ); 
    // extended this to 900 milliseconds because this unit averages its own readings and takes a bit to adjust
    delay(900); 
  }
  depth = int(depth/10);
   d41fc:	f8b8 3000 	ldrh.w	r3, [r8]
  velocity = int(velocity/10);
   d4200:	8832      	ldrh	r2, [r6, #0]
    delay(100); //
    velocity += analogRead(VELO_READ); 
    // extended this to 900 milliseconds because this unit averages its own readings and takes a bit to adjust
    delay(900); 
  }
  depth = int(depth/10);
   d4202:	210a      	movs	r1, #10
   d4204:	fbb3 f3f1 	udiv	r3, r3, r1
  velocity = int(velocity/10);
  if (depth < 620) {
   d4208:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
    velocity += analogRead(VELO_READ); 
    // extended this to 900 milliseconds because this unit averages its own readings and takes a bit to adjust
    delay(900); 
  }
  depth = int(depth/10);
  velocity = int(velocity/10);
   d420c:	fbb2 f2f1 	udiv	r2, r2, r1
    delay(100); //
    velocity += analogRead(VELO_READ); 
    // extended this to 900 milliseconds because this unit averages its own readings and takes a bit to adjust
    delay(900); 
  }
  depth = int(depth/10);
   d4210:	f8a8 3000 	strh.w	r3, [r8]
  velocity = int(velocity/10);
   d4214:	8032      	strh	r2, [r6, #0]
  if (depth < 620) {
   d4216:	d207      	bcs.n	d4228 <_Z16Read_the_Analogsv+0xb0>
	  if(depth == 0) {
   d4218:	b913      	cbnz	r3, d4220 <_Z16Read_the_Analogsv+0xa8>
		  depth = 9999;  //this is basically an error reading.  I had also set this to -999 which was causing a buffer overflow.
   d421a:	f242 730f 	movw	r3, #9999	; 0x270f
   d421e:	e001      	b.n	d4224 <_Z16Read_the_Analogsv+0xac>
	  }
	  else {
		  depth = 620;  //if the read value is less than 620, it reads less than 0, which ends up giving values around 65530
   d4220:	f44f 731b 	mov.w	r3, #620	; 0x26c
   d4224:	f8a8 3000 	strh.w	r3, [r8]
  	}
  }
  calc_var = map(depth, 620, 3100, 0, 1200); 
   d4228:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
   d422c:	9300      	str	r3, [sp, #0]
   d422e:	f640 421c 	movw	r2, #3100	; 0xc1c
   d4232:	2300      	movs	r3, #0
   d4234:	f44f 711b 	mov.w	r1, #620	; 0x26c
   d4238:	8820      	ldrh	r0, [r4, #0]
   d423a:	f8df 8254 	ldr.w	r8, [pc, #596]	; d4490 <_Z16Read_the_Analogsv+0x318>
   d423e:	f004 fde3 	bl	d8e08 <_Z3mapiiiii>
  depth = calc_var;
  calc_var = map(velocity, 620, 3100, 0, 984); 
   d4242:	f44f 7376 	mov.w	r3, #984	; 0x3d8
	  }
	  else {
		  depth = 620;  //if the read value is less than 620, it reads less than 0, which ends up giving values around 65530
  	}
  }
  calc_var = map(depth, 620, 3100, 0, 1200); 
   d4246:	b280      	uxth	r0, r0
   d4248:	f8a8 0000 	strh.w	r0, [r8]
  depth = calc_var;
   d424c:	8020      	strh	r0, [r4, #0]
  calc_var = map(velocity, 620, 3100, 0, 984); 
   d424e:	f44f 711b 	mov.w	r1, #620	; 0x26c
   d4252:	8830      	ldrh	r0, [r6, #0]
   d4254:	9300      	str	r3, [sp, #0]
   d4256:	f640 421c 	movw	r2, #3100	; 0xc1c
   d425a:	2300      	movs	r3, #0
   d425c:	f004 fdd4 	bl	d8e08 <_Z3mapiiiii>
  velocity = calc_var; 
  calc_var = 0;
   d4260:	2100      	movs	r1, #0
  	}
  }
  calc_var = map(depth, 620, 3100, 0, 1200); 
  depth = calc_var;
  calc_var = map(velocity, 620, 3100, 0, 984); 
  velocity = calc_var; 
   d4262:	8030      	strh	r0, [r6, #0]
  calc_var = 0;
  digitalWrite(FOURTWENTY_PWR, LOW); 
   d4264:	8828      	ldrh	r0, [r5, #0]
  }
  calc_var = map(depth, 620, 3100, 0, 1200); 
  depth = calc_var;
  calc_var = map(velocity, 620, 3100, 0, 984); 
  velocity = calc_var; 
  calc_var = 0;
   d4266:	f8a8 1000 	strh.w	r1, [r8]
  digitalWrite(FOURTWENTY_PWR, LOW); 
   d426a:	f005 fe2e 	bl	d9eca <digitalWrite>
  }
if (PROGRAM == 2) {
   d426e:	683b      	ldr	r3, [r7, #0]
   d4270:	2b02      	cmp	r3, #2
   d4272:	d161      	bne.n	d4338 <_Z16Read_the_Analogsv+0x1c0>
  //AST45PT Sensor, reads (4-20) 0.5-2.5V, 0-5 psi (1163 ft), 0.5V = 620, 2.5V = 3100
  // 32-140 deg-F
  digitalWrite(FOURTWENTY_PWR, HIGH); 
   d4274:	2101      	movs	r1, #1
   d4276:	8828      	ldrh	r0, [r5, #0]
  delay(500); //let everyone stabilize.  
  for (int j = 0; j<5 ; j++) { //uint16_t max is 65535, max ADC is 4095*5 = ~20000
    depth += analogRead(DEPTH_READ);
   d4278:	f8df b218 	ldr.w	fp, [pc, #536]	; d4494 <_Z16Read_the_Analogsv+0x31c>
    delay(100); //
    wtr_temp += analogRead(WTRTMP_READ); 
   d427c:	f8df a1f8 	ldr.w	sl, [pc, #504]	; d4478 <_Z16Read_the_Analogsv+0x300>
  digitalWrite(FOURTWENTY_PWR, LOW); 
  }
if (PROGRAM == 2) {
  //AST45PT Sensor, reads (4-20) 0.5-2.5V, 0-5 psi (1163 ft), 0.5V = 620, 2.5V = 3100
  // 32-140 deg-F
  digitalWrite(FOURTWENTY_PWR, HIGH); 
   d4280:	f005 fe23 	bl	d9eca <digitalWrite>
  delay(500); //let everyone stabilize.  
   d4284:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4288:	f004 fdca 	bl	d8e20 <delay>
   d428c:	f04f 0905 	mov.w	r9, #5
  for (int j = 0; j<5 ; j++) { //uint16_t max is 65535, max ADC is 4095*5 = ~20000
    depth += analogRead(DEPTH_READ);
   d4290:	f8bb 0000 	ldrh.w	r0, [fp]
   d4294:	f8df 81d8 	ldr.w	r8, [pc, #472]	; d4470 <_Z16Read_the_Analogsv+0x2f8>
   d4298:	4e77      	ldr	r6, [pc, #476]	; (d4478 <_Z16Read_the_Analogsv+0x300>)
   d429a:	f005 fe42 	bl	d9f22 <analogRead>
   d429e:	8823      	ldrh	r3, [r4, #0]
   d42a0:	4418      	add	r0, r3
   d42a2:	8020      	strh	r0, [r4, #0]
    delay(100); //
   d42a4:	2064      	movs	r0, #100	; 0x64
   d42a6:	f004 fdbb 	bl	d8e20 <delay>
    wtr_temp += analogRead(WTRTMP_READ); 
   d42aa:	4b78      	ldr	r3, [pc, #480]	; (d448c <_Z16Read_the_Analogsv+0x314>)
   d42ac:	8818      	ldrh	r0, [r3, #0]
   d42ae:	f005 fe38 	bl	d9f22 <analogRead>
   d42b2:	f8ba 3000 	ldrh.w	r3, [sl]
   d42b6:	4418      	add	r0, r3
   d42b8:	f8aa 0000 	strh.w	r0, [sl]
    delay(100); //
   d42bc:	2064      	movs	r0, #100	; 0x64
   d42be:	f004 fdaf 	bl	d8e20 <delay>
if (PROGRAM == 2) {
  //AST45PT Sensor, reads (4-20) 0.5-2.5V, 0-5 psi (1163 ft), 0.5V = 620, 2.5V = 3100
  // 32-140 deg-F
  digitalWrite(FOURTWENTY_PWR, HIGH); 
  delay(500); //let everyone stabilize.  
  for (int j = 0; j<5 ; j++) { //uint16_t max is 65535, max ADC is 4095*5 = ~20000
   d42c2:	f1b9 0901 	subs.w	r9, r9, #1
   d42c6:	d1e3      	bne.n	d4290 <_Z16Read_the_Analogsv+0x118>
    depth += analogRead(DEPTH_READ);
    delay(100); //
    wtr_temp += analogRead(WTRTMP_READ); 
    delay(100); //
  }
  depth = int(depth/5);
   d42c8:	f8b8 3000 	ldrh.w	r3, [r8]
  wtr_temp = int(wtr_temp/5);
   d42cc:	8832      	ldrh	r2, [r6, #0]
    depth += analogRead(DEPTH_READ);
    delay(100); //
    wtr_temp += analogRead(WTRTMP_READ); 
    delay(100); //
  }
  depth = int(depth/5);
   d42ce:	2105      	movs	r1, #5
   d42d0:	fbb3 f3f1 	udiv	r3, r3, r1
  wtr_temp = int(wtr_temp/5);
  if (depth < 620) {
   d42d4:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
    delay(100); //
    wtr_temp += analogRead(WTRTMP_READ); 
    delay(100); //
  }
  depth = int(depth/5);
  wtr_temp = int(wtr_temp/5);
   d42d8:	fbb2 f2f1 	udiv	r2, r2, r1
    depth += analogRead(DEPTH_READ);
    delay(100); //
    wtr_temp += analogRead(WTRTMP_READ); 
    delay(100); //
  }
  depth = int(depth/5);
   d42dc:	f8a8 3000 	strh.w	r3, [r8]
  wtr_temp = int(wtr_temp/5);
   d42e0:	8032      	strh	r2, [r6, #0]
  if (depth < 620) {
   d42e2:	d207      	bcs.n	d42f4 <_Z16Read_the_Analogsv+0x17c>
	  if(depth == 0) {
   d42e4:	b913      	cbnz	r3, d42ec <_Z16Read_the_Analogsv+0x174>
		  depth = 9999;  //there is an error reading
   d42e6:	f242 730f 	movw	r3, #9999	; 0x270f
   d42ea:	e001      	b.n	d42f0 <_Z16Read_the_Analogsv+0x178>
	  }
	  else {
		  depth = 620;  //if the read value is less than 620, it reads less than 0, which ends up giving values around 65530
   d42ec:	f44f 731b 	mov.w	r3, #620	; 0x26c
   d42f0:	f8a8 3000 	strh.w	r3, [r8]
  	}
  }
  calc_var = map(depth, 620, 3100, 0, 1163); 
   d42f4:	f240 438b 	movw	r3, #1163	; 0x48b
   d42f8:	9300      	str	r3, [sp, #0]
   d42fa:	f640 421c 	movw	r2, #3100	; 0xc1c
   d42fe:	2300      	movs	r3, #0
   d4300:	f44f 711b 	mov.w	r1, #620	; 0x26c
   d4304:	8820      	ldrh	r0, [r4, #0]
   d4306:	f8df 8188 	ldr.w	r8, [pc, #392]	; d4490 <_Z16Read_the_Analogsv+0x318>
   d430a:	f004 fd7d 	bl	d8e08 <_Z3mapiiiii>
  depth = calc_var;
  calc_var = map(wtr_temp, 620, 3100, 32, 140); 
   d430e:	238c      	movs	r3, #140	; 0x8c
	  }
	  else {
		  depth = 620;  //if the read value is less than 620, it reads less than 0, which ends up giving values around 65530
  	}
  }
  calc_var = map(depth, 620, 3100, 0, 1163); 
   d4310:	b280      	uxth	r0, r0
   d4312:	f8a8 0000 	strh.w	r0, [r8]
  depth = calc_var;
   d4316:	8020      	strh	r0, [r4, #0]
  calc_var = map(wtr_temp, 620, 3100, 32, 140); 
   d4318:	f44f 711b 	mov.w	r1, #620	; 0x26c
   d431c:	8830      	ldrh	r0, [r6, #0]
   d431e:	9300      	str	r3, [sp, #0]
   d4320:	f640 421c 	movw	r2, #3100	; 0xc1c
   d4324:	2320      	movs	r3, #32
   d4326:	f004 fd6f 	bl	d8e08 <_Z3mapiiiii>
  wtr_temp = calc_var; 
  calc_var = 0;
   d432a:	2100      	movs	r1, #0
  	}
  }
  calc_var = map(depth, 620, 3100, 0, 1163); 
  depth = calc_var;
  calc_var = map(wtr_temp, 620, 3100, 32, 140); 
  wtr_temp = calc_var; 
   d432c:	8030      	strh	r0, [r6, #0]
  calc_var = 0;
  digitalWrite(FOURTWENTY_PWR, LOW); 
   d432e:	8828      	ldrh	r0, [r5, #0]
  }
  calc_var = map(depth, 620, 3100, 0, 1163); 
  depth = calc_var;
  calc_var = map(wtr_temp, 620, 3100, 32, 140); 
  wtr_temp = calc_var; 
  calc_var = 0;
   d4330:	f8a8 1000 	strh.w	r1, [r8]
  digitalWrite(FOURTWENTY_PWR, LOW); 
   d4334:	f005 fdc9 	bl	d9eca <digitalWrite>
}
if (PROGRAM == 3) {
   d4338:	683b      	ldr	r3, [r7, #0]
   d433a:	2b03      	cmp	r3, #3
   d433c:	d139      	bne.n	d43b2 <_Z16Read_the_Analogsv+0x23a>
  //Stevens 4-20 sensor, reads from 0.5-2.5V, 0-10ft, 0.5V = 620, 2.5V = 3100
 digitalWrite(FOURTWENTY_PWR, HIGH); 
   d433e:	2101      	movs	r1, #1
   d4340:	8828      	ldrh	r0, [r5, #0]
  delay(500); //let everyone stabilize.  
  for (int j = 0; j<5 ; j++) { //uint16_t max is 65535, max ADC is 4095*5 = ~20000
    depth += analogRead(DEPTH_READ);
   d4342:	f8df 9150 	ldr.w	r9, [pc, #336]	; d4494 <_Z16Read_the_Analogsv+0x31c>
  calc_var = 0;
  digitalWrite(FOURTWENTY_PWR, LOW); 
}
if (PROGRAM == 3) {
  //Stevens 4-20 sensor, reads from 0.5-2.5V, 0-10ft, 0.5V = 620, 2.5V = 3100
 digitalWrite(FOURTWENTY_PWR, HIGH); 
   d4346:	f005 fdc0 	bl	d9eca <digitalWrite>
  delay(500); //let everyone stabilize.  
   d434a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d434e:	f004 fd67 	bl	d8e20 <delay>
   d4352:	f04f 0805 	mov.w	r8, #5
  for (int j = 0; j<5 ; j++) { //uint16_t max is 65535, max ADC is 4095*5 = ~20000
    depth += analogRead(DEPTH_READ);
   d4356:	f8b9 0000 	ldrh.w	r0, [r9]
   d435a:	4e45      	ldr	r6, [pc, #276]	; (d4470 <_Z16Read_the_Analogsv+0x2f8>)
   d435c:	f005 fde1 	bl	d9f22 <analogRead>
   d4360:	8823      	ldrh	r3, [r4, #0]
   d4362:	4418      	add	r0, r3
   d4364:	8020      	strh	r0, [r4, #0]
    delay(100); //
   d4366:	2064      	movs	r0, #100	; 0x64
   d4368:	f004 fd5a 	bl	d8e20 <delay>
}
if (PROGRAM == 3) {
  //Stevens 4-20 sensor, reads from 0.5-2.5V, 0-10ft, 0.5V = 620, 2.5V = 3100
 digitalWrite(FOURTWENTY_PWR, HIGH); 
  delay(500); //let everyone stabilize.  
  for (int j = 0; j<5 ; j++) { //uint16_t max is 65535, max ADC is 4095*5 = ~20000
   d436c:	f1b8 0801 	subs.w	r8, r8, #1
   d4370:	d1f1      	bne.n	d4356 <_Z16Read_the_Analogsv+0x1de>
    depth += analogRead(DEPTH_READ);
    delay(100); //
  }
  depth = int(depth/5);
   d4372:	8833      	ldrh	r3, [r6, #0]
   d4374:	2205      	movs	r2, #5
   d4376:	fbb3 f3f2 	udiv	r3, r3, r2
  if (depth < 620) {
   d437a:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
   d437e:	d205      	bcs.n	d438c <_Z16Read_the_Analogsv+0x214>
	  if(depth == 0) {
   d4380:	b913      	cbnz	r3, d4388 <_Z16Read_the_Analogsv+0x210>
		  depth = 9999;  //there is an error reading
   d4382:	f242 730f 	movw	r3, #9999	; 0x270f
   d4386:	e001      	b.n	d438c <_Z16Read_the_Analogsv+0x214>
	  }
	  else {
		  depth = 620;  //if the read value is less than 620, it reads less than 0, which ends up giving values around 65530
   d4388:	f44f 731b 	mov.w	r3, #620	; 0x26c
   d438c:	8033      	strh	r3, [r6, #0]
  	}
  }
  calc_var = map(depth, 620, 3100, 0, 1000); 
   d438e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4392:	9300      	str	r3, [sp, #0]
   d4394:	f44f 711b 	mov.w	r1, #620	; 0x26c
   d4398:	2300      	movs	r3, #0
   d439a:	8820      	ldrh	r0, [r4, #0]
   d439c:	f640 421c 	movw	r2, #3100	; 0xc1c
   d43a0:	f004 fd32 	bl	d8e08 <_Z3mapiiiii>
  depth = calc_var;
  calc_var = 0;
   d43a4:	4b3a      	ldr	r3, [pc, #232]	; (d4490 <_Z16Read_the_Analogsv+0x318>)
	  else {
		  depth = 620;  //if the read value is less than 620, it reads less than 0, which ends up giving values around 65530
  	}
  }
  calc_var = map(depth, 620, 3100, 0, 1000); 
  depth = calc_var;
   d43a6:	8020      	strh	r0, [r4, #0]
  calc_var = 0;
   d43a8:	2100      	movs	r1, #0
  digitalWrite(FOURTWENTY_PWR, LOW); 
   d43aa:	8828      	ldrh	r0, [r5, #0]
		  depth = 620;  //if the read value is less than 620, it reads less than 0, which ends up giving values around 65530
  	}
  }
  calc_var = map(depth, 620, 3100, 0, 1000); 
  depth = calc_var;
  calc_var = 0;
   d43ac:	8019      	strh	r1, [r3, #0]
  digitalWrite(FOURTWENTY_PWR, LOW); 
   d43ae:	f005 fd8c 	bl	d9eca <digitalWrite>
}
if (PROGRAM == 4) {
   d43b2:	683b      	ldr	r3, [r7, #0]
   d43b4:	2b04      	cmp	r3, #4
   d43b6:	d139      	bne.n	d442c <_Z16Read_the_Analogsv+0x2b4>
//Banner 4-20 ultrasonic sensor, reads from 0.5-2.5V, 0-14ft*/
// I think I trained it to 1-15', so 0-14' is the range i used.
// after some thought, I trained it backwards so that it was reading depth correctly.
// so there is no need to subtract the depth from a base depth.
  digitalWrite(FOURTWENTY_PWR, HIGH); 
   d43b8:	2101      	movs	r1, #1
   d43ba:	8828      	ldrh	r0, [r5, #0]
  delay(1000); //let everyone stabilize.  
  for (int j = 0; j<5 ; j++) { //uint16_t max is 65535, max ADC is 4095*5 = ~20000
    depth += analogRead(DEPTH_READ);
   d43bc:	f8df 90d4 	ldr.w	r9, [pc, #212]	; d4494 <_Z16Read_the_Analogsv+0x31c>
if (PROGRAM == 4) {
//Banner 4-20 ultrasonic sensor, reads from 0.5-2.5V, 0-14ft*/
// I think I trained it to 1-15', so 0-14' is the range i used.
// after some thought, I trained it backwards so that it was reading depth correctly.
// so there is no need to subtract the depth from a base depth.
  digitalWrite(FOURTWENTY_PWR, HIGH); 
   d43c0:	f005 fd83 	bl	d9eca <digitalWrite>
  delay(1000); //let everyone stabilize.  
   d43c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d43c8:	f004 fd2a 	bl	d8e20 <delay>
   d43cc:	f04f 0805 	mov.w	r8, #5
  for (int j = 0; j<5 ; j++) { //uint16_t max is 65535, max ADC is 4095*5 = ~20000
    depth += analogRead(DEPTH_READ);
   d43d0:	f8b9 0000 	ldrh.w	r0, [r9]
   d43d4:	4e26      	ldr	r6, [pc, #152]	; (d4470 <_Z16Read_the_Analogsv+0x2f8>)
   d43d6:	f005 fda4 	bl	d9f22 <analogRead>
   d43da:	8823      	ldrh	r3, [r4, #0]
   d43dc:	4418      	add	r0, r3
   d43de:	8020      	strh	r0, [r4, #0]
    delay(100); //
   d43e0:	2064      	movs	r0, #100	; 0x64
   d43e2:	f004 fd1d 	bl	d8e20 <delay>
// I think I trained it to 1-15', so 0-14' is the range i used.
// after some thought, I trained it backwards so that it was reading depth correctly.
// so there is no need to subtract the depth from a base depth.
  digitalWrite(FOURTWENTY_PWR, HIGH); 
  delay(1000); //let everyone stabilize.  
  for (int j = 0; j<5 ; j++) { //uint16_t max is 65535, max ADC is 4095*5 = ~20000
   d43e6:	f1b8 0801 	subs.w	r8, r8, #1
   d43ea:	d1f1      	bne.n	d43d0 <_Z16Read_the_Analogsv+0x258>
    depth += analogRead(DEPTH_READ);
    delay(100); //
  }
  depth = int(depth/5);
   d43ec:	8833      	ldrh	r3, [r6, #0]
   d43ee:	2205      	movs	r2, #5
   d43f0:	fbb3 f3f2 	udiv	r3, r3, r2
  if (depth < 620) {
   d43f4:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
   d43f8:	d205      	bcs.n	d4406 <_Z16Read_the_Analogsv+0x28e>
	  if(depth == 0) {
   d43fa:	b913      	cbnz	r3, d4402 <_Z16Read_the_Analogsv+0x28a>
		  depth = 9999;  //there is an error reading
   d43fc:	f242 730f 	movw	r3, #9999	; 0x270f
   d4400:	e001      	b.n	d4406 <_Z16Read_the_Analogsv+0x28e>
	  }
	  else {
		  depth = 620;  //if the read value is less than 620, it reads less than 0, which ends up giving values around 65530
   d4402:	f44f 731b 	mov.w	r3, #620	; 0x26c
   d4406:	8033      	strh	r3, [r6, #0]
  	}
  }
  calc_var = map(depth, 620, 3100, 0, 1400); 
   d4408:	f44f 63af 	mov.w	r3, #1400	; 0x578
   d440c:	9300      	str	r3, [sp, #0]
   d440e:	f44f 711b 	mov.w	r1, #620	; 0x26c
   d4412:	2300      	movs	r3, #0
   d4414:	8820      	ldrh	r0, [r4, #0]
   d4416:	f640 421c 	movw	r2, #3100	; 0xc1c
   d441a:	f004 fcf5 	bl	d8e08 <_Z3mapiiiii>
  depth = calc_var;
  calc_var = 0;
   d441e:	4b1c      	ldr	r3, [pc, #112]	; (d4490 <_Z16Read_the_Analogsv+0x318>)
	  else {
		  depth = 620;  //if the read value is less than 620, it reads less than 0, which ends up giving values around 65530
  	}
  }
  calc_var = map(depth, 620, 3100, 0, 1400); 
  depth = calc_var;
   d4420:	8020      	strh	r0, [r4, #0]
  calc_var = 0;
   d4422:	2100      	movs	r1, #0
  digitalWrite(FOURTWENTY_PWR, LOW); 
   d4424:	8828      	ldrh	r0, [r5, #0]
		  depth = 620;  //if the read value is less than 620, it reads less than 0, which ends up giving values around 65530
  	}
  }
  calc_var = map(depth, 620, 3100, 0, 1400); 
  depth = calc_var;
  calc_var = 0;
   d4426:	8019      	strh	r1, [r3, #0]
  digitalWrite(FOURTWENTY_PWR, LOW); 
   d4428:	f005 fd4f 	bl	d9eca <digitalWrite>
}
if (PROGRAM == 5) {
   d442c:	683b      	ldr	r3, [r7, #0]
   d442e:	2b05      	cmp	r3, #5
   d4430:	d165      	bne.n	d44fe <_Z16Read_the_Analogsv+0x386>
  // App note: 15May20: running the feather relay pulls about 50 mA (per the website) and prevents
  //   the ultrasonic from getting more than about 2.6V, and it won't work.  So, you get 
  //   perpetually low readings and it reads full all the time. 
  //   after thinking about it, i believe this is because there is no power on the relay, and 
  //   so all of the current has to come from the MCU and not from the external power supply. duh...
  short_Nap = 290; //shorten the sleep time since we're lengthening the awake time
   d4432:	4b14      	ldr	r3, [pc, #80]	; (d4484 <_Z16Read_the_Analogsv+0x30c>)
  digitalWrite(FOURTWENTY_PWR, HIGH); //connect directly to pin instead of the relay
   d4434:	8828      	ldrh	r0, [r5, #0]
  delay(5000); //let everyone stabilize.  trying to get the first few datapoints to stabilize. 
  depth = analogRead(DEPTH_READ);
   d4436:	f8df 805c 	ldr.w	r8, [pc, #92]	; d4494 <_Z16Read_the_Analogsv+0x31c>
  int jj = 0;
  while ( depth < 100) { //see above.  unit keeps getting stuck in high reads.  See note about feather relay
   d443a:	f8df 9034 	ldr.w	r9, [pc, #52]	; d4470 <_Z16Read_the_Analogsv+0x2f8>
  // App note: 15May20: running the feather relay pulls about 50 mA (per the website) and prevents
  //   the ultrasonic from getting more than about 2.6V, and it won't work.  So, you get 
  //   perpetually low readings and it reads full all the time. 
  //   after thinking about it, i believe this is because there is no power on the relay, and 
  //   so all of the current has to come from the MCU and not from the external power supply. duh...
  short_Nap = 290; //shorten the sleep time since we're lengthening the awake time
   d443e:	f44f 7291 	mov.w	r2, #290	; 0x122
  digitalWrite(FOURTWENTY_PWR, HIGH); //connect directly to pin instead of the relay
   d4442:	2101      	movs	r1, #1
  // App note: 15May20: running the feather relay pulls about 50 mA (per the website) and prevents
  //   the ultrasonic from getting more than about 2.6V, and it won't work.  So, you get 
  //   perpetually low readings and it reads full all the time. 
  //   after thinking about it, i believe this is because there is no power on the relay, and 
  //   so all of the current has to come from the MCU and not from the external power supply. duh...
  short_Nap = 290; //shorten the sleep time since we're lengthening the awake time
   d4444:	601a      	str	r2, [r3, #0]
  digitalWrite(FOURTWENTY_PWR, HIGH); //connect directly to pin instead of the relay
   d4446:	f005 fd40 	bl	d9eca <digitalWrite>
  delay(5000); //let everyone stabilize.  trying to get the first few datapoints to stabilize. 
   d444a:	f241 3088 	movw	r0, #5000	; 0x1388
   d444e:	f004 fce7 	bl	d8e20 <delay>
  depth = analogRead(DEPTH_READ);
   d4452:	f8b8 0000 	ldrh.w	r0, [r8]
   d4456:	f005 fd64 	bl	d9f22 <analogRead>
   d445a:	2665      	movs	r6, #101	; 0x65
   d445c:	8020      	strh	r0, [r4, #0]
  int jj = 0;
  while ( depth < 100) { //see above.  unit keeps getting stuck in high reads.  See note about feather relay
   d445e:	8823      	ldrh	r3, [r4, #0]
   d4460:	2b63      	cmp	r3, #99	; 0x63
   d4462:	d919      	bls.n	d4498 <_Z16Read_the_Analogsv+0x320>
    delay(500); //for debugging
    if (jj>100) { //give up.  It's been 10 seconds... 
      break;
    }
  }
  depth=0; //reset from the test reads above.  We were picking up an extra read and introducing some error in our data -wb-25May20
   d4464:	2300      	movs	r3, #0
   d4466:	8023      	strh	r3, [r4, #0]
   d4468:	2608      	movs	r6, #8
   d446a:	e025      	b.n	d44b8 <_Z16Read_the_Analogsv+0x340>
   d446c:	2003e308 	.word	0x2003e308
   d4470:	2003e2d4 	.word	0x2003e2d4
   d4474:	2003e2fc 	.word	0x2003e2fc
   d4478:	2003e2c0 	.word	0x2003e2c0
   d447c:	2003e2d0 	.word	0x2003e2d0
   d4480:	2003dba8 	.word	0x2003dba8
   d4484:	2003db64 	.word	0x2003db64
   d4488:	2003dba4 	.word	0x2003dba4
   d448c:	2003dc08 	.word	0x2003dc08
   d4490:	2003e2f0 	.word	0x2003e2f0
   d4494:	2003db28 	.word	0x2003db28
  delay(5000); //let everyone stabilize.  trying to get the first few datapoints to stabilize. 
  depth = analogRead(DEPTH_READ);
  int jj = 0;
  while ( depth < 100) { //see above.  unit keeps getting stuck in high reads.  See note about feather relay
    jj++;
    delay(100);//delay 1/10 second
   d4498:	2064      	movs	r0, #100	; 0x64
   d449a:	f004 fcc1 	bl	d8e20 <delay>
    depth = analogRead(DEPTH_READ);
   d449e:	f8b8 0000 	ldrh.w	r0, [r8]
   d44a2:	f005 fd3e 	bl	d9f22 <analogRead>
   d44a6:	f8a9 0000 	strh.w	r0, [r9]
    //22Aug20_Serial.print("depth: ");
    //22Aug20_Serial.println(depth);
    delay(500); //for debugging
   d44aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d44ae:	f004 fcb7 	bl	d8e20 <delay>
    if (jj>100) { //give up.  It's been 10 seconds... 
   d44b2:	3e01      	subs	r6, #1
   d44b4:	d1d3      	bne.n	d445e <_Z16Read_the_Analogsv+0x2e6>
   d44b6:	e7d5      	b.n	d4464 <_Z16Read_the_Analogsv+0x2ec>
      break;
    }
  }
  depth=0; //reset from the test reads above.  We were picking up an extra read and introducing some error in our data -wb-25May20
  for (int j = 0; j<8 ; j++) { //uint16_t max is 65535, max ADC is 4095*5 = ~20000, *8 is ~40000
    depth += analogRead(DEPTH_READ);
   d44b8:	f8b8 0000 	ldrh.w	r0, [r8]
   d44bc:	f8df 9294 	ldr.w	r9, [pc, #660]	; d4754 <_Z16Read_the_Analogsv+0x5dc>
   d44c0:	f005 fd2f 	bl	d9f22 <analogRead>
   d44c4:	8823      	ldrh	r3, [r4, #0]
   d44c6:	4418      	add	r0, r3
   d44c8:	8020      	strh	r0, [r4, #0]
    //22Aug20_Serial.print("j : ");
    //22Aug20_Serial.print(j);
    //22Aug20_Serial.print(" depth : ");
    //22Aug20_Serial.println(depth);
    delay(100); //
   d44ca:	2064      	movs	r0, #100	; 0x64
   d44cc:	f004 fca8 	bl	d8e20 <delay>
    if (jj>100) { //give up.  It's been 10 seconds... 
      break;
    }
  }
  depth=0; //reset from the test reads above.  We were picking up an extra read and introducing some error in our data -wb-25May20
  for (int j = 0; j<8 ; j++) { //uint16_t max is 65535, max ADC is 4095*5 = ~20000, *8 is ~40000
   d44d0:	3e01      	subs	r6, #1
   d44d2:	d1f1      	bne.n	d44b8 <_Z16Read_the_Analogsv+0x340>
    //22Aug20_Serial.print(j);
    //22Aug20_Serial.print(" depth : ");
    //22Aug20_Serial.println(depth);
    delay(100); //
  }
  depth = int(depth/8); //changed to 8 to get more samples, hoping for a better average
   d44d4:	f8b9 0000 	ldrh.w	r0, [r9]
   d44d8:	08c0      	lsrs	r0, r0, #3
   d44da:	f8a9 0000 	strh.w	r0, [r9]
  calc_var = map(depth, 0, 2392, 1968, 0); //swapped this to read the opposite.  
   d44de:	f44f 63f6 	mov.w	r3, #1968	; 0x7b0
   d44e2:	4631      	mov	r1, r6
   d44e4:	9600      	str	r6, [sp, #0]
   d44e6:	f640 1258 	movw	r2, #2392	; 0x958
   d44ea:	f004 fc8d 	bl	d8e08 <_Z3mapiiiii>
  // if you're close, then it should read a greater value, and this reads 0-3V3.
  //  see note at the top on this map calculation
  depth = calc_var;
  calc_var = 0;
   d44ee:	4b8e      	ldr	r3, [pc, #568]	; (d4728 <_Z16Read_the_Analogsv+0x5b0>)
  }
  depth = int(depth/8); //changed to 8 to get more samples, hoping for a better average
  calc_var = map(depth, 0, 2392, 1968, 0); //swapped this to read the opposite.  
  // if you're close, then it should read a greater value, and this reads 0-3V3.
  //  see note at the top on this map calculation
  depth = calc_var;
   d44f0:	f8a9 0000 	strh.w	r0, [r9]
  calc_var = 0;
  digitalWrite(FOURTWENTY_PWR, LOW); 
   d44f4:	4631      	mov	r1, r6
   d44f6:	8828      	ldrh	r0, [r5, #0]
  depth = int(depth/8); //changed to 8 to get more samples, hoping for a better average
  calc_var = map(depth, 0, 2392, 1968, 0); //swapped this to read the opposite.  
  // if you're close, then it should read a greater value, and this reads 0-3V3.
  //  see note at the top on this map calculation
  depth = calc_var;
  calc_var = 0;
   d44f8:	801e      	strh	r6, [r3, #0]
  digitalWrite(FOURTWENTY_PWR, LOW); 
   d44fa:	f005 fce6 	bl	d9eca <digitalWrite>
}
if (PROGRAM == 6) {
   d44fe:	683b      	ldr	r3, [r7, #0]
   d4500:	2b06      	cmp	r3, #6
   d4502:	f040 80da 	bne.w	d46ba <_Z16Read_the_Analogsv+0x542>
  //  is: Dm=(Vm/(Vcc/1024)*(58e-06microSeconds))*(20.05*SQRT(Tc+273.15)/2)
  //    where Dm = distance measured, meters
  //    Vm = Voltage output from device, measured by user
  //    Vcc = supply voltage (3V3)
  //    Tc = temperature in Celsius
  short_Nap = 290; //shorten the sleep time since we're lengthening the awake time
   d4506:	4b89      	ldr	r3, [pc, #548]	; (d472c <_Z16Read_the_Analogsv+0x5b4>)
  digitalWrite(FOURTWENTY_PWR, HIGH); //connect directly to pin instead of the relay
   d4508:	8828      	ldrh	r0, [r5, #0]
  delay(5000); //let everyone stabilize.  trying to get the first few datapoints to stabilize. 
  depth = analogRead(DEPTH_READ); 
   d450a:	f8df 924c 	ldr.w	r9, [pc, #588]	; d4758 <_Z16Read_the_Analogsv+0x5e0>
  int jj = 0;
  while ( depth < 100) { //see above.  unit keeps getting stuck in high reads.  See note about feather relay
   d450e:	f8df 8244 	ldr.w	r8, [pc, #580]	; d4754 <_Z16Read_the_Analogsv+0x5dc>
  //  is: Dm=(Vm/(Vcc/1024)*(58e-06microSeconds))*(20.05*SQRT(Tc+273.15)/2)
  //    where Dm = distance measured, meters
  //    Vm = Voltage output from device, measured by user
  //    Vcc = supply voltage (3V3)
  //    Tc = temperature in Celsius
  short_Nap = 290; //shorten the sleep time since we're lengthening the awake time
   d4512:	f44f 7291 	mov.w	r2, #290	; 0x122
  digitalWrite(FOURTWENTY_PWR, HIGH); //connect directly to pin instead of the relay
   d4516:	2101      	movs	r1, #1
  //  is: Dm=(Vm/(Vcc/1024)*(58e-06microSeconds))*(20.05*SQRT(Tc+273.15)/2)
  //    where Dm = distance measured, meters
  //    Vm = Voltage output from device, measured by user
  //    Vcc = supply voltage (3V3)
  //    Tc = temperature in Celsius
  short_Nap = 290; //shorten the sleep time since we're lengthening the awake time
   d4518:	601a      	str	r2, [r3, #0]
  digitalWrite(FOURTWENTY_PWR, HIGH); //connect directly to pin instead of the relay
   d451a:	f005 fcd6 	bl	d9eca <digitalWrite>
  delay(5000); //let everyone stabilize.  trying to get the first few datapoints to stabilize. 
   d451e:	f241 3088 	movw	r0, #5000	; 0x1388
   d4522:	f004 fc7d 	bl	d8e20 <delay>
  depth = analogRead(DEPTH_READ); 
   d4526:	f8b9 0000 	ldrh.w	r0, [r9]
   d452a:	f005 fcfa 	bl	d9f22 <analogRead>
   d452e:	2665      	movs	r6, #101	; 0x65
   d4530:	8020      	strh	r0, [r4, #0]
  int jj = 0;
  while ( depth < 100) { //see above.  unit keeps getting stuck in high reads.  See note about feather relay
   d4532:	8823      	ldrh	r3, [r4, #0]
   d4534:	2b63      	cmp	r3, #99	; 0x63
   d4536:	d903      	bls.n	d4540 <_Z16Read_the_Analogsv+0x3c8>
    delay(500); //for debugging
    if (jj>100) { //give up.  It's been 10 seconds... 
      break;
    }
  }
  depth=0; //reset from the test reads above.  We were picking up an extra read and introducing some error in our data -wb-25May20
   d4538:	2300      	movs	r3, #0
   d453a:	8023      	strh	r3, [r4, #0]
   d453c:	2608      	movs	r6, #8
   d453e:	e00f      	b.n	d4560 <_Z16Read_the_Analogsv+0x3e8>
  delay(5000); //let everyone stabilize.  trying to get the first few datapoints to stabilize. 
  depth = analogRead(DEPTH_READ); 
  int jj = 0;
  while ( depth < 100) { //see above.  unit keeps getting stuck in high reads.  See note about feather relay
    jj++;
    delay(100);//delay 1/10 second
   d4540:	2064      	movs	r0, #100	; 0x64
   d4542:	f004 fc6d 	bl	d8e20 <delay>
    depth = analogRead(DEPTH_READ);
   d4546:	f8b9 0000 	ldrh.w	r0, [r9]
   d454a:	f005 fcea 	bl	d9f22 <analogRead>
   d454e:	f8a8 0000 	strh.w	r0, [r8]
    //22Aug20_Serial.print("depth: ");
    //22Aug20_Serial.println(depth);
    delay(500); //for debugging
   d4552:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4556:	f004 fc63 	bl	d8e20 <delay>
    if (jj>100) { //give up.  It's been 10 seconds... 
   d455a:	3e01      	subs	r6, #1
   d455c:	d1e9      	bne.n	d4532 <_Z16Read_the_Analogsv+0x3ba>
   d455e:	e7eb      	b.n	d4538 <_Z16Read_the_Analogsv+0x3c0>
      break;
    }
  }
  depth=0; //reset from the test reads above.  We were picking up an extra read and introducing some error in our data -wb-25May20
  for (int j = 0; j<8 ; j++) { //uint16_t max is 65535, max ADC is 4095*5 = ~20000, *8 is ~40000
    depth += analogRead(DEPTH_READ);
   d4560:	f8b9 0000 	ldrh.w	r0, [r9]
   d4564:	f8df 81ec 	ldr.w	r8, [pc, #492]	; d4754 <_Z16Read_the_Analogsv+0x5dc>
   d4568:	f005 fcdb 	bl	d9f22 <analogRead>
   d456c:	8823      	ldrh	r3, [r4, #0]
   d456e:	4418      	add	r0, r3
   d4570:	8020      	strh	r0, [r4, #0]
    //22Aug20_Serial.print("j : ");
    //22Aug20_Serial.print(j);
    //22Aug20_Serial.print(" depth : ");
    //22Aug20_Serial.println(depth);
    delay(100); //
   d4572:	2064      	movs	r0, #100	; 0x64
   d4574:	f004 fc54 	bl	d8e20 <delay>
    if (jj>100) { //give up.  It's been 10 seconds... 
      break;
    }
  }
  depth=0; //reset from the test reads above.  We were picking up an extra read and introducing some error in our data -wb-25May20
  for (int j = 0; j<8 ; j++) { //uint16_t max is 65535, max ADC is 4095*5 = ~20000, *8 is ~40000
   d4578:	3e01      	subs	r6, #1
   d457a:	d1f1      	bne.n	d4560 <_Z16Read_the_Analogsv+0x3e8>
    //22Aug20_Serial.print(j);
    //22Aug20_Serial.print(" depth : ");
    //22Aug20_Serial.println(depth);
    delay(100); //
  }
  depth = int(depth/8); //changed to 8 to get more samples, hoping for a better average
   d457c:	f8b8 0000 	ldrh.w	r0, [r8]
  //22Aug20_Serial.print("Depth reading: ");
  //22Aug20_Serial.println(depth);
  calc_var = map(depth, 0, 2392, 1968, 0);
  //22Aug20_Serial.print("Depth uncorrected: ");
  //22Aug20_Serial.println(calc_var);
  calc_var=0;
   d4580:	f8df a1a4 	ldr.w	sl, [pc, #420]	; d4728 <_Z16Read_the_Analogsv+0x5b0>
  //  just another item on the learning curve.
  //calc_var_dm = (depth/(3300/1024));
  calc_var_dm = (float(depth)/float(3300./1024.));
  //22Aug20_Serial.print("cv_dm_2: ");
  //22Aug20_Serial.println(calc_var_dm);
  calc_var_dm = calc_var_dm * 0.000058; //wow, read that 5.8e-6 but its 58e-6
   d4584:	f8df 91d4 	ldr.w	r9, [pc, #468]	; d475c <_Z16Read_the_Analogsv+0x5e4>
    //22Aug20_Serial.print(j);
    //22Aug20_Serial.print(" depth : ");
    //22Aug20_Serial.println(depth);
    delay(100); //
  }
  depth = int(depth/8); //changed to 8 to get more samples, hoping for a better average
   d4588:	08c0      	lsrs	r0, r0, #3
   d458a:	f8a8 0000 	strh.w	r0, [r8]
  //22Aug20_Serial.print("Depth reading: ");
  //22Aug20_Serial.println(depth);
  calc_var = map(depth, 0, 2392, 1968, 0);
   d458e:	f44f 63f6 	mov.w	r3, #1968	; 0x7b0
   d4592:	f640 1258 	movw	r2, #2392	; 0x958
   d4596:	4631      	mov	r1, r6
   d4598:	9600      	str	r6, [sp, #0]
   d459a:	f004 fc35 	bl	d8e08 <_Z3mapiiiii>
  //22Aug20_Serial.print("Depth uncorrected: ");
  //22Aug20_Serial.println(calc_var);
  calc_var=0;
  calc_var = map(depth, 0, 2392, 0, 1920); //converting reading back to voltage; see app note on section 5 above
   d459e:	f44f 63f0 	mov.w	r3, #1920	; 0x780
   d45a2:	f640 1258 	movw	r2, #2392	; 0x958
  //22Aug20_Serial.print("Depth reading: ");
  //22Aug20_Serial.println(depth);
  calc_var = map(depth, 0, 2392, 1968, 0);
  //22Aug20_Serial.print("Depth uncorrected: ");
  //22Aug20_Serial.println(calc_var);
  calc_var=0;
   d45a6:	f8aa 6000 	strh.w	r6, [sl]
  calc_var = map(depth, 0, 2392, 0, 1920); //converting reading back to voltage; see app note on section 5 above
   d45aa:	f8b8 0000 	ldrh.w	r0, [r8]
   d45ae:	9300      	str	r3, [sp, #0]
   d45b0:	4631      	mov	r1, r6
   d45b2:	4633      	mov	r3, r6
   d45b4:	f004 fc28 	bl	d8e08 <_Z3mapiiiii>
  depth = calc_var;
  //22Aug20_Serial.print("Depth voltage: ");
  //22Aug20_Serial.println(depth);
  //grab the temperature
  digitalWrite(TEMP_PWR, HIGH); 
   d45b8:	4b5d      	ldr	r3, [pc, #372]	; (d4730 <_Z16Read_the_Analogsv+0x5b8>)
  //22Aug20_Serial.println(depth);
  calc_var = map(depth, 0, 2392, 1968, 0);
  //22Aug20_Serial.print("Depth uncorrected: ");
  //22Aug20_Serial.println(calc_var);
  calc_var=0;
  calc_var = map(depth, 0, 2392, 0, 1920); //converting reading back to voltage; see app note on section 5 above
   d45ba:	b280      	uxth	r0, r0
  depth = calc_var;
  //22Aug20_Serial.print("Depth voltage: ");
  //22Aug20_Serial.println(depth);
  //grab the temperature
  digitalWrite(TEMP_PWR, HIGH); 
   d45bc:	2101      	movs	r1, #1
  //22Aug20_Serial.println(depth);
  calc_var = map(depth, 0, 2392, 1968, 0);
  //22Aug20_Serial.print("Depth uncorrected: ");
  //22Aug20_Serial.println(calc_var);
  calc_var=0;
  calc_var = map(depth, 0, 2392, 0, 1920); //converting reading back to voltage; see app note on section 5 above
   d45be:	f8aa 0000 	strh.w	r0, [sl]
  depth = calc_var;
   d45c2:	f8a8 0000 	strh.w	r0, [r8]
  //22Aug20_Serial.print("Depth voltage: ");
  //22Aug20_Serial.println(depth);
  //grab the temperature
  digitalWrite(TEMP_PWR, HIGH); 
   d45c6:	8818      	ldrh	r0, [r3, #0]
   d45c8:	f005 fc7f 	bl	d9eca <digitalWrite>
  delay(100);
   d45cc:	2064      	movs	r0, #100	; 0x64
   d45ce:	f004 fc27 	bl	d8e20 <delay>
  air_temp = analogRead(TEMP_READ); 
   d45d2:	4b58      	ldr	r3, [pc, #352]	; (d4734 <_Z16Read_the_Analogsv+0x5bc>)
   d45d4:	8818      	ldrh	r0, [r3, #0]
   d45d6:	f005 fca4 	bl	d9f22 <analogRead>
   d45da:	4b57      	ldr	r3, [pc, #348]	; (d4738 <_Z16Read_the_Analogsv+0x5c0>)
   d45dc:	8018      	strh	r0, [r3, #0]
  calc_var = map(air_temp,0,4095,0,3300);
   d45de:	f640 43e4 	movw	r3, #3300	; 0xce4
   d45e2:	f640 72ff 	movw	r2, #4095	; 0xfff
   d45e6:	9300      	str	r3, [sp, #0]
   d45e8:	4631      	mov	r1, r6
   d45ea:	4633      	mov	r3, r6
   d45ec:	b280      	uxth	r0, r0
   d45ee:	f004 fc0b 	bl	d8e08 <_Z3mapiiiii>
   d45f2:	f8aa 0000 	strh.w	r0, [sl]
  realtemp = ((calc_var / 10.)) - 50; //temp in C.  the formula is 100*temp2 - 50, but we're reading to 3V3 (3300), which is the same as /10 
   d45f6:	b280      	uxth	r0, r0
   d45f8:	f006 fa12 	bl	daa20 <__aeabi_i2d>
   d45fc:	2200      	movs	r2, #0
   d45fe:	4b4f      	ldr	r3, [pc, #316]	; (d473c <_Z16Read_the_Analogsv+0x5c4>)
   d4600:	f006 fb9e 	bl	dad40 <__aeabi_ddiv>
   d4604:	2200      	movs	r2, #0
   d4606:	4b4e      	ldr	r3, [pc, #312]	; (d4740 <_Z16Read_the_Analogsv+0x5c8>)
   d4608:	f006 f8bc 	bl	da784 <__aeabi_dsub>
   d460c:	4b4d      	ldr	r3, [pc, #308]	; (d4744 <_Z16Read_the_Analogsv+0x5cc>)
  //  just another item on the learning curve.
  //calc_var_dm = (depth/(3300/1024));
  calc_var_dm = (float(depth)/float(3300./1024.));
  //22Aug20_Serial.print("cv_dm_2: ");
  //22Aug20_Serial.println(calc_var_dm);
  calc_var_dm = calc_var_dm * 0.000058; //wow, read that 5.8e-6 but its 58e-6
   d460e:	ed9f 7a4e 	vldr	s14, [pc, #312]	; d4748 <_Z16Read_the_Analogsv+0x5d0>
  //grab the temperature
  digitalWrite(TEMP_PWR, HIGH); 
  delay(100);
  air_temp = analogRead(TEMP_READ); 
  calc_var = map(air_temp,0,4095,0,3300);
  realtemp = ((calc_var / 10.)) - 50; //temp in C.  the formula is 100*temp2 - 50, but we're reading to 3V3 (3300), which is the same as /10 
   d4612:	e9c3 0100 	strd	r0, r1, [r3]
  //  just another item on the learning curve.
  //calc_var_dm = (depth/(3300/1024));
  calc_var_dm = (float(depth)/float(3300./1024.));
  //22Aug20_Serial.print("cv_dm_2: ");
  //22Aug20_Serial.println(calc_var_dm);
  calc_var_dm = calc_var_dm * 0.000058; //wow, read that 5.8e-6 but its 58e-6
   d4616:	f8b8 3000 	ldrh.w	r3, [r8]
   d461a:	ee07 3a90 	vmov	s15, r3
   d461e:	eef8 7a67 	vcvt.f32.u32	s15, s15
  //grab the temperature
  digitalWrite(TEMP_PWR, HIGH); 
  delay(100);
  air_temp = analogRead(TEMP_READ); 
  calc_var = map(air_temp,0,4095,0,3300);
  realtemp = ((calc_var / 10.)) - 50; //temp in C.  the formula is 100*temp2 - 50, but we're reading to 3V3 (3300), which is the same as /10 
   d4622:	e9cd 0102 	strd	r0, r1, [sp, #8]
  //  just another item on the learning curve.
  //calc_var_dm = (depth/(3300/1024));
  calc_var_dm = (float(depth)/float(3300./1024.));
  //22Aug20_Serial.print("cv_dm_2: ");
  //22Aug20_Serial.println(calc_var_dm);
  calc_var_dm = calc_var_dm * 0.000058; //wow, read that 5.8e-6 but its 58e-6
   d4626:	eec7 6a87 	vdiv.f32	s13, s15, s14
   d462a:	ee16 0a90 	vmov	r0, s13
   d462e:	f006 fa09 	bl	daa44 <__aeabi_f2d>
   d4632:	a335      	add	r3, pc, #212	; (adr r3, d4708 <_Z16Read_the_Analogsv+0x590>)
   d4634:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4638:	f006 fa58 	bl	daaec <__aeabi_dmul>
  //22Aug20_Serial.print("cv_dm_3: ");
  //22Aug20_Serial.println(calc_var_dm);
  calc_var_dm = calc_var_dm*(20.05*sqrt(realtemp+273.15)/2); //depth in meters
   d463c:	a334      	add	r3, pc, #208	; (adr r3, d4710 <_Z16Read_the_Analogsv+0x598>)
   d463e:	e9d3 2300 	ldrd	r2, r3, [r3]
  //  just another item on the learning curve.
  //calc_var_dm = (depth/(3300/1024));
  calc_var_dm = (float(depth)/float(3300./1024.));
  //22Aug20_Serial.print("cv_dm_2: ");
  //22Aug20_Serial.println(calc_var_dm);
  calc_var_dm = calc_var_dm * 0.000058; //wow, read that 5.8e-6 but its 58e-6
   d4642:	e9c9 0100 	strd	r0, r1, [r9]
  //22Aug20_Serial.print("cv_dm_3: ");
  //22Aug20_Serial.println(calc_var_dm);
  calc_var_dm = calc_var_dm*(20.05*sqrt(realtemp+273.15)/2); //depth in meters
   d4646:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d464a:	f006 f89d 	bl	da788 <__adddf3>
   d464e:	ec41 0b10 	vmov	d0, r0, r1
   d4652:	f005 ff61 	bl	da518 <sqrt>
  //22Aug20_Serial.print("cv_dm_4: ");
  //22Aug20_Serial.println(calc_var_dm);
  calc_var_dm = calc_var_dm/0.3048; //depth in feet
   d4656:	a330      	add	r3, pc, #192	; (adr r3, d4718 <_Z16Read_the_Analogsv+0x5a0>)
   d4658:	e9d3 2300 	ldrd	r2, r3, [r3]
   d465c:	ec51 0b10 	vmov	r0, r1, d0
   d4660:	f006 fa44 	bl	daaec <__aeabi_dmul>
   d4664:	2200      	movs	r2, #0
   d4666:	4b39      	ldr	r3, [pc, #228]	; (d474c <_Z16Read_the_Analogsv+0x5d4>)
   d4668:	f006 fa40 	bl	daaec <__aeabi_dmul>
   d466c:	e9d9 2300 	ldrd	r2, r3, [r9]
   d4670:	f006 fa3c 	bl	daaec <__aeabi_dmul>
   d4674:	a32a      	add	r3, pc, #168	; (adr r3, d4720 <_Z16Read_the_Analogsv+0x5a8>)
   d4676:	e9d3 2300 	ldrd	r2, r3, [r3]
   d467a:	f006 fb61 	bl	dad40 <__aeabi_ddiv>
  //22Aug20_Serial.print("cv_dm_5: ");
  //22Aug20_Serial.println(calc_var_dm);
  depth = int(calc_var_dm*100); //depth in hundredths
   d467e:	2200      	movs	r2, #0
   d4680:	4b33      	ldr	r3, [pc, #204]	; (d4750 <_Z16Read_the_Analogsv+0x5d8>)
  //22Aug20_Serial.print("cv_dm_3: ");
  //22Aug20_Serial.println(calc_var_dm);
  calc_var_dm = calc_var_dm*(20.05*sqrt(realtemp+273.15)/2); //depth in meters
  //22Aug20_Serial.print("cv_dm_4: ");
  //22Aug20_Serial.println(calc_var_dm);
  calc_var_dm = calc_var_dm/0.3048; //depth in feet
   d4682:	e9c9 0100 	strd	r0, r1, [r9]
  //22Aug20_Serial.print("cv_dm_5: ");
  //22Aug20_Serial.println(calc_var_dm);
  depth = int(calc_var_dm*100); //depth in hundredths
   d4686:	f006 fa31 	bl	daaec <__aeabi_dmul>
   d468a:	f006 fcdf 	bl	db04c <__aeabi_d2iz>
  //22Aug20_Serial.print("cv_dm_6: ");
  //22Aug20_Serial.println(calc_var_dm);
  calc_var = map(depth, 0, 1968, 1968, 0); //reverse the calc to measure depth, not distance to target
   d468e:	f44f 63f6 	mov.w	r3, #1968	; 0x7b0
  //22Aug20_Serial.print("cv_dm_4: ");
  //22Aug20_Serial.println(calc_var_dm);
  calc_var_dm = calc_var_dm/0.3048; //depth in feet
  //22Aug20_Serial.print("cv_dm_5: ");
  //22Aug20_Serial.println(calc_var_dm);
  depth = int(calc_var_dm*100); //depth in hundredths
   d4692:	f8a8 0000 	strh.w	r0, [r8]
  //22Aug20_Serial.print("cv_dm_6: ");
  //22Aug20_Serial.println(calc_var_dm);
  calc_var = map(depth, 0, 1968, 1968, 0); //reverse the calc to measure depth, not distance to target
   d4696:	461a      	mov	r2, r3
   d4698:	4631      	mov	r1, r6
   d469a:	9600      	str	r6, [sp, #0]
   d469c:	b280      	uxth	r0, r0
   d469e:	f004 fbb3 	bl	d8e08 <_Z3mapiiiii>
  //22Aug20_Serial.println(calc_var);
  depth = calc_var;
  //22Aug20_Serial.print("depth: ");
  //22Aug20_Serial.println(depth);
  calc_var = 0;
  calc_var_dm = 0;
   d46a2:	2200      	movs	r2, #0
  //22Aug20_Serial.print("cv_dm_6: ");
  //22Aug20_Serial.println(calc_var_dm);
  calc_var = map(depth, 0, 1968, 1968, 0); //reverse the calc to measure depth, not distance to target
  //22Aug20_Serial.print("cv_dm_7: ");
  //22Aug20_Serial.println(calc_var);
  depth = calc_var;
   d46a4:	f8a8 0000 	strh.w	r0, [r8]
  //22Aug20_Serial.print("depth: ");
  //22Aug20_Serial.println(depth);
  calc_var = 0;
  calc_var_dm = 0;
   d46a8:	2300      	movs	r3, #0
  digitalWrite(FOURTWENTY_PWR, LOW); 
   d46aa:	4631      	mov	r1, r6
   d46ac:	8828      	ldrh	r0, [r5, #0]
  //22Aug20_Serial.print("cv_dm_7: ");
  //22Aug20_Serial.println(calc_var);
  depth = calc_var;
  //22Aug20_Serial.print("depth: ");
  //22Aug20_Serial.println(depth);
  calc_var = 0;
   d46ae:	f8aa 6000 	strh.w	r6, [sl]
  calc_var_dm = 0;
   d46b2:	e9c9 2300 	strd	r2, r3, [r9]
  digitalWrite(FOURTWENTY_PWR, LOW); 
   d46b6:	f005 fc08 	bl	d9eca <digitalWrite>
}
if (PROGRAM == 7) { //old AST low voltage transducer, reads from 0.5-2.5V, 0-5 psi (1163 ft), 0.5V = 620, 2.5V = 3100
   d46ba:	683b      	ldr	r3, [r7, #0]
   d46bc:	2b07      	cmp	r3, #7
   d46be:	d164      	bne.n	d478a <_Z16Read_the_Analogsv+0x612>
  digitalWrite(FOURTWENTY_PWR, HIGH); 
   d46c0:	2101      	movs	r1, #1
   d46c2:	8828      	ldrh	r0, [r5, #0]
  delay(500); //let everyone stabilize.  
  for (int j = 0; j<5 ; j++) { //uint16_t max is 65535, max ADC is 4095*5 = ~20000
    depth += analogRead(DEPTH_READ);
   d46c4:	f8df 8090 	ldr.w	r8, [pc, #144]	; d4758 <_Z16Read_the_Analogsv+0x5e0>
  calc_var = 0;
  calc_var_dm = 0;
  digitalWrite(FOURTWENTY_PWR, LOW); 
}
if (PROGRAM == 7) { //old AST low voltage transducer, reads from 0.5-2.5V, 0-5 psi (1163 ft), 0.5V = 620, 2.5V = 3100
  digitalWrite(FOURTWENTY_PWR, HIGH); 
   d46c8:	f005 fbff 	bl	d9eca <digitalWrite>
  delay(500); //let everyone stabilize.  
   d46cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d46d0:	f004 fba6 	bl	d8e20 <delay>
   d46d4:	2705      	movs	r7, #5
  for (int j = 0; j<5 ; j++) { //uint16_t max is 65535, max ADC is 4095*5 = ~20000
    depth += analogRead(DEPTH_READ);
   d46d6:	f8b8 0000 	ldrh.w	r0, [r8]
   d46da:	4e1e      	ldr	r6, [pc, #120]	; (d4754 <_Z16Read_the_Analogsv+0x5dc>)
   d46dc:	f005 fc21 	bl	d9f22 <analogRead>
   d46e0:	8823      	ldrh	r3, [r4, #0]
   d46e2:	4418      	add	r0, r3
   d46e4:	8020      	strh	r0, [r4, #0]
    delay(100); //
   d46e6:	2064      	movs	r0, #100	; 0x64
   d46e8:	f004 fb9a 	bl	d8e20 <delay>
  digitalWrite(FOURTWENTY_PWR, LOW); 
}
if (PROGRAM == 7) { //old AST low voltage transducer, reads from 0.5-2.5V, 0-5 psi (1163 ft), 0.5V = 620, 2.5V = 3100
  digitalWrite(FOURTWENTY_PWR, HIGH); 
  delay(500); //let everyone stabilize.  
  for (int j = 0; j<5 ; j++) { //uint16_t max is 65535, max ADC is 4095*5 = ~20000
   d46ec:	3f01      	subs	r7, #1
   d46ee:	d1f2      	bne.n	d46d6 <_Z16Read_the_Analogsv+0x55e>
    depth += analogRead(DEPTH_READ);
    delay(100); //
  }
  depth = int(depth/5);
   d46f0:	8833      	ldrh	r3, [r6, #0]
   d46f2:	2205      	movs	r2, #5
   d46f4:	fbb3 f3f2 	udiv	r3, r3, r2
  if (depth < 620) {
   d46f8:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
   d46fc:	d232      	bcs.n	d4764 <_Z16Read_the_Analogsv+0x5ec>
	  if(depth == 0) {
   d46fe:	bb7b      	cbnz	r3, d4760 <_Z16Read_the_Analogsv+0x5e8>
		  depth = 9999;  //there is an error reading
   d4700:	f242 730f 	movw	r3, #9999	; 0x270f
   d4704:	e02e      	b.n	d4764 <_Z16Read_the_Analogsv+0x5ec>
   d4706:	bf00      	nop
   d4708:	d349be90 	.word	0xd349be90
   d470c:	3f0e68a0 	.word	0x3f0e68a0
   d4710:	66666666 	.word	0x66666666
   d4714:	40711266 	.word	0x40711266
   d4718:	cccccccd 	.word	0xcccccccd
   d471c:	40340ccc 	.word	0x40340ccc
   d4720:	dbf487fd 	.word	0xdbf487fd
   d4724:	3fd381d7 	.word	0x3fd381d7
   d4728:	2003e2f0 	.word	0x2003e2f0
   d472c:	2003db64 	.word	0x2003db64
   d4730:	2003dbc4 	.word	0x2003dbc4
   d4734:	2003db24 	.word	0x2003db24
   d4738:	2003e2d0 	.word	0x2003e2d0
   d473c:	40240000 	.word	0x40240000
   d4740:	40490000 	.word	0x40490000
   d4744:	2003e300 	.word	0x2003e300
   d4748:	404e4000 	.word	0x404e4000
   d474c:	3fe00000 	.word	0x3fe00000
   d4750:	40590000 	.word	0x40590000
   d4754:	2003e2d4 	.word	0x2003e2d4
   d4758:	2003db28 	.word	0x2003db28
   d475c:	2003e2b8 	.word	0x2003e2b8
	  }
	  else {
		  depth = 620;  //if the read value is less than 620, it reads less than 0, which ends up giving values around 65530
   d4760:	f44f 731b 	mov.w	r3, #620	; 0x26c
   d4764:	8033      	strh	r3, [r6, #0]
  	}
  }
  calc_var = map(depth, 620, 3100, 0, 1163); 
   d4766:	f240 438b 	movw	r3, #1163	; 0x48b
   d476a:	9300      	str	r3, [sp, #0]
   d476c:	f44f 711b 	mov.w	r1, #620	; 0x26c
   d4770:	2300      	movs	r3, #0
   d4772:	8820      	ldrh	r0, [r4, #0]
   d4774:	f640 421c 	movw	r2, #3100	; 0xc1c
   d4778:	f004 fb46 	bl	d8e08 <_Z3mapiiiii>
  depth = calc_var;
  calc_var = 0;
   d477c:	4b5c      	ldr	r3, [pc, #368]	; (d48f0 <_Z16Read_the_Analogsv+0x778>)
	  else {
		  depth = 620;  //if the read value is less than 620, it reads less than 0, which ends up giving values around 65530
  	}
  }
  calc_var = map(depth, 620, 3100, 0, 1163); 
  depth = calc_var;
   d477e:	8020      	strh	r0, [r4, #0]
  calc_var = 0;
   d4780:	2100      	movs	r1, #0
  digitalWrite(FOURTWENTY_PWR, LOW); 
   d4782:	8828      	ldrh	r0, [r5, #0]
		  depth = 620;  //if the read value is less than 620, it reads less than 0, which ends up giving values around 65530
  	}
  }
  calc_var = map(depth, 620, 3100, 0, 1163); 
  depth = calc_var;
  calc_var = 0;
   d4784:	8019      	strh	r1, [r3, #0]
  digitalWrite(FOURTWENTY_PWR, LOW); 
   d4786:	f005 fba0 	bl	d9eca <digitalWrite>
}
//read all the other vars
  digitalWrite(TEMP_PWR, HIGH); 
   d478a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; d4930 <_Z16Read_the_Analogsv+0x7b8>
  delay(100);
  air_temp = analogRead(TEMP_READ); 
   d478e:	4e59      	ldr	r6, [pc, #356]	; (d48f4 <_Z16Read_the_Analogsv+0x77c>)
  depth = calc_var;
  calc_var = 0;
  digitalWrite(FOURTWENTY_PWR, LOW); 
}
//read all the other vars
  digitalWrite(TEMP_PWR, HIGH); 
   d4790:	f8b8 0000 	ldrh.w	r0, [r8]
  delay(100);
  air_temp = analogRead(TEMP_READ); 
  calc_var = map(air_temp,0,4095,0,3300);
  realtemp = ((calc_var / 10.)) - 50; //temp in C.  the formula is 100*temp2 - 50, but we're reading to 3V3 (3300), which is the same as /10 
  realtemp = ((realtemp * 9. / 5.) + 32.); //temp in F
   d4794:	4f58      	ldr	r7, [pc, #352]	; (d48f8 <_Z16Read_the_Analogsv+0x780>)
  depth = calc_var;
  calc_var = 0;
  digitalWrite(FOURTWENTY_PWR, LOW); 
}
//read all the other vars
  digitalWrite(TEMP_PWR, HIGH); 
   d4796:	2101      	movs	r1, #1
   d4798:	f005 fb97 	bl	d9eca <digitalWrite>
  delay(100);
   d479c:	2064      	movs	r0, #100	; 0x64
   d479e:	f004 fb3f 	bl	d8e20 <delay>
  air_temp = analogRead(TEMP_READ); 
   d47a2:	4b56      	ldr	r3, [pc, #344]	; (d48fc <_Z16Read_the_Analogsv+0x784>)
   d47a4:	8818      	ldrh	r0, [r3, #0]
   d47a6:	f005 fbbc 	bl	d9f22 <analogRead>
  calc_var = map(air_temp,0,4095,0,3300);
   d47aa:	f640 43e4 	movw	r3, #3300	; 0xce4
  digitalWrite(FOURTWENTY_PWR, LOW); 
}
//read all the other vars
  digitalWrite(TEMP_PWR, HIGH); 
  delay(100);
  air_temp = analogRead(TEMP_READ); 
   d47ae:	8030      	strh	r0, [r6, #0]
  calc_var = map(air_temp,0,4095,0,3300);
   d47b0:	9300      	str	r3, [sp, #0]
   d47b2:	2300      	movs	r3, #0
   d47b4:	f640 72ff 	movw	r2, #4095	; 0xfff
   d47b8:	4619      	mov	r1, r3
   d47ba:	b280      	uxth	r0, r0
   d47bc:	f004 fb24 	bl	d8e08 <_Z3mapiiiii>
   d47c0:	4b4b      	ldr	r3, [pc, #300]	; (d48f0 <_Z16Read_the_Analogsv+0x778>)
   d47c2:	8018      	strh	r0, [r3, #0]
  realtemp = ((calc_var / 10.)) - 50; //temp in C.  the formula is 100*temp2 - 50, but we're reading to 3V3 (3300), which is the same as /10 
  realtemp = ((realtemp * 9. / 5.) + 32.); //temp in F
   d47c4:	b280      	uxth	r0, r0
   d47c6:	f006 f92b 	bl	daa20 <__aeabi_i2d>
   d47ca:	2200      	movs	r2, #0
   d47cc:	4b4c      	ldr	r3, [pc, #304]	; (d4900 <_Z16Read_the_Analogsv+0x788>)
   d47ce:	f006 fab7 	bl	dad40 <__aeabi_ddiv>
   d47d2:	2200      	movs	r2, #0
   d47d4:	4b4b      	ldr	r3, [pc, #300]	; (d4904 <_Z16Read_the_Analogsv+0x78c>)
   d47d6:	f005 ffd5 	bl	da784 <__aeabi_dsub>
   d47da:	2200      	movs	r2, #0
   d47dc:	4b4a      	ldr	r3, [pc, #296]	; (d4908 <_Z16Read_the_Analogsv+0x790>)
   d47de:	f006 f985 	bl	daaec <__aeabi_dmul>
   d47e2:	2200      	movs	r2, #0
   d47e4:	4b49      	ldr	r3, [pc, #292]	; (d490c <_Z16Read_the_Analogsv+0x794>)
   d47e6:	f006 faab 	bl	dad40 <__aeabi_ddiv>
   d47ea:	2200      	movs	r2, #0
   d47ec:	4b48      	ldr	r3, [pc, #288]	; (d4910 <_Z16Read_the_Analogsv+0x798>)
   d47ee:	f005 ffcb 	bl	da788 <__adddf3>
   d47f2:	e9c7 0100 	strd	r0, r1, [r7]
  air_temp = int(realtemp);
   d47f6:	f006 fc29 	bl	db04c <__aeabi_d2iz>
  //turn everything off
  digitalWrite(FOURTWENTY_PWR, LOW); 
   d47fa:	2100      	movs	r1, #0
  delay(100);
  air_temp = analogRead(TEMP_READ); 
  calc_var = map(air_temp,0,4095,0,3300);
  realtemp = ((calc_var / 10.)) - 50; //temp in C.  the formula is 100*temp2 - 50, but we're reading to 3V3 (3300), which is the same as /10 
  realtemp = ((realtemp * 9. / 5.) + 32.); //temp in F
  air_temp = int(realtemp);
   d47fc:	8030      	strh	r0, [r6, #0]
  //turn everything off
  digitalWrite(FOURTWENTY_PWR, LOW); 
   d47fe:	8828      	ldrh	r0, [r5, #0]
  digitalWrite(TEMP_PWR, LOW); 
  battCharge = int(fuel.getSoC());
  realtemp = (battCharge*3.7);
  voltage = int(realtemp);
   d4800:	4d44      	ldr	r5, [pc, #272]	; (d4914 <_Z16Read_the_Analogsv+0x79c>)
  calc_var = map(air_temp,0,4095,0,3300);
  realtemp = ((calc_var / 10.)) - 50; //temp in C.  the formula is 100*temp2 - 50, but we're reading to 3V3 (3300), which is the same as /10 
  realtemp = ((realtemp * 9. / 5.) + 32.); //temp in F
  air_temp = int(realtemp);
  //turn everything off
  digitalWrite(FOURTWENTY_PWR, LOW); 
   d4802:	f005 fb62 	bl	d9eca <digitalWrite>
  digitalWrite(TEMP_PWR, LOW); 
   d4806:	2100      	movs	r1, #0
   d4808:	f8b8 0000 	ldrh.w	r0, [r8]
   d480c:	f005 fb5d 	bl	d9eca <digitalWrite>
  battCharge = int(fuel.getSoC());
   d4810:	4841      	ldr	r0, [pc, #260]	; (d4918 <_Z16Read_the_Analogsv+0x7a0>)
   d4812:	f004 fbbf 	bl	d8f94 <_ZN9FuelGauge6getSoCEv>
   d4816:	4b41      	ldr	r3, [pc, #260]	; (d491c <_Z16Read_the_Analogsv+0x7a4>)
   d4818:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   d481c:	edc3 7a00 	vstr	s15, [r3]
   d4820:	ee17 0a90 	vmov	r0, s15
  realtemp = (battCharge*3.7);
  voltage = int(realtemp);
   d4824:	f006 f8fc 	bl	daa20 <__aeabi_i2d>
   d4828:	a32f      	add	r3, pc, #188	; (adr r3, d48e8 <_Z16Read_the_Analogsv+0x770>)
   d482a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d482e:	f006 f95d 	bl	daaec <__aeabi_dmul>
   d4832:	f006 fc0b 	bl	db04c <__aeabi_d2iz>
   d4836:	b280      	uxth	r0, r0
  realtemp = 0;
   d4838:	2200      	movs	r2, #0
   d483a:	2300      	movs	r3, #0
  //22Aug20_Serial.println(voltage);
  //a hack to read the 12V battery voltage off of the R152 power board.  That board has a voltage divider
  //  to read the voltage, which is read on A0.  So, wire A0 to A5 since it's closest to that pin sort of...
  //  that divider peaks at 3V3 when the battery is floating over 13V.  The 328P could accept higher voltages
  //  but the boron says 3V3 max.  Going to add a small resistor in series to knock down the voltage.  
  if (voltage < 20) {
   d483c:	2813      	cmp	r0, #19
  //turn everything off
  digitalWrite(FOURTWENTY_PWR, LOW); 
  digitalWrite(TEMP_PWR, LOW); 
  battCharge = int(fuel.getSoC());
  realtemp = (battCharge*3.7);
  voltage = int(realtemp);
   d483e:	8028      	strh	r0, [r5, #0]
  realtemp = 0;
   d4840:	e9c7 2300 	strd	r2, r3, [r7]
  //22Aug20_Serial.println(voltage);
  //a hack to read the 12V battery voltage off of the R152 power board.  That board has a voltage divider
  //  to read the voltage, which is read on A0.  So, wire A0 to A5 since it's closest to that pin sort of...
  //  that divider peaks at 3V3 when the battery is floating over 13V.  The 328P could accept higher voltages
  //  but the boron says 3V3 max.  Going to add a small resistor in series to knock down the voltage.  
  if (voltage < 20) {
   d4844:	d80a      	bhi.n	d485c <_Z16Read_the_Analogsv+0x6e4>
    realtemp = analogRead(VOLTAGE_READ);
   d4846:	4b36      	ldr	r3, [pc, #216]	; (d4920 <_Z16Read_the_Analogsv+0x7a8>)
   d4848:	8818      	ldrh	r0, [r3, #0]
   d484a:	f005 fb6a 	bl	d9f22 <analogRead>
   d484e:	4680      	mov	r8, r0
   d4850:	f006 f8e6 	bl	daa20 <__aeabi_i2d>
   d4854:	e9c7 0100 	strd	r0, r1, [r7]
    voltage = int(realtemp);
   d4858:	f8a5 8000 	strh.w	r8, [r5]
    //22Aug20_Serial.print("voltage splitter: ");
    //22Aug20_Serial.println(voltage);
  }
  //last attempt to catch problems before they overflow the dataPnts
  //velocity, air_temp, depth, voltage, rtc_temp, wtr_temp
  if (velocity > 1500) {
   d485c:	4a31      	ldr	r2, [pc, #196]	; (d4924 <_Z16Read_the_Analogsv+0x7ac>)
   d485e:	8811      	ldrh	r1, [r2, #0]
   d4860:	f240 53dc 	movw	r3, #1500	; 0x5dc
   d4864:	4299      	cmp	r1, r3
    velocity = 9999;
   d4866:	bf88      	it	hi
   d4868:	f242 730f 	movwhi	r3, #9999	; 0x270f
  } 
  if (depth > 3000) {
   d486c:	8821      	ldrh	r1, [r4, #0]
    //22Aug20_Serial.println(voltage);
  }
  //last attempt to catch problems before they overflow the dataPnts
  //velocity, air_temp, depth, voltage, rtc_temp, wtr_temp
  if (velocity > 1500) {
    velocity = 9999;
   d486e:	bf88      	it	hi
   d4870:	8013      	strhhi	r3, [r2, #0]
  } 
  if (depth > 3000) {
   d4872:	f640 33b8 	movw	r3, #3000	; 0xbb8
   d4876:	4299      	cmp	r1, r3
    depth = 9999;
   d4878:	bf88      	it	hi
   d487a:	4b2b      	ldrhi	r3, [pc, #172]	; (d4928 <_Z16Read_the_Analogsv+0x7b0>)
    air_temp = 9999;
  }
  if (voltage > 1500) {
    voltage = 9999;
  }
  if ((velocity > 1500)||(depth > 3000)||(wtr_temp > 150)||(air_temp > 150)||(voltage > 1500) ) {
   d487c:	8812      	ldrh	r2, [r2, #0]
  //velocity, air_temp, depth, voltage, rtc_temp, wtr_temp
  if (velocity > 1500) {
    velocity = 9999;
  } 
  if (depth > 3000) {
    depth = 9999;
   d487e:	bf84      	itt	hi
   d4880:	f242 710f 	movwhi	r1, #9999	; 0x270f
   d4884:	8019      	strhhi	r1, [r3, #0]
  } 
  if (wtr_temp > 150) {
   d4886:	4b29      	ldr	r3, [pc, #164]	; (d492c <_Z16Read_the_Analogsv+0x7b4>)
   d4888:	8819      	ldrh	r1, [r3, #0]
   d488a:	2996      	cmp	r1, #150	; 0x96
    wtr_temp = 9999;
   d488c:	bf84      	itt	hi
   d488e:	f242 710f 	movwhi	r1, #9999	; 0x270f
   d4892:	8019      	strhhi	r1, [r3, #0]
  }
  if (air_temp > 150) {
   d4894:	8831      	ldrh	r1, [r6, #0]
   d4896:	2996      	cmp	r1, #150	; 0x96
    air_temp = 9999;
   d4898:	bf82      	ittt	hi
   d489a:	4916      	ldrhi	r1, [pc, #88]	; (d48f4 <_Z16Read_the_Analogsv+0x77c>)
   d489c:	f242 700f 	movwhi	r0, #9999	; 0x270f
   d48a0:	8008      	strhhi	r0, [r1, #0]
  }
  if (voltage > 1500) {
   d48a2:	8828      	ldrh	r0, [r5, #0]
   d48a4:	f240 51dc 	movw	r1, #1500	; 0x5dc
   d48a8:	4288      	cmp	r0, r1
    voltage = 9999;
   d48aa:	bf82      	ittt	hi
   d48ac:	4919      	ldrhi	r1, [pc, #100]	; (d4914 <_Z16Read_the_Analogsv+0x79c>)
   d48ae:	f242 700f 	movwhi	r0, #9999	; 0x270f
   d48b2:	8008      	strhhi	r0, [r1, #0]
  }
  if ((velocity > 1500)||(depth > 3000)||(wtr_temp > 150)||(air_temp > 150)||(voltage > 1500) ) {
   d48b4:	f240 51dc 	movw	r1, #1500	; 0x5dc
   d48b8:	428a      	cmp	r2, r1
   d48ba:	d810      	bhi.n	d48de <_Z16Read_the_Analogsv+0x766>
   d48bc:	8820      	ldrh	r0, [r4, #0]
   d48be:	f640 32b8 	movw	r2, #3000	; 0xbb8
   d48c2:	4290      	cmp	r0, r2
   d48c4:	d80b      	bhi.n	d48de <_Z16Read_the_Analogsv+0x766>
   d48c6:	881b      	ldrh	r3, [r3, #0]
   d48c8:	2b96      	cmp	r3, #150	; 0x96
   d48ca:	d808      	bhi.n	d48de <_Z16Read_the_Analogsv+0x766>
   d48cc:	8833      	ldrh	r3, [r6, #0]
   d48ce:	2b96      	cmp	r3, #150	; 0x96
   d48d0:	d805      	bhi.n	d48de <_Z16Read_the_Analogsv+0x766>
   d48d2:	882b      	ldrh	r3, [r5, #0]
    return (9);
  }
  return(0);
   d48d4:	428b      	cmp	r3, r1
   d48d6:	bf8c      	ite	hi
   d48d8:	2109      	movhi	r1, #9
   d48da:	2100      	movls	r1, #0
   d48dc:	e000      	b.n	d48e0 <_Z16Read_the_Analogsv+0x768>
  }
  if (voltage > 1500) {
    voltage = 9999;
  }
  if ((velocity > 1500)||(depth > 3000)||(wtr_temp > 150)||(air_temp > 150)||(voltage > 1500) ) {
    return (9);
   d48de:	2109      	movs	r1, #9
  }
  return(0);
}
   d48e0:	4608      	mov	r0, r1
   d48e2:	b005      	add	sp, #20
   d48e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d48e8:	9999999a 	.word	0x9999999a
   d48ec:	400d9999 	.word	0x400d9999
   d48f0:	2003e2f0 	.word	0x2003e2f0
   d48f4:	2003e2d0 	.word	0x2003e2d0
   d48f8:	2003e300 	.word	0x2003e300
   d48fc:	2003db24 	.word	0x2003db24
   d4900:	40240000 	.word	0x40240000
   d4904:	40490000 	.word	0x40490000
   d4908:	40220000 	.word	0x40220000
   d490c:	40140000 	.word	0x40140000
   d4910:	40400000 	.word	0x40400000
   d4914:	2003e174 	.word	0x2003e174
   d4918:	2003e15c 	.word	0x2003e15c
   d491c:	2003dcd0 	.word	0x2003dcd0
   d4920:	2003dba0 	.word	0x2003dba0
   d4924:	2003e2fc 	.word	0x2003e2fc
   d4928:	2003e2d4 	.word	0x2003e2d4
   d492c:	2003e2c0 	.word	0x2003e2c0
   d4930:	2003dbc4 	.word	0x2003dbc4

000d4934 <_Z15Figure_the_Timev>:
    level = digitalRead(REED_PIN);
  }
  //  digitalWrite(13, LOW);
}

void Figure_the_Time() {
   d4934:	b510      	push	{r4, lr}
  //Time.zone(-5); //Eastern Std Time; EDT is -4: moved to setup to grab from EEPROM
  DateTimelong = Time.month() * 100000000;
   d4936:	f004 fd85 	bl	d9444 <_ZN9TimeClass5monthEv>
   d493a:	4b11      	ldr	r3, [pc, #68]	; (d4980 <_Z15Figure_the_Timev+0x4c>)
   d493c:	4c11      	ldr	r4, [pc, #68]	; (d4984 <_Z15Figure_the_Timev+0x50>)
   d493e:	4358      	muls	r0, r3
   d4940:	6020      	str	r0, [r4, #0]
  DateTimelong = DateTimelong + Time.day() * 1000000;
   d4942:	f004 fd75 	bl	d9430 <_ZN9TimeClass3dayEv>
   d4946:	6822      	ldr	r2, [r4, #0]
   d4948:	4b0f      	ldr	r3, [pc, #60]	; (d4988 <_Z15Figure_the_Timev+0x54>)
   d494a:	fb03 2000 	mla	r0, r3, r0, r2
   d494e:	6020      	str	r0, [r4, #0]
  unsigned long int shortyear = Time.year() - 2000;
   d4950:	f004 fd80 	bl	d9454 <_ZN9TimeClass4yearEv>
  DateTimelong = DateTimelong + shortyear * 10000;
   d4954:	6822      	ldr	r2, [r4, #0]
   d4956:	f5a0 63fa 	sub.w	r3, r0, #2000	; 0x7d0
   d495a:	f242 7010 	movw	r0, #10000	; 0x2710
   d495e:	fb00 2003 	mla	r0, r0, r3, r2
   d4962:	6020      	str	r0, [r4, #0]
  DateTimelong = DateTimelong + Time.hour() * 100;
   d4964:	f004 fd46 	bl	d93f4 <_ZN9TimeClass4hourEv>
   d4968:	6822      	ldr	r2, [r4, #0]
   d496a:	2364      	movs	r3, #100	; 0x64
   d496c:	fb03 2000 	mla	r0, r3, r0, r2
   d4970:	6020      	str	r0, [r4, #0]
  DateTimelong = DateTimelong + Time.minute() * 1;
   d4972:	f004 fd49 	bl	d9408 <_ZN9TimeClass6minuteEv>
   d4976:	6823      	ldr	r3, [r4, #0]
   d4978:	4418      	add	r0, r3
   d497a:	6020      	str	r0, [r4, #0]
   d497c:	bd10      	pop	{r4, pc}
   d497e:	bf00      	nop
   d4980:	05f5e100 	.word	0x05f5e100
   d4984:	2003e2f8 	.word	0x2003e2f8
   d4988:	000f4240 	.word	0x000f4240

000d498c <_Z17Store_the_DataPnti>:

}

void Store_the_DataPnt (int lclRepCnt) {
   d498c:	b500      	push	{lr}
   d498e:	b089      	sub	sp, #36	; 0x24
  // WAS ORIGINALLY SETTING THE dataPnt00ago here
  //char message[6][48] = {0}; 
  // Format the message: D1,A0,A1,A2,A3, Rain, Light, Temp, Depth, A3 (reserved)
  // sprintf(message, "%5lu:%010lu:%04d:%04u:%04u:%04u:%04u:%04u\n", STATION, DateTimelong[lclRepCnt], Tip_Count_Copy[lclRepCnt], light[lclRepCnt], temp[lclRepCnt], depth[lclRepCnt], voltage[lclRepCnt], temp_RTC[lclRepCnt]);
  if (lclRepCnt == 0) {
   d4990:	b9d8      	cbnz	r0, d49ca <_Z17Store_the_DataPnti+0x3e>
  sprintf(dataPnt10ago, "%5lu:%010lu:%04d:%04u:%04u:%04u:%04u:%04u:%04u\n", STATION, DateTimelong, Tip_Count_Copy, velocity, air_temp, depth, voltage, rtc_temp, wtr_temp);
   d4992:	4a2e      	ldr	r2, [pc, #184]	; (d4a4c <_Z17Store_the_DataPnti+0xc0>)
   d4994:	4b2e      	ldr	r3, [pc, #184]	; (d4a50 <_Z17Store_the_DataPnti+0xc4>)
   d4996:	8812      	ldrh	r2, [r2, #0]
   d4998:	681b      	ldr	r3, [r3, #0]
   d499a:	9206      	str	r2, [sp, #24]
   d499c:	4a2d      	ldr	r2, [pc, #180]	; (d4a54 <_Z17Store_the_DataPnti+0xc8>)
   d499e:	492e      	ldr	r1, [pc, #184]	; (d4a58 <_Z17Store_the_DataPnti+0xcc>)
   d49a0:	8812      	ldrh	r2, [r2, #0]
   d49a2:	9205      	str	r2, [sp, #20]
   d49a4:	4a2d      	ldr	r2, [pc, #180]	; (d4a5c <_Z17Store_the_DataPnti+0xd0>)
   d49a6:	482e      	ldr	r0, [pc, #184]	; (d4a60 <_Z17Store_the_DataPnti+0xd4>)
   d49a8:	8812      	ldrh	r2, [r2, #0]
   d49aa:	9204      	str	r2, [sp, #16]
   d49ac:	4a2d      	ldr	r2, [pc, #180]	; (d4a64 <_Z17Store_the_DataPnti+0xd8>)
   d49ae:	8812      	ldrh	r2, [r2, #0]
   d49b0:	9203      	str	r2, [sp, #12]
   d49b2:	4a2d      	ldr	r2, [pc, #180]	; (d4a68 <_Z17Store_the_DataPnti+0xdc>)
   d49b4:	8812      	ldrh	r2, [r2, #0]
   d49b6:	9202      	str	r2, [sp, #8]
   d49b8:	4a2c      	ldr	r2, [pc, #176]	; (d4a6c <_Z17Store_the_DataPnti+0xe0>)
   d49ba:	8812      	ldrh	r2, [r2, #0]
   d49bc:	9201      	str	r2, [sp, #4]
   d49be:	9300      	str	r3, [sp, #0]
   d49c0:	4a2b      	ldr	r2, [pc, #172]	; (d4a70 <_Z17Store_the_DataPnti+0xe4>)
   d49c2:	4b2c      	ldr	r3, [pc, #176]	; (d4a74 <_Z17Store_the_DataPnti+0xe8>)
   d49c4:	6812      	ldr	r2, [r2, #0]
   d49c6:	681b      	ldr	r3, [r3, #0]
   d49c8:	e03a      	b.n	d4a40 <_Z17Store_the_DataPnti+0xb4>
  //sprintf(message, "%5lu:%010lu:%04d:%04u:%04u:%04u:%04u:%04u\n", STATION, DateTimelong[lclRepCnt], Tip_Count_Copy[lclRepCnt], velocity[lclRepCnt], air_temp[lclRepCnt], depth[lclRepCnt], wtr_temp[lclRepCnt]);
  }  
  if (lclRepCnt == 1) {
   d49ca:	2801      	cmp	r0, #1
   d49cc:	d11b      	bne.n	d4a06 <_Z17Store_the_DataPnti+0x7a>
  sprintf(dataPnt05ago, "%5lu:%010lu:%04d:%04u:%04u:%04u:%04u:%04u:%04u\n", STATION, DateTimelong, Tip_Count_Copy, velocity, air_temp, depth, voltage, rtc_temp, wtr_temp);
   d49ce:	4a1f      	ldr	r2, [pc, #124]	; (d4a4c <_Z17Store_the_DataPnti+0xc0>)
   d49d0:	4b1f      	ldr	r3, [pc, #124]	; (d4a50 <_Z17Store_the_DataPnti+0xc4>)
   d49d2:	8812      	ldrh	r2, [r2, #0]
   d49d4:	681b      	ldr	r3, [r3, #0]
   d49d6:	9206      	str	r2, [sp, #24]
   d49d8:	4a1e      	ldr	r2, [pc, #120]	; (d4a54 <_Z17Store_the_DataPnti+0xc8>)
   d49da:	491f      	ldr	r1, [pc, #124]	; (d4a58 <_Z17Store_the_DataPnti+0xcc>)
   d49dc:	8812      	ldrh	r2, [r2, #0]
   d49de:	9205      	str	r2, [sp, #20]
   d49e0:	4a1e      	ldr	r2, [pc, #120]	; (d4a5c <_Z17Store_the_DataPnti+0xd0>)
   d49e2:	4825      	ldr	r0, [pc, #148]	; (d4a78 <_Z17Store_the_DataPnti+0xec>)
   d49e4:	8812      	ldrh	r2, [r2, #0]
   d49e6:	9204      	str	r2, [sp, #16]
   d49e8:	4a1e      	ldr	r2, [pc, #120]	; (d4a64 <_Z17Store_the_DataPnti+0xd8>)
   d49ea:	8812      	ldrh	r2, [r2, #0]
   d49ec:	9203      	str	r2, [sp, #12]
   d49ee:	4a1e      	ldr	r2, [pc, #120]	; (d4a68 <_Z17Store_the_DataPnti+0xdc>)
   d49f0:	8812      	ldrh	r2, [r2, #0]
   d49f2:	9202      	str	r2, [sp, #8]
   d49f4:	4a1d      	ldr	r2, [pc, #116]	; (d4a6c <_Z17Store_the_DataPnti+0xe0>)
   d49f6:	8812      	ldrh	r2, [r2, #0]
   d49f8:	9201      	str	r2, [sp, #4]
   d49fa:	9300      	str	r3, [sp, #0]
   d49fc:	4a1c      	ldr	r2, [pc, #112]	; (d4a70 <_Z17Store_the_DataPnti+0xe4>)
   d49fe:	4b1d      	ldr	r3, [pc, #116]	; (d4a74 <_Z17Store_the_DataPnti+0xe8>)
   d4a00:	6812      	ldr	r2, [r2, #0]
   d4a02:	681b      	ldr	r3, [r3, #0]
   d4a04:	e01c      	b.n	d4a40 <_Z17Store_the_DataPnti+0xb4>
  //sprintf(message, "%5lu:%010lu:%04d:%04u:%04u:%04u:%04u:%04u\n", STATION, DateTimelong[lclRepCnt], Tip_Count_Copy[lclRepCnt], velocity[lclRepCnt], air_temp[lclRepCnt], depth[lclRepCnt], wtr_temp[lclRepCnt]);
  }  
  if (lclRepCnt == 2) {
   d4a06:	2802      	cmp	r0, #2
   d4a08:	d11c      	bne.n	d4a44 <_Z17Store_the_DataPnti+0xb8>
  sprintf(dataPnt00ago, "%5lu:%010lu:%04d:%04u:%04u:%04u:%04u:%04u:%04u\n", STATION, DateTimelong, Tip_Count_Copy, velocity, air_temp, depth, voltage, rtc_temp, wtr_temp);
   d4a0a:	4a10      	ldr	r2, [pc, #64]	; (d4a4c <_Z17Store_the_DataPnti+0xc0>)
   d4a0c:	4b10      	ldr	r3, [pc, #64]	; (d4a50 <_Z17Store_the_DataPnti+0xc4>)
   d4a0e:	8812      	ldrh	r2, [r2, #0]
   d4a10:	681b      	ldr	r3, [r3, #0]
   d4a12:	9206      	str	r2, [sp, #24]
   d4a14:	4a0f      	ldr	r2, [pc, #60]	; (d4a54 <_Z17Store_the_DataPnti+0xc8>)
   d4a16:	4910      	ldr	r1, [pc, #64]	; (d4a58 <_Z17Store_the_DataPnti+0xcc>)
   d4a18:	8812      	ldrh	r2, [r2, #0]
   d4a1a:	9205      	str	r2, [sp, #20]
   d4a1c:	4a0f      	ldr	r2, [pc, #60]	; (d4a5c <_Z17Store_the_DataPnti+0xd0>)
   d4a1e:	4817      	ldr	r0, [pc, #92]	; (d4a7c <_Z17Store_the_DataPnti+0xf0>)
   d4a20:	8812      	ldrh	r2, [r2, #0]
   d4a22:	9204      	str	r2, [sp, #16]
   d4a24:	4a0f      	ldr	r2, [pc, #60]	; (d4a64 <_Z17Store_the_DataPnti+0xd8>)
   d4a26:	8812      	ldrh	r2, [r2, #0]
   d4a28:	9203      	str	r2, [sp, #12]
   d4a2a:	4a0f      	ldr	r2, [pc, #60]	; (d4a68 <_Z17Store_the_DataPnti+0xdc>)
   d4a2c:	8812      	ldrh	r2, [r2, #0]
   d4a2e:	9202      	str	r2, [sp, #8]
   d4a30:	4a0e      	ldr	r2, [pc, #56]	; (d4a6c <_Z17Store_the_DataPnti+0xe0>)
   d4a32:	8812      	ldrh	r2, [r2, #0]
   d4a34:	9201      	str	r2, [sp, #4]
   d4a36:	9300      	str	r3, [sp, #0]
   d4a38:	4a0d      	ldr	r2, [pc, #52]	; (d4a70 <_Z17Store_the_DataPnti+0xe4>)
   d4a3a:	4b0e      	ldr	r3, [pc, #56]	; (d4a74 <_Z17Store_the_DataPnti+0xe8>)
   d4a3c:	6812      	ldr	r2, [r2, #0]
   d4a3e:	681b      	ldr	r3, [r3, #0]
   d4a40:	f003 f9e0 	bl	d7e04 <sprintf>
    else { 
      strcpy(message[j],message[j-1]); //backup the remaining data
    }
  }
  */
}
   d4a44:	b009      	add	sp, #36	; 0x24
   d4a46:	f85d fb04 	ldr.w	pc, [sp], #4
   d4a4a:	bf00      	nop
   d4a4c:	2003e2c0 	.word	0x2003e2c0
   d4a50:	2003e2c4 	.word	0x2003e2c4
   d4a54:	2003e2d2 	.word	0x2003e2d2
   d4a58:	000dc821 	.word	0x000dc821
   d4a5c:	2003e174 	.word	0x2003e174
   d4a60:	2003dbc8 	.word	0x2003dbc8
   d4a64:	2003e2d4 	.word	0x2003e2d4
   d4a68:	2003e2d0 	.word	0x2003e2d0
   d4a6c:	2003e2fc 	.word	0x2003e2fc
   d4a70:	2003db1c 	.word	0x2003db1c
   d4a74:	2003e2f8 	.word	0x2003e2f8
   d4a78:	2003db68 	.word	0x2003db68
   d4a7c:	2003db2c 	.word	0x2003db2c

000d4a80 <_Z19Clear_the_Variablesi>:

void Clear_the_Variables(int lclRepCnt) {
  if (lclRepCnt == 0) {
   d4a80:	b920      	cbnz	r0, d4a8c <_Z19Clear_the_Variablesi+0xc>
    RepCnt = 0;
   d4a82:	4b11      	ldr	r3, [pc, #68]	; (d4ac8 <_Z19Clear_the_Variablesi+0x48>)
   d4a84:	7018      	strb	r0, [r3, #0]
    Raining = 0;
   d4a86:	4b11      	ldr	r3, [pc, #68]	; (d4acc <_Z19Clear_the_Variablesi+0x4c>)
   d4a88:	6018      	str	r0, [r3, #0]
   d4a8a:	e004      	b.n	d4a96 <_Z19Clear_the_Variablesi+0x16>
  }
  if (lclRepCnt == 1) { //only clear RepCnt, not Raining
   d4a8c:	2801      	cmp	r0, #1
    RepCnt = 0;
   d4a8e:	bf02      	ittt	eq
   d4a90:	4b0d      	ldreq	r3, [pc, #52]	; (d4ac8 <_Z19Clear_the_Variablesi+0x48>)
   d4a92:	2200      	moveq	r2, #0
   d4a94:	701a      	strbeq	r2, [r3, #0]
  }
  tip_count = 0;
   d4a96:	4a0e      	ldr	r2, [pc, #56]	; (d4ad0 <_Z19Clear_the_Variablesi+0x50>)
   d4a98:	2300      	movs	r3, #0
   d4a9a:	6013      	str	r3, [r2, #0]
  Tip_Count_Copy = 0;
   d4a9c:	4a0d      	ldr	r2, [pc, #52]	; (d4ad4 <_Z19Clear_the_Variablesi+0x54>)
   d4a9e:	6013      	str	r3, [r2, #0]
  depth = 0;
   d4aa0:	4a0d      	ldr	r2, [pc, #52]	; (d4ad8 <_Z19Clear_the_Variablesi+0x58>)
   d4aa2:	8013      	strh	r3, [r2, #0]
  velocity = 0; 
   d4aa4:	4a0d      	ldr	r2, [pc, #52]	; (d4adc <_Z19Clear_the_Variablesi+0x5c>)
   d4aa6:	8013      	strh	r3, [r2, #0]
  wtr_temp = 0;
   d4aa8:	4a0d      	ldr	r2, [pc, #52]	; (d4ae0 <_Z19Clear_the_Variablesi+0x60>)
   d4aaa:	8013      	strh	r3, [r2, #0]
  air_temp = 0;
   d4aac:	4a0d      	ldr	r2, [pc, #52]	; (d4ae4 <_Z19Clear_the_Variablesi+0x64>)
   d4aae:	8013      	strh	r3, [r2, #0]
  rtc_temp = 0;
   d4ab0:	4a0d      	ldr	r2, [pc, #52]	; (d4ae8 <_Z19Clear_the_Variablesi+0x68>)
   d4ab2:	8013      	strh	r3, [r2, #0]
  voltage = 0;
   d4ab4:	4a0d      	ldr	r2, [pc, #52]	; (d4aec <_Z19Clear_the_Variablesi+0x6c>)
   d4ab6:	8013      	strh	r3, [r2, #0]
  realtemp = 0;
   d4ab8:	4a0d      	ldr	r2, [pc, #52]	; (d4af0 <_Z19Clear_the_Variablesi+0x70>)
   d4aba:	2000      	movs	r0, #0
   d4abc:	2100      	movs	r1, #0
   d4abe:	e9c2 0100 	strd	r0, r1, [r2]
  calc_var = 0;
   d4ac2:	4a0c      	ldr	r2, [pc, #48]	; (d4af4 <_Z19Clear_the_Variablesi+0x74>)
   d4ac4:	8013      	strh	r3, [r2, #0]
   d4ac6:	4770      	bx	lr
   d4ac8:	2003e2fe 	.word	0x2003e2fe
   d4acc:	2003e170 	.word	0x2003e170
   d4ad0:	2003e168 	.word	0x2003e168
   d4ad4:	2003e2c4 	.word	0x2003e2c4
   d4ad8:	2003e2d4 	.word	0x2003e2d4
   d4adc:	2003e2fc 	.word	0x2003e2fc
   d4ae0:	2003e2c0 	.word	0x2003e2c0
   d4ae4:	2003e2d0 	.word	0x2003e2d0
   d4ae8:	2003e2d2 	.word	0x2003e2d2
   d4aec:	2003e174 	.word	0x2003e174
   d4af0:	2003e300 	.word	0x2003e300
   d4af4:	2003e2f0 	.word	0x2003e2f0

000d4af8 <_Z22Configuration_Settings6String>:
  else {
    //error
  }
}

int Configuration_Settings(String command) {
   d4af8:	b530      	push	{r4, r5, lr}
   d4afa:	b085      	sub	sp, #20
   d4afc:	4605      	mov	r5, r0
    memset(tmpstr,0,sizeof(tmpstr));
	  strncpy(tmpstr,message+6,10);
	  DateTimelong[RepCnt2] = atol(tmpstr);
    */
  //char tmpstr[11] = {0};
  if (command.startsWith("STA")) {
   d4afe:	497e      	ldr	r1, [pc, #504]	; (d4cf8 <_Z22Configuration_Settings6String+0x200>)
   d4b00:	4668      	mov	r0, sp
   d4b02:	f004 f8c4 	bl	d8c8e <_ZN6StringC1EPK19__FlashStringHelper>
   d4b06:	4669      	mov	r1, sp
   d4b08:	4628      	mov	r0, r5
   d4b0a:	f004 f94b 	bl	d8da4 <_ZNK6String10startsWithERKS_>
   d4b0e:	4604      	mov	r4, r0
   d4b10:	4668      	mov	r0, sp
   d4b12:	f004 f875 	bl	d8c00 <_ZN6StringD1Ev>
   d4b16:	b1e4      	cbz	r4, d4b52 <_Z22Configuration_Settings6String+0x5a>
	  command = command.substring(4,9);
   d4b18:	2309      	movs	r3, #9
   d4b1a:	2204      	movs	r2, #4
   d4b1c:	4629      	mov	r1, r5
   d4b1e:	4668      	mov	r0, sp
   d4b20:	f004 f94a 	bl	d8db8 <_ZNK6String9substringEjj>
   d4b24:	4669      	mov	r1, sp
   d4b26:	4628      	mov	r0, r5
   d4b28:	f004 f8fb 	bl	d8d22 <_ZN6StringaSEOS_>
   d4b2c:	4668      	mov	r0, sp
   d4b2e:	f004 f867 	bl	d8c00 <_ZN6StringD1Ev>
    if ((atol(command) > 0) || (atol(command)<10000)) {
   d4b32:	6828      	ldr	r0, [r5, #0]
   d4b34:	4c71      	ldr	r4, [pc, #452]	; (d4cfc <_Z22Configuration_Settings6String+0x204>)
   d4b36:	f006 fb41 	bl	db1bc <atol>
   d4b3a:	2800      	cmp	r0, #0
   d4b3c:	f300 80c2 	bgt.w	d4cc4 <_Z22Configuration_Settings6String+0x1cc>
   d4b40:	6828      	ldr	r0, [r5, #0]
   d4b42:	f006 fb3b 	bl	db1bc <atol>
   d4b46:	f242 730f 	movw	r3, #9999	; 0x270f
   d4b4a:	4298      	cmp	r0, r3
   d4b4c:	f340 80ba 	ble.w	d4cc4 <_Z22Configuration_Settings6String+0x1cc>
   d4b50:	e0c3      	b.n	d4cda <_Z22Configuration_Settings6String+0x1e2>
    else {
      STATION=9900;
      return -1;
    }
  }
  if (command.startsWith("VKA")) {
   d4b52:	496b      	ldr	r1, [pc, #428]	; (d4d00 <_Z22Configuration_Settings6String+0x208>)
   d4b54:	4668      	mov	r0, sp
   d4b56:	f004 f89a 	bl	d8c8e <_ZN6StringC1EPK19__FlashStringHelper>
   d4b5a:	4669      	mov	r1, sp
   d4b5c:	4628      	mov	r0, r5
   d4b5e:	f004 f921 	bl	d8da4 <_ZNK6String10startsWithERKS_>
   d4b62:	4604      	mov	r4, r0
   d4b64:	4668      	mov	r0, sp
   d4b66:	f004 f84b 	bl	d8c00 <_ZN6StringD1Ev>
   d4b6a:	2c00      	cmp	r4, #0
   d4b6c:	d033      	beq.n	d4bd6 <_Z22Configuration_Settings6String+0xde>
	  command = command.substring(4,6);
   d4b6e:	2306      	movs	r3, #6
   d4b70:	2204      	movs	r2, #4
   d4b72:	4629      	mov	r1, r5
   d4b74:	4668      	mov	r0, sp
   d4b76:	f004 f91f 	bl	d8db8 <_ZNK6String9substringEjj>
   d4b7a:	4669      	mov	r1, sp
   d4b7c:	4628      	mov	r0, r5
   d4b7e:	f004 f8d0 	bl	d8d22 <_ZN6StringaSEOS_>
   d4b82:	4668      	mov	r0, sp
   d4b84:	f004 f83c 	bl	d8c00 <_ZN6StringD1Ev>
    if (atol(command) == 0) {
   d4b88:	6828      	ldr	r0, [r5, #0]
   d4b8a:	f006 fb17 	bl	db1bc <atol>
   d4b8e:	4604      	mov	r4, r0
      Keep_Alive = atol(command);
   d4b90:	6828      	ldr	r0, [r5, #0]
      return -1;
    }
  }
  if (command.startsWith("VKA")) {
	  command = command.substring(4,6);
    if (atol(command) == 0) {
   d4b92:	b92c      	cbnz	r4, d4ba0 <_Z22Configuration_Settings6String+0xa8>
      Keep_Alive = atol(command);
   d4b94:	f006 fb12 	bl	db1bc <atol>
   d4b98:	4b5a      	ldr	r3, [pc, #360]	; (d4d04 <_Z22Configuration_Settings6String+0x20c>)
   d4b9a:	6018      	str	r0, [r3, #0]
      Sleep_Interval = long_Nap;//3600;
   d4b9c:	4b5a      	ldr	r3, [pc, #360]	; (d4d08 <_Z22Configuration_Settings6String+0x210>)
   d4b9e:	e00b      	b.n	d4bb8 <_Z22Configuration_Settings6String+0xc0>
      Settings_Obj.eeKeep_Alive = Keep_Alive;
      EEPROM.put(addr,Settings_Obj);
      return (0);
    }
    else if (atol(command) == 1) {
   d4ba0:	f006 fb0c 	bl	db1bc <atol>
   d4ba4:	2801      	cmp	r0, #1
   d4ba6:	4604      	mov	r4, r0
   d4ba8:	f040 80a1 	bne.w	d4cee <_Z22Configuration_Settings6String+0x1f6>
      Keep_Alive = atol(command);
   d4bac:	6828      	ldr	r0, [r5, #0]
   d4bae:	f006 fb05 	bl	db1bc <atol>
   d4bb2:	4b54      	ldr	r3, [pc, #336]	; (d4d04 <_Z22Configuration_Settings6String+0x20c>)
   d4bb4:	6018      	str	r0, [r3, #0]
      Sleep_Interval = short_Nap;//295;
   d4bb6:	4b55      	ldr	r3, [pc, #340]	; (d4d0c <_Z22Configuration_Settings6String+0x214>)
      Settings_Obj.eeKeep_Alive = Keep_Alive;
   d4bb8:	4d55      	ldr	r5, [pc, #340]	; (d4d10 <_Z22Configuration_Settings6String+0x218>)
      EEPROM.put(addr,Settings_Obj);
      return (0);
    }
    else if (atol(command) == 1) {
      Keep_Alive = atol(command);
      Sleep_Interval = short_Nap;//295;
   d4bba:	681a      	ldr	r2, [r3, #0]
   d4bbc:	4b55      	ldr	r3, [pc, #340]	; (d4d14 <_Z22Configuration_Settings6String+0x21c>)
      Settings_Obj.eeKeep_Alive = Keep_Alive;
   d4bbe:	60a8      	str	r0, [r5, #8]
      EEPROM.put(addr,Settings_Obj);
      return (0);
    }
    else if (atol(command) == 1) {
      Keep_Alive = atol(command);
      Sleep_Interval = short_Nap;//295;
   d4bc0:	601a      	str	r2, [r3, #0]
      Settings_Obj.eeKeep_Alive = Keep_Alive;
      EEPROM.put(addr,Settings_Obj);
   d4bc2:	f005 f917 	bl	d9df4 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d4bc6:	2214      	movs	r2, #20
   d4bc8:	4629      	mov	r1, r5
   d4bca:	4b53      	ldr	r3, [pc, #332]	; (d4d18 <_Z22Configuration_Settings6String+0x220>)
   d4bcc:	7818      	ldrb	r0, [r3, #0]
   d4bce:	f002 ff63 	bl	d7a98 <HAL_EEPROM_Put>
      ////EEPROM.put(addr,value);
      return (1);
   d4bd2:	4620      	mov	r0, r4
   d4bd4:	e08d      	b.n	d4cf2 <_Z22Configuration_Settings6String+0x1fa>
    }
    else {
      return -1;
    }
  }
  else if (command.startsWith("TZS")) {
   d4bd6:	4951      	ldr	r1, [pc, #324]	; (d4d1c <_Z22Configuration_Settings6String+0x224>)
   d4bd8:	4668      	mov	r0, sp
   d4bda:	f004 f858 	bl	d8c8e <_ZN6StringC1EPK19__FlashStringHelper>
   d4bde:	4669      	mov	r1, sp
   d4be0:	4628      	mov	r0, r5
   d4be2:	f004 f8df 	bl	d8da4 <_ZNK6String10startsWithERKS_>
   d4be6:	4604      	mov	r4, r0
   d4be8:	4668      	mov	r0, sp
   d4bea:	f004 f809 	bl	d8c00 <_ZN6StringD1Ev>
   d4bee:	b374      	cbz	r4, d4c4e <_Z22Configuration_Settings6String+0x156>
    command = command.substring(4,6);
   d4bf0:	2306      	movs	r3, #6
   d4bf2:	2204      	movs	r2, #4
   d4bf4:	4629      	mov	r1, r5
   d4bf6:	4668      	mov	r0, sp
   d4bf8:	f004 f8de 	bl	d8db8 <_ZNK6String9substringEjj>
   d4bfc:	4669      	mov	r1, sp
   d4bfe:	4628      	mov	r0, r5
   d4c00:	f004 f88f 	bl	d8d22 <_ZN6StringaSEOS_>
   d4c04:	4668      	mov	r0, sp
   d4c06:	f003 fffb 	bl	d8c00 <_ZN6StringD1Ev>
	  if ((atol(command) == 4)) {
   d4c0a:	6828      	ldr	r0, [r5, #0]
   d4c0c:	f006 fad6 	bl	db1bc <atol>
   d4c10:	2804      	cmp	r0, #4
   d4c12:	4604      	mov	r4, r0
   d4c14:	d109      	bne.n	d4c2a <_Z22Configuration_Settings6String+0x132>
      Time.zone(-4); //EDT is -4, EST is -5
      Settings_Obj.eeTimeZone = 4;
   d4c16:	4d3e      	ldr	r5, [pc, #248]	; (d4d10 <_Z22Configuration_Settings6String+0x218>)
    }
  }
  else if (command.startsWith("TZS")) {
    command = command.substring(4,6);
	  if ((atol(command) == 4)) {
      Time.zone(-4); //EDT is -4, EST is -5
   d4c18:	eeb9 0a00 	vmov.f32	s0, #144	; 0xc0800000 -4.0
   d4c1c:	f004 faea 	bl	d91f4 <_ZN9TimeClass4zoneEf>
      Settings_Obj.eeTimeZone = 4;
   d4c20:	612c      	str	r4, [r5, #16]
      EEPROM.put(addr,Settings_Obj.eeTimeZone);
   d4c22:	f005 f8e7 	bl	d9df4 <_Z21__fetch_global_EEPROMv>
   d4c26:	4622      	mov	r2, r4
   d4c28:	e00e      	b.n	d4c48 <_Z22Configuration_Settings6String+0x150>
      return (4);
    }
    if ((atol(command) == 5)) {
   d4c2a:	6828      	ldr	r0, [r5, #0]
   d4c2c:	f006 fac6 	bl	db1bc <atol>
   d4c30:	2805      	cmp	r0, #5
   d4c32:	4604      	mov	r4, r0
   d4c34:	d15b      	bne.n	d4cee <_Z22Configuration_Settings6String+0x1f6>
      Time.zone(-5); //EDT is -4, EST is -5
      Settings_Obj.eeTimeZone = 5;
   d4c36:	4d36      	ldr	r5, [pc, #216]	; (d4d10 <_Z22Configuration_Settings6String+0x218>)
      Settings_Obj.eeTimeZone = 4;
      EEPROM.put(addr,Settings_Obj.eeTimeZone);
      return (4);
    }
    if ((atol(command) == 5)) {
      Time.zone(-5); //EDT is -4, EST is -5
   d4c38:	eeb9 0a04 	vmov.f32	s0, #148	; 0xc0a00000 -5.0
   d4c3c:	f004 fada 	bl	d91f4 <_ZN9TimeClass4zoneEf>
      Settings_Obj.eeTimeZone = 5;
   d4c40:	612c      	str	r4, [r5, #16]
      EEPROM.put(addr,Settings_Obj.eeTimeZone);
   d4c42:	f005 f8d7 	bl	d9df4 <_Z21__fetch_global_EEPROMv>
   d4c46:	2204      	movs	r2, #4
   d4c48:	f105 0110 	add.w	r1, r5, #16
   d4c4c:	e7bd      	b.n	d4bca <_Z22Configuration_Settings6String+0xd2>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4c4e:	4934      	ldr	r1, [pc, #208]	; (d4d20 <_Z22Configuration_Settings6String+0x228>)
   d4c50:	4628      	mov	r0, r5
   d4c52:	f004 f87f 	bl	d8d54 <_ZNK6String6equalsEPKc>
    }
    else {
      return -1;
    }
  }
  else if (command == "CTV") {
   d4c56:	b118      	cbz	r0, d4c60 <_Z22Configuration_Settings6String+0x168>
    Clear_the_Variables(0);
   d4c58:	4620      	mov	r0, r4
   d4c5a:	f7ff ff11 	bl	d4a80 <_Z19Clear_the_Variablesi>
   d4c5e:	e7b8      	b.n	d4bd2 <_Z22Configuration_Settings6String+0xda>
  }
  else if (command.startsWith("PGR")) {
   d4c60:	4930      	ldr	r1, [pc, #192]	; (d4d24 <_Z22Configuration_Settings6String+0x22c>)
   d4c62:	4668      	mov	r0, sp
   d4c64:	f004 f813 	bl	d8c8e <_ZN6StringC1EPK19__FlashStringHelper>
   d4c68:	4669      	mov	r1, sp
   d4c6a:	4628      	mov	r0, r5
   d4c6c:	f004 f89a 	bl	d8da4 <_ZNK6String10startsWithERKS_>
   d4c70:	4604      	mov	r4, r0
   d4c72:	4668      	mov	r0, sp
   d4c74:	f003 ffc4 	bl	d8c00 <_ZN6StringD1Ev>
   d4c78:	2c00      	cmp	r4, #0
   d4c7a:	d038      	beq.n	d4cee <_Z22Configuration_Settings6String+0x1f6>
	  command = command.substring(4,7);
   d4c7c:	2307      	movs	r3, #7
   d4c7e:	2204      	movs	r2, #4
   d4c80:	4629      	mov	r1, r5
   d4c82:	4668      	mov	r0, sp
   d4c84:	f004 f898 	bl	d8db8 <_ZNK6String9substringEjj>
   d4c88:	4669      	mov	r1, sp
   d4c8a:	4628      	mov	r0, r5
   d4c8c:	f004 f849 	bl	d8d22 <_ZN6StringaSEOS_>
   d4c90:	4668      	mov	r0, sp
   d4c92:	f003 ffb5 	bl	d8c00 <_ZN6StringD1Ev>
    //22Aug20_Serial.print("Command: ");
    //22Aug20_Serial.println(command);
    //strncpy(tmpstr,command+4,2);
	  if ((atol(command) >= 0) && (atol(command)<100)) { //changed to and equal 0 and LT 100 rather than OR LT 100
   d4c96:	6828      	ldr	r0, [r5, #0]
   d4c98:	f006 fa90 	bl	db1bc <atol>
   d4c9c:	2800      	cmp	r0, #0
   d4c9e:	db26      	blt.n	d4cee <_Z22Configuration_Settings6String+0x1f6>
   d4ca0:	6828      	ldr	r0, [r5, #0]
   d4ca2:	f006 fa8b 	bl	db1bc <atol>
   d4ca6:	2863      	cmp	r0, #99	; 0x63
   d4ca8:	dc21      	bgt.n	d4cee <_Z22Configuration_Settings6String+0x1f6>
      PROGRAM = atol(command);
   d4caa:	6828      	ldr	r0, [r5, #0]
      Settings_Obj.eePROGRAM = PROGRAM;
   d4cac:	4d18      	ldr	r5, [pc, #96]	; (d4d10 <_Z22Configuration_Settings6String+0x218>)
	  command = command.substring(4,7);
    //22Aug20_Serial.print("Command: ");
    //22Aug20_Serial.println(command);
    //strncpy(tmpstr,command+4,2);
	  if ((atol(command) >= 0) && (atol(command)<100)) { //changed to and equal 0 and LT 100 rather than OR LT 100
      PROGRAM = atol(command);
   d4cae:	4c1e      	ldr	r4, [pc, #120]	; (d4d28 <_Z22Configuration_Settings6String+0x230>)
   d4cb0:	f006 fa84 	bl	db1bc <atol>
      Settings_Obj.eePROGRAM = PROGRAM;
   d4cb4:	60e8      	str	r0, [r5, #12]
	  command = command.substring(4,7);
    //22Aug20_Serial.print("Command: ");
    //22Aug20_Serial.println(command);
    //strncpy(tmpstr,command+4,2);
	  if ((atol(command) >= 0) && (atol(command)<100)) { //changed to and equal 0 and LT 100 rather than OR LT 100
      PROGRAM = atol(command);
   d4cb6:	6020      	str	r0, [r4, #0]
      Settings_Obj.eePROGRAM = PROGRAM;
      EEPROM.put(addr,Settings_Obj.eePROGRAM);
   d4cb8:	f005 f89c 	bl	d9df4 <_Z21__fetch_global_EEPROMv>
   d4cbc:	2204      	movs	r2, #4
   d4cbe:	f105 010c 	add.w	r1, r5, #12
   d4cc2:	e00e      	b.n	d4ce2 <_Z22Configuration_Settings6String+0x1ea>
    */
  //char tmpstr[11] = {0};
  if (command.startsWith("STA")) {
	  command = command.substring(4,9);
    if ((atol(command) > 0) || (atol(command)<10000)) {
      STATION = atol(command);
   d4cc4:	6828      	ldr	r0, [r5, #0]
      Settings_Obj.eeStation = STATION;
   d4cc6:	4d12      	ldr	r5, [pc, #72]	; (d4d10 <_Z22Configuration_Settings6String+0x218>)
    */
  //char tmpstr[11] = {0};
  if (command.startsWith("STA")) {
	  command = command.substring(4,9);
    if ((atol(command) > 0) || (atol(command)<10000)) {
      STATION = atol(command);
   d4cc8:	f006 fa78 	bl	db1bc <atol>
      Settings_Obj.eeStation = STATION;
   d4ccc:	6068      	str	r0, [r5, #4]
    */
  //char tmpstr[11] = {0};
  if (command.startsWith("STA")) {
	  command = command.substring(4,9);
    if ((atol(command) > 0) || (atol(command)<10000)) {
      STATION = atol(command);
   d4cce:	6020      	str	r0, [r4, #0]
      Settings_Obj.eeStation = STATION;
      EEPROM.put(addr,Settings_Obj);
   d4cd0:	f005 f890 	bl	d9df4 <_Z21__fetch_global_EEPROMv>
   d4cd4:	2214      	movs	r2, #20
   d4cd6:	4629      	mov	r1, r5
   d4cd8:	e003      	b.n	d4ce2 <_Z22Configuration_Settings6String+0x1ea>
      return (STATION);
    }
    else {
      STATION=9900;
   d4cda:	f242 63ac 	movw	r3, #9900	; 0x26ac
   d4cde:	6023      	str	r3, [r4, #0]
   d4ce0:	e005      	b.n	d4cee <_Z22Configuration_Settings6String+0x1f6>
   d4ce2:	4b0d      	ldr	r3, [pc, #52]	; (d4d18 <_Z22Configuration_Settings6String+0x220>)
   d4ce4:	7818      	ldrb	r0, [r3, #0]
   d4ce6:	f002 fed7 	bl	d7a98 <HAL_EEPROM_Put>
    //strncpy(tmpstr,command+4,2);
	  if ((atol(command) >= 0) && (atol(command)<100)) { //changed to and equal 0 and LT 100 rather than OR LT 100
      PROGRAM = atol(command);
      Settings_Obj.eePROGRAM = PROGRAM;
      EEPROM.put(addr,Settings_Obj.eePROGRAM);
      return (PROGRAM);
   d4cea:	6820      	ldr	r0, [r4, #0]
   d4cec:	e001      	b.n	d4cf2 <_Z22Configuration_Settings6String+0x1fa>
      //22Aug20_Serial.print("PROGRAM: ");
      //22Aug20_Serial.println(PROGRAM);
    }
    else {
      return -1;
   d4cee:	f04f 30ff 	mov.w	r0, #4294967295
  else {
    return -1;
  }
  //memset(tmpstr,0,sizeof(tmpstr));
  return 0;
}
   d4cf2:	b005      	add	sp, #20
   d4cf4:	bd30      	pop	{r4, r5, pc}
   d4cf6:	bf00      	nop
   d4cf8:	000dc851 	.word	0x000dc851
   d4cfc:	2003db1c 	.word	0x2003db1c
   d4d00:	000dc855 	.word	0x000dc855
   d4d04:	2003e2d8 	.word	0x2003e2d8
   d4d08:	2003dbc0 	.word	0x2003dbc0
   d4d0c:	2003db64 	.word	0x2003db64
   d4d10:	2003e2dc 	.word	0x2003e2dc
   d4d14:	2003dc00 	.word	0x2003dc00
   d4d18:	2003dccd 	.word	0x2003dccd
   d4d1c:	000dc859 	.word	0x000dc859
   d4d20:	000dc85d 	.word	0x000dc85d
   d4d24:	000dc861 	.word	0x000dc861
   d4d28:	2003e308 	.word	0x2003e308

000d4d2c <_Z14Save_to_SDCardi>:
  voltage = 0;
  realtemp = 0;
  calc_var = 0;
}

void Save_to_SDCard(int lclRepCnt) {
   d4d2c:	b508      	push	{r3, lr}
  if (lclRepCnt == 0) {
   d4d2e:	b948      	cbnz	r0, d4d44 <_Z14Save_to_SDCardi+0x18>
    printToCard.print(dataPnt00ago);
   d4d30:	4908      	ldr	r1, [pc, #32]	; (d4d54 <_Z14Save_to_SDCardi+0x28>)
   d4d32:	4809      	ldr	r0, [pc, #36]	; (d4d58 <_Z14Save_to_SDCardi+0x2c>)
   d4d34:	f004 fbc0 	bl	d94b8 <_ZN5Print5printEPKc>
    delay(500);
   d4d38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
		Serial.write(data);
	}
	// close the file:
	myFile.close();
  */
}
   d4d3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

void Save_to_SDCard(int lclRepCnt) {
  if (lclRepCnt == 0) {
    printToCard.print(dataPnt00ago);
    delay(500);
   d4d40:	f004 b86e 	b.w	d8e20 <delay>
  }
  else if (lclRepCnt == 2) {
   d4d44:	2802      	cmp	r0, #2
   d4d46:	d103      	bne.n	d4d50 <_Z14Save_to_SDCardi+0x24>
		Serial.write(data);
	}
	// close the file:
	myFile.close();
  */
}
   d4d48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4d4c:	f7ff b9f0 	b.w	d4130 <_Z14Save_to_SDCardi.part.6>
   d4d50:	bd08      	pop	{r3, pc}
   d4d52:	bf00      	nop
   d4d54:	2003db2c 	.word	0x2003db2c
   d4d58:	2003e180 	.word	0x2003e180

000d4d5c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4d5c:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4d5e:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4d60:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d4d62:	b17c      	cbz	r4, d4d84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4d64:	6863      	ldr	r3, [r4, #4]
   d4d66:	3b01      	subs	r3, #1
   d4d68:	6063      	str	r3, [r4, #4]
   d4d6a:	b95b      	cbnz	r3, d4d84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d4d6c:	6823      	ldr	r3, [r4, #0]
   d4d6e:	4620      	mov	r0, r4
   d4d70:	689b      	ldr	r3, [r3, #8]
   d4d72:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4d74:	68a3      	ldr	r3, [r4, #8]
   d4d76:	3b01      	subs	r3, #1
   d4d78:	60a3      	str	r3, [r4, #8]
   d4d7a:	b91b      	cbnz	r3, d4d84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4d7c:	6823      	ldr	r3, [r4, #0]
   d4d7e:	4620      	mov	r0, r4
   d4d80:	68db      	ldr	r3, [r3, #12]
   d4d82:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4d84:	4628      	mov	r0, r5
   d4d86:	bd38      	pop	{r3, r4, r5, pc}

000d4d88 <loop>:
  battCharge = int(fuel.getSoC()); //grab it early for the publish
  delay(120000); //leave 120 seconds to set up configurations after reset. one minute is not enough in the rain...-fwb-21May20
}

void loop()
{
   d4d88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
//something going on this morning
  //22Aug20_Serial.print("Sleep Interval: ");
  //22Aug20_Serial.println(Sleep_Interval);
  //sleeps the first time for one minute, then goes on to bed for a nap
  Time_Sleep = Time.local();
  if (Raining == 1 || Keep_Alive == 1) {
   d4d8c:	4e88      	ldr	r6, [pc, #544]	; (d4fb0 <loop+0x228>)
  //if (i>1000) {
  //  i=0;
  //}
  //22Aug20_Serial.print("i: ");
  //22Aug20_Serial.println(i);
  rtcSync.loop();
   d4d8e:	4889      	ldr	r0, [pc, #548]	; (d4fb4 <loop+0x22c>)
   d4d90:	4c89      	ldr	r4, [pc, #548]	; (d4fb8 <loop+0x230>)
   d4d92:	f8df 9280 	ldr.w	r9, [pc, #640]	; d5014 <loop+0x28c>
  battCharge = int(fuel.getSoC()); //grab it early for the publish
  delay(120000); //leave 120 seconds to set up configurations after reset. one minute is not enough in the rain...-fwb-21May20
}

void loop()
{
   d4d96:	b08b      	sub	sp, #44	; 0x2c
  //if (i>1000) {
  //  i=0;
  //}
  //22Aug20_Serial.print("i: ");
  //22Aug20_Serial.println(i);
  rtcSync.loop();
   d4d98:	f000 fb5f 	bl	d545a <_ZN15RTCSynchronizer4loopEv>
*/
//something going on this morning
  //22Aug20_Serial.print("Sleep Interval: ");
  //22Aug20_Serial.println(Sleep_Interval);
  //sleeps the first time for one minute, then goes on to bed for a nap
  Time_Sleep = Time.local();
   d4d9c:	f004 fa1c 	bl	d91d8 <_ZN9TimeClass5localEv>
  if (Raining == 1 || Keep_Alive == 1) {
   d4da0:	6832      	ldr	r2, [r6, #0]
*/
//something going on this morning
  //22Aug20_Serial.print("Sleep Interval: ");
  //22Aug20_Serial.println(Sleep_Interval);
  //sleeps the first time for one minute, then goes on to bed for a nap
  Time_Sleep = Time.local();
   d4da2:	4b86      	ldr	r3, [pc, #536]	; (d4fbc <loop+0x234>)
  if (Raining == 1 || Keep_Alive == 1) {
   d4da4:	2a01      	cmp	r2, #1
*/
//something going on this morning
  //22Aug20_Serial.print("Sleep Interval: ");
  //22Aug20_Serial.println(Sleep_Interval);
  //sleeps the first time for one minute, then goes on to bed for a nap
  Time_Sleep = Time.local();
   d4da6:	6018      	str	r0, [r3, #0]
   d4da8:	4698      	mov	r8, r3
  if (Raining == 1 || Keep_Alive == 1) {
    System.sleep(REED_PIN,FALLING,Sleep_Interval,SLEEP_NETWORK_STANDBY); //5 min sleep, leaves network subsystem up
   d4daa:	6822      	ldr	r2, [r4, #0]
//something going on this morning
  //22Aug20_Serial.print("Sleep Interval: ");
  //22Aug20_Serial.println(Sleep_Interval);
  //sleeps the first time for one minute, then goes on to bed for a nap
  Time_Sleep = Time.local();
  if (Raining == 1 || Keep_Alive == 1) {
   d4dac:	d003      	beq.n	d4db6 <loop+0x2e>
   d4dae:	4b84      	ldr	r3, [pc, #528]	; (d4fc0 <loop+0x238>)
   d4db0:	681b      	ldr	r3, [r3, #0]
   d4db2:	2b01      	cmp	r3, #1
   d4db4:	d10f      	bne.n	d4dd6 <loop+0x4e>
   d4db6:	4b83      	ldr	r3, [pc, #524]	; (d4fc4 <loop+0x23c>)
   d4db8:	6819      	ldr	r1, [r3, #0]
   d4dba:	f8d9 3000 	ldr.w	r3, [r9]
   d4dbe:	f8ad 3014 	strh.w	r3, [sp, #20]
   d4dc2:	ab0a      	add	r3, sp, #40	; 0x28
   d4dc4:	2002      	movs	r0, #2
   d4dc6:	f803 0d16 	strb.w	r0, [r3, #-22]!
        return sleep(sleepMode, seconds, flag);
    }

    inline static SleepResult sleep(long seconds) { return sleep(SLEEP_MODE_WLAN, seconds); }
    inline static SleepResult sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0, SleepOptionFlags flag=SLEEP_NETWORK_OFF) {
        return sleepPinImpl(&wakeUpPin, 1, &edgeTriggerMode, 1, seconds, flag);
   d4dca:	9201      	str	r2, [sp, #4]
   d4dcc:	2201      	movs	r2, #1
   d4dce:	9102      	str	r1, [sp, #8]
   d4dd0:	9200      	str	r2, [sp, #0]
   d4dd2:	a905      	add	r1, sp, #20
   d4dd4:	e00f      	b.n	d4df6 <loop+0x6e>
   d4dd6:	4b7c      	ldr	r3, [pc, #496]	; (d4fc8 <loop+0x240>)
   d4dd8:	6819      	ldr	r1, [r3, #0]
   d4dda:	f8d9 3000 	ldr.w	r3, [r9]
   d4dde:	f8ad 3016 	strh.w	r3, [sp, #22]
   d4de2:	ab0a      	add	r3, sp, #40	; 0x28
   d4de4:	2002      	movs	r0, #2
   d4de6:	f803 0d15 	strb.w	r0, [r3, #-21]!
   d4dea:	9201      	str	r2, [sp, #4]
   d4dec:	2201      	movs	r2, #1
   d4dee:	9102      	str	r1, [sp, #8]
   d4df0:	9200      	str	r2, [sp, #0]
   d4df2:	f10d 0116 	add.w	r1, sp, #22
   d4df6:	a808      	add	r0, sp, #32
   d4df8:	f004 ff48 	bl	d9c8c <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>
        //         // Woken up from standby mode
        //         sleepResult_ = SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP);
        //     }
        // });
        static bool f = false;
        if (!f) {
   d4dfc:	4b73      	ldr	r3, [pc, #460]	; (d4fcc <loop+0x244>)
   d4dfe:	4d74      	ldr	r5, [pc, #464]	; (d4fd0 <loop+0x248>)
   d4e00:	781f      	ldrb	r7, [r3, #0]
   d4e02:	b97f      	cbnz	r7, d4e24 <loop+0x9c>
            f = true;
   d4e04:	2201      	movs	r2, #1
   d4e06:	701a      	strb	r2, [r3, #0]
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d4e08:	4639      	mov	r1, r7
   d4e0a:	463a      	mov	r2, r7
   d4e0c:	a808      	add	r0, sp, #32
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
   d4e0e:	9708      	str	r7, [sp, #32]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d4e10:	f002 fdfa 	bl	d7a08 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d4e14:	9b08      	ldr	r3, [sp, #32]
        //     }
        // });
        static bool f = false;
        if (!f) {
            f = true;
            if (resetReason() == RESET_REASON_POWER_MANAGEMENT) {
   d4e16:	2b1e      	cmp	r3, #30
   d4e18:	d104      	bne.n	d4e24 <loop+0x9c>
                // Woken up from standby mode
                sleepResult_ = SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP);
   d4e1a:	2303      	movs	r3, #3
   d4e1c:	702b      	strb	r3, [r5, #0]
   d4e1e:	2308      	movs	r3, #8
   d4e20:	806f      	strh	r7, [r5, #2]
   d4e22:	80ab      	strh	r3, [r5, #4]
            }
        }
        return sleepResult_;
   d4e24:	6828      	ldr	r0, [r5, #0]
   d4e26:	88ab      	ldrh	r3, [r5, #4]
   d4e28:	9006      	str	r0, [sp, #24]
  }  
  else {
    System.sleep(REED_PIN,FALLING,Sleep_Interval);//,SLEEP_NETWORK_STANDBY); //leaving the network on standy for testing //hourly sleep,shuts down the network subsystem #testing
  }
  SleepResult result = System.sleepResult();
  int reason = result.reason();
   d4e2a:	a806      	add	r0, sp, #24
   d4e2c:	f8ad 301c 	strh.w	r3, [sp, #28]
   d4e30:	f004 ff52 	bl	d9cd8 <_ZNK11SleepResult6reasonEv>
  /*reason =  0:  WAKEUP_REASON_NONE
              1:  WAKEUP_REASON_PIN
              2:  WAKEUP_REASON_RTC
              3:  WAKEUP_REASON_PIN_OR_RTC
  */
  if (reason == 0) {
   d4e34:	4605      	mov	r5, r0
   d4e36:	2800      	cmp	r0, #0
   d4e38:	f000 80b7 	beq.w	d4faa <loop+0x222>
    //you checked the sleepResult and nothing was set (prob because you didnt sleep)
  }
  else if (reason == 1) {
   d4e3c:	2801      	cmp	r0, #1
   d4e3e:	d128      	bne.n	d4e92 <loop+0x10a>
    //  batt could be posted in real-time, and need a revision number
    //  also, from the API, you can add notes to the station such as "Rae's Creek Sta 10"
    //13Aug20
    // added a section to figure out which pin woke us up.  Prelude to a push-button status tool for the 
    //  landfill raingage or any other similar tool
    pin_t WAKE_PIN = result.pin();
   d4e40:	a806      	add	r0, sp, #24
   d4e42:	f004 ff4b 	bl	d9cdc <_ZNK11SleepResult3pinEv>
    if (WAKE_PIN == REED_PIN) {
   d4e46:	f8d9 3000 	ldr.w	r3, [r9]
   d4e4a:	4298      	cmp	r0, r3
   d4e4c:	f040 80ad 	bne.w	d4faa <loop+0x222>
      Raining = 1;
      if (Depth_Flag == -1) {
   d4e50:	4b60      	ldr	r3, [pc, #384]	; (d4fd4 <loop+0x24c>)
    //13Aug20
    // added a section to figure out which pin woke us up.  Prelude to a push-button status tool for the 
    //  landfill raingage or any other similar tool
    pin_t WAKE_PIN = result.pin();
    if (WAKE_PIN == REED_PIN) {
      Raining = 1;
   d4e52:	6035      	str	r5, [r6, #0]
      if (Depth_Flag == -1) {
   d4e54:	681a      	ldr	r2, [r3, #0]
   d4e56:	3201      	adds	r2, #1
        Depth_Flag = 0;
   d4e58:	bf04      	itt	eq
   d4e5a:	2200      	moveq	r2, #0
   d4e5c:	601a      	streq	r2, [r3, #0]
      }
      Tip_Count_Copy = tip_count;
   d4e5e:	4b5e      	ldr	r3, [pc, #376]	; (d4fd8 <loop+0x250>)
   d4e60:	681a      	ldr	r2, [r3, #0]
   d4e62:	4b5e      	ldr	r3, [pc, #376]	; (d4fdc <loop+0x254>)
   d4e64:	601a      	str	r2, [r3, #0]
      Time_Wake = Time.local();
   d4e66:	f004 f9b7 	bl	d91d8 <_ZN9TimeClass5localEv>
   d4e6a:	4b5d      	ldr	r3, [pc, #372]	; (d4fe0 <loop+0x258>)
      if ((Sleep_Interval - (Time_Wake - Time_Sleep)) < 0) {
        Serial.print ("just a placeholder");
        Sleep_Interval = 10;
        Figure_the_Time();
      }
      Sleep_Interval = Sleep_Interval - (Time_Wake - Time_Sleep); //Sleep_Interval reduced by seconds its already slept
   d4e6c:	f8d8 1000 	ldr.w	r1, [r8]
      Raining = 1;
      if (Depth_Flag == -1) {
        Depth_Flag = 0;
      }
      Tip_Count_Copy = tip_count;
      Time_Wake = Time.local();
   d4e70:	6018      	str	r0, [r3, #0]
      if ((Sleep_Interval - (Time_Wake - Time_Sleep)) < 0) {
        Serial.print ("just a placeholder");
        Sleep_Interval = 10;
        Figure_the_Time();
      }
      Sleep_Interval = Sleep_Interval - (Time_Wake - Time_Sleep); //Sleep_Interval reduced by seconds its already slept
   d4e72:	6823      	ldr	r3, [r4, #0]
   d4e74:	4a50      	ldr	r2, [pc, #320]	; (d4fb8 <loop+0x230>)
   d4e76:	440b      	add	r3, r1
   d4e78:	1a18      	subs	r0, r3, r0
      //  negative number and resets the sleep_interval.  That's my best guess based on looking at 
      //  the data and trying to debug this issue where it would sleep for 10-15 minutes, but count
      //  all of the rainfall, which was being generated by a photon on a counter.  Changed to
      //  Sleep_Interval <=0 and then set Sleep_Interval to 1 to force the system to wakeup for pin.
      //  --fwb-24Aug20_0815
      if (Sleep_Interval <= 0) {
   d4e7a:	2800      	cmp	r0, #0
      if ((Sleep_Interval - (Time_Wake - Time_Sleep)) < 0) {
        Serial.print ("just a placeholder");
        Sleep_Interval = 10;
        Figure_the_Time();
      }
      Sleep_Interval = Sleep_Interval - (Time_Wake - Time_Sleep); //Sleep_Interval reduced by seconds its already slept
   d4e7c:	6020      	str	r0, [r4, #0]
      //  negative number and resets the sleep_interval.  That's my best guess based on looking at 
      //  the data and trying to debug this issue where it would sleep for 10-15 minutes, but count
      //  all of the rainfall, which was being generated by a photon on a counter.  Changed to
      //  Sleep_Interval <=0 and then set Sleep_Interval to 1 to force the system to wakeup for pin.
      //  --fwb-24Aug20_0815
      if (Sleep_Interval <= 0) {
   d4e7e:	dc01      	bgt.n	d4e84 <loop+0xfc>
        //22Aug20_Serial.print("Sleep Interval LT 0: ");
        //22Aug20_Serial.println(Sleep_Interval);
        //Sleep_Interval = short_Nap;//295; //little less than 5 minutes to allow for wakeup, connect, etc.
        Sleep_Interval = 1;
   d4e80:	2301      	movs	r3, #1
   d4e82:	e004      	b.n	d4e8e <loop+0x106>
      }
      else if (Sleep_Interval > short_Nap) { //not sure why, but it's early today
   d4e84:	4b57      	ldr	r3, [pc, #348]	; (d4fe4 <loop+0x25c>)
   d4e86:	681b      	ldr	r3, [r3, #0]
   d4e88:	4298      	cmp	r0, r3
   d4e8a:	f340 808e 	ble.w	d4faa <loop+0x222>
        //22Aug20_Serial.print("Sleep Interval GT SN: ");
        //22Aug20_Serial.println(Sleep_Interval);
        Sleep_Interval = short_Nap;//295; //little less than 5 minutes to allow for wakeup, connect, etc.
   d4e8e:	6013      	str	r3, [r2, #0]
   d4e90:	e08b      	b.n	d4faa <loop+0x222>
      }
      //Sleep_Interval = short_Nap;//295; //little less than 5 minutes to allow for wakeup, connect, etc.
    }
    //else wake pin was push button or something similar
  }
  else if (reason == 2) {
   d4e92:	2802      	cmp	r0, #2
   d4e94:	f040 8089 	bne.w	d4faa <loop+0x222>
    Read_the_Analogs();
   d4e98:	f7ff f96e 	bl	d4178 <_Z16Read_the_Analogsv>
    Figure_the_Time();
   d4e9c:	f7ff fd4a 	bl	d4934 <_Z15Figure_the_Timev>
    
    //no rain, hourly read
    //raining, measure in 5 min increments, network on standby, vars updated every 5
    //rain has ended, keepalive is set, when does depth drop so we can go back to hourly logging
    //not raining, but Keep_Alive is set to force the system to stay awake and post every 5 minutes
    if (Raining == 1 || Keep_Alive == 1) {
   d4ea0:	6833      	ldr	r3, [r6, #0]
   d4ea2:	4f51      	ldr	r7, [pc, #324]	; (d4fe8 <loop+0x260>)
   d4ea4:	2b01      	cmp	r3, #1
   d4ea6:	d003      	beq.n	d4eb0 <loop+0x128>
   d4ea8:	4b45      	ldr	r3, [pc, #276]	; (d4fc0 <loop+0x238>)
   d4eaa:	681b      	ldr	r3, [r3, #0]
   d4eac:	2b01      	cmp	r3, #1
   d4eae:	d161      	bne.n	d4f74 <loop+0x1ec>
        //  which is Reed_Pin wakeup.  If I don't reset here during raining, then it'll never get reset.
        //  Basically, it gets reset every time the alarm goes off if its raining or keep_alive is set.
        //  fwb-15Aug20
      //22Aug20_Serial.print("Sleep Interval Set in Raining: ");
      //22Aug20_Serial.println(Sleep_Interval);
      Sleep_Interval = short_Nap; //295; //little less than 5 minutes to allow for wakeup, connect, etc.
   d4eb0:	4e4c      	ldr	r6, [pc, #304]	; (d4fe4 <loop+0x25c>)
    //no rain, hourly read
    //raining, measure in 5 min increments, network on standby, vars updated every 5
    //rain has ended, keepalive is set, when does depth drop so we can go back to hourly logging
    //not raining, but Keep_Alive is set to force the system to stay awake and post every 5 minutes
    if (Raining == 1 || Keep_Alive == 1) {
      Store_the_DataPnt(RepCnt); //moved here to store based on RepCnt
   d4eb2:	7838      	ldrb	r0, [r7, #0]
        //  fwb-15Aug20
      //22Aug20_Serial.print("Sleep Interval Set in Raining: ");
      //22Aug20_Serial.println(Sleep_Interval);
      Sleep_Interval = short_Nap; //295; //little less than 5 minutes to allow for wakeup, connect, etc.
      //}
      if (Depth_Flag == 0) {
   d4eb4:	4d47      	ldr	r5, [pc, #284]	; (d4fd4 <loop+0x24c>)
    //no rain, hourly read
    //raining, measure in 5 min increments, network on standby, vars updated every 5
    //rain has ended, keepalive is set, when does depth drop so we can go back to hourly logging
    //not raining, but Keep_Alive is set to force the system to stay awake and post every 5 minutes
    if (Raining == 1 || Keep_Alive == 1) {
      Store_the_DataPnt(RepCnt); //moved here to store based on RepCnt
   d4eb6:	f7ff fd69 	bl	d498c <_Z17Store_the_DataPnti>
        //  which is Reed_Pin wakeup.  If I don't reset here during raining, then it'll never get reset.
        //  Basically, it gets reset every time the alarm goes off if its raining or keep_alive is set.
        //  fwb-15Aug20
      //22Aug20_Serial.print("Sleep Interval Set in Raining: ");
      //22Aug20_Serial.println(Sleep_Interval);
      Sleep_Interval = short_Nap; //295; //little less than 5 minutes to allow for wakeup, connect, etc.
   d4eba:	6833      	ldr	r3, [r6, #0]
   d4ebc:	6023      	str	r3, [r4, #0]
      //}
      if (Depth_Flag == 0) {
   d4ebe:	682b      	ldr	r3, [r5, #0]
   d4ec0:	b92b      	cbnz	r3, d4ece <loop+0x146>
        Depth_Saved = depth;
   d4ec2:	4b4a      	ldr	r3, [pc, #296]	; (d4fec <loop+0x264>)
   d4ec4:	881a      	ldrh	r2, [r3, #0]
   d4ec6:	4b4a      	ldr	r3, [pc, #296]	; (d4ff0 <loop+0x268>)
   d4ec8:	601a      	str	r2, [r3, #0]
        Depth_Flag = 1;
   d4eca:	2301      	movs	r3, #1
   d4ecc:	602b      	str	r3, [r5, #0]
      }
      if (RepCnt == 2) { 
   d4ece:	783b      	ldrb	r3, [r7, #0]
   d4ed0:	2b02      	cmp	r3, #2
   d4ed2:	d148      	bne.n	d4f66 <loop+0x1de>
   d4ed4:	4f47      	ldr	r7, [pc, #284]	; (d4ff4 <loop+0x26c>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4ed6:	4a48      	ldr	r2, [pc, #288]	; (d4ff8 <loop+0x270>)
   d4ed8:	783b      	ldrb	r3, [r7, #0]
   d4eda:	4948      	ldr	r1, [pc, #288]	; (d4ffc <loop+0x274>)
   d4edc:	f88d 3000 	strb.w	r3, [sp]
   d4ee0:	a808      	add	r0, sp, #32
   d4ee2:	233c      	movs	r3, #60	; 0x3c
   d4ee4:	f003 fd0a 	bl	d88fc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4ee8:	a809      	add	r0, sp, #36	; 0x24
   d4eea:	f7ff ff37 	bl	d4d5c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4eee:	783b      	ldrb	r3, [r7, #0]
   d4ef0:	4a43      	ldr	r2, [pc, #268]	; (d5000 <loop+0x278>)
   d4ef2:	4944      	ldr	r1, [pc, #272]	; (d5004 <loop+0x27c>)
   d4ef4:	f88d 3000 	strb.w	r3, [sp]
   d4ef8:	a808      	add	r0, sp, #32
   d4efa:	233c      	movs	r3, #60	; 0x3c
   d4efc:	f003 fcfe 	bl	d88fc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4f00:	a809      	add	r0, sp, #36	; 0x24
   d4f02:	f7ff ff2b 	bl	d4d5c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4f06:	783b      	ldrb	r3, [r7, #0]
   d4f08:	4a3f      	ldr	r2, [pc, #252]	; (d5008 <loop+0x280>)
   d4f0a:	4940      	ldr	r1, [pc, #256]	; (d500c <loop+0x284>)
   d4f0c:	f88d 3000 	strb.w	r3, [sp]
   d4f10:	a808      	add	r0, sp, #32
   d4f12:	233c      	movs	r3, #60	; 0x3c
   d4f14:	f003 fcf2 	bl	d88fc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4f18:	a809      	add	r0, sp, #36	; 0x24
   d4f1a:	f7ff ff1f 	bl	d4d5c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4f1e:	f7ff f907 	bl	d4130 <_Z14Save_to_SDCardi.part.6>
        // inverted the publish order so they appear correct when received
        Particle.publish("Data10", dataPnt10ago, PRIVATE);
        Particle.publish("Data05", dataPnt05ago, PRIVATE);
        Particle.publish("Data00", dataPnt00ago, PRIVATE);
        Save_to_SDCard(2);
        if (Depth_Flag > 0) {
   d4f22:	682b      	ldr	r3, [r5, #0]
   d4f24:	2b00      	cmp	r3, #0
          Depth_Flag += 1;
   d4f26:	bfc2      	ittt	gt
   d4f28:	4a2a      	ldrgt	r2, [pc, #168]	; (d4fd4 <loop+0x24c>)
   d4f2a:	3301      	addgt	r3, #1
   d4f2c:	6013      	strgt	r3, [r2, #0]
        }
        if (Depth_Flag > 8) { //8 15 minute periods, or 2 hours
   d4f2e:	682b      	ldr	r3, [r5, #0]
   d4f30:	2b08      	cmp	r3, #8
   d4f32:	dd16      	ble.n	d4f62 <loop+0x1da>
          if (abs(Depth_Saved-depth)<=8){ //depth is within 5 hundredths of its original value.  switched to 8 b/c maxbotix tends to bounce around a bit with normal readings.  
   d4f34:	4b2d      	ldr	r3, [pc, #180]	; (d4fec <loop+0x264>)
   d4f36:	881a      	ldrh	r2, [r3, #0]
   d4f38:	4b2d      	ldr	r3, [pc, #180]	; (d4ff0 <loop+0x268>)
   d4f3a:	681b      	ldr	r3, [r3, #0]
   d4f3c:	1a9b      	subs	r3, r3, r2
   d4f3e:	3308      	adds	r3, #8
   d4f40:	2b10      	cmp	r3, #16
   d4f42:	d80e      	bhi.n	d4f62 <loop+0x1da>
             //I believe the maxbotix has a wide target area and tends to get a lot of readings that vary by +/- 4-5.  lengthened the power up time and samples to try to counter.
            Depth_Flag = -1;
   d4f44:	4b23      	ldr	r3, [pc, #140]	; (d4fd4 <loop+0x24c>)
   d4f46:	f04f 32ff 	mov.w	r2, #4294967295
            Clear_the_Variables(0); //clears all including Raining and RepCnt
   d4f4a:	2000      	movs	r0, #0
          Depth_Flag += 1;
        }
        if (Depth_Flag > 8) { //8 15 minute periods, or 2 hours
          if (abs(Depth_Saved-depth)<=8){ //depth is within 5 hundredths of its original value.  switched to 8 b/c maxbotix tends to bounce around a bit with normal readings.  
             //I believe the maxbotix has a wide target area and tends to get a lot of readings that vary by +/- 4-5.  lengthened the power up time and samples to try to counter.
            Depth_Flag = -1;
   d4f4c:	601a      	str	r2, [r3, #0]
            Clear_the_Variables(0); //clears all including Raining and RepCnt
   d4f4e:	f7ff fd97 	bl	d4a80 <_Z19Clear_the_Variablesi>
            //22Aug20_Serial.print("Sleep Interval SET by DEPTHFLAG: ");
            //22Aug20_Serial.println(Sleep_Interval);
            if (Keep_Alive == 1) {
   d4f52:	4b1b      	ldr	r3, [pc, #108]	; (d4fc0 <loop+0x238>)
   d4f54:	681b      	ldr	r3, [r3, #0]
   d4f56:	2b01      	cmp	r3, #1
              Sleep_Interval = short_Nap; //295;
            }
            else {
              Sleep_Interval = long_Nap; //3600;
   d4f58:	bf16      	itet	ne
   d4f5a:	4b2d      	ldrne	r3, [pc, #180]	; (d5010 <loop+0x288>)
            Depth_Flag = -1;
            Clear_the_Variables(0); //clears all including Raining and RepCnt
            //22Aug20_Serial.print("Sleep Interval SET by DEPTHFLAG: ");
            //22Aug20_Serial.println(Sleep_Interval);
            if (Keep_Alive == 1) {
              Sleep_Interval = short_Nap; //295;
   d4f5c:	6833      	ldreq	r3, [r6, #0]
            }
            else {
              Sleep_Interval = long_Nap; //3600;
   d4f5e:	681b      	ldrne	r3, [r3, #0]
   d4f60:	6023      	str	r3, [r4, #0]
            }
          }
        }
        Clear_the_Variables(1); //doesn't clear Raining BUT DOES CLEAR RepCnt.  have to clear after the Depth_Saved-depth check in Depth_Flag>8
   d4f62:	2001      	movs	r0, #1
   d4f64:	e003      	b.n	d4f6e <loop+0x1e6>
        // moved to Clear_the_Variables(1)RepCnt = 0; //reset the 5/15 min increment counter
      }
      else {
        RepCnt = RepCnt+1;
   d4f66:	4a20      	ldr	r2, [pc, #128]	; (d4fe8 <loop+0x260>)
   d4f68:	3301      	adds	r3, #1
   d4f6a:	7013      	strb	r3, [r2, #0]
        Clear_the_Variables(99); //doesn't clear Raining and RepCnt
   d4f6c:	2063      	movs	r0, #99	; 0x63
   d4f6e:	f7ff fd87 	bl	d4a80 <_Z19Clear_the_Variablesi>
   d4f72:	e01a      	b.n	d4faa <loop+0x222>
      }
    }
    else { //hourly reporting
      RepCnt = 0;
   d4f74:	2600      	movs	r6, #0
      Store_the_DataPnt(2); //only store RepCnt as 00ago
   d4f76:	4628      	mov	r0, r5
        RepCnt = RepCnt+1;
        Clear_the_Variables(99); //doesn't clear Raining and RepCnt
      }
    }
    else { //hourly reporting
      RepCnt = 0;
   d4f78:	703e      	strb	r6, [r7, #0]
      Store_the_DataPnt(2); //only store RepCnt as 00ago
   d4f7a:	f7ff fd07 	bl	d498c <_Z17Store_the_DataPnti>
   d4f7e:	4b1d      	ldr	r3, [pc, #116]	; (d4ff4 <loop+0x26c>)
   d4f80:	4a21      	ldr	r2, [pc, #132]	; (d5008 <loop+0x280>)
   d4f82:	781b      	ldrb	r3, [r3, #0]
   d4f84:	4921      	ldr	r1, [pc, #132]	; (d500c <loop+0x284>)
   d4f86:	f88d 3000 	strb.w	r3, [sp]
   d4f8a:	a808      	add	r0, sp, #32
   d4f8c:	233c      	movs	r3, #60	; 0x3c
   d4f8e:	f003 fcb5 	bl	d88fc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4f92:	a809      	add	r0, sp, #36	; 0x24
   d4f94:	f7ff fee2 	bl	d4d5c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      Particle.publish pushes the value out of the device at a time controlled by the device firmware.
      Particle.variable allows the value to be pulled from the device when requested from the cloud side.
      Store_the_DataPnt(0);
      Clear_the_Variables(); */
      Particle.publish("Data00", dataPnt00ago, PRIVATE);
      Clear_the_Variables(0); //clears all including Raining and RepCnt
   d4f98:	4630      	mov	r0, r6
   d4f9a:	f7ff fd71 	bl	d4a80 <_Z19Clear_the_Variablesi>
      Save_to_SDCard(0);
   d4f9e:	4630      	mov	r0, r6
   d4fa0:	f7ff fec4 	bl	d4d2c <_Z14Save_to_SDCardi>
      //22Aug20_Serial.print("Sleep Interval SET IN HOURLY: ");
      //22Aug20_Serial.println(Sleep_Interval);
      Sleep_Interval = long_Nap; //3600;
   d4fa4:	4b1a      	ldr	r3, [pc, #104]	; (d5010 <loop+0x288>)
   d4fa6:	681b      	ldr	r3, [r3, #0]
   d4fa8:	6023      	str	r3, [r4, #0]
    //not sure how this one works either
  }
  else {
    //error
  }
}
   d4faa:	b00b      	add	sp, #44	; 0x2c
   d4fac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4fb0:	2003e170 	.word	0x2003e170
   d4fb4:	2003e178 	.word	0x2003e178
   d4fb8:	2003dc00 	.word	0x2003dc00
   d4fbc:	2003e2c8 	.word	0x2003e2c8
   d4fc0:	2003e2d8 	.word	0x2003e2d8
   d4fc4:	2003e16c 	.word	0x2003e16c
   d4fc8:	2003e164 	.word	0x2003e164
   d4fcc:	2003dccc 	.word	0x2003dccc
   d4fd0:	2003e5bc 	.word	0x2003e5bc
   d4fd4:	2003dc04 	.word	0x2003dc04
   d4fd8:	2003e168 	.word	0x2003e168
   d4fdc:	2003e2c4 	.word	0x2003e2c4
   d4fe0:	2003e2f4 	.word	0x2003e2f4
   d4fe4:	2003db64 	.word	0x2003db64
   d4fe8:	2003e2fe 	.word	0x2003e2fe
   d4fec:	2003e2d4 	.word	0x2003e2d4
   d4ff0:	2003e2cc 	.word	0x2003e2cc
   d4ff4:	2003dcd4 	.word	0x2003dcd4
   d4ff8:	2003dbc8 	.word	0x2003dbc8
   d4ffc:	000dc865 	.word	0x000dc865
   d5000:	2003db68 	.word	0x2003db68
   d5004:	000dc86c 	.word	0x000dc86c
   d5008:	2003db2c 	.word	0x2003db2c
   d500c:	000dc873 	.word	0x000dc873
   d5010:	2003dbc0 	.word	0x2003dbc0
   d5014:	2003db20 	.word	0x2003db20

000d5018 <_ZN10CloudClass8variableIA9_cIA19_cEEEbRKT_DpRKT0_>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
   d5018:	2300      	movs	r3, #0
   d501a:	2204      	movs	r2, #4
   d501c:	f002 bdfc 	b.w	d7c18 <spark_variable>

000d5020 <setup>:
unsigned long Time_Wake = 0;
unsigned long Time_Sleep = 0;
unsigned long Nap_Length = 0;

void setup()
{
   d5020:	b5f0      	push	{r4, r5, r6, r7, lr}
  Particle.variable("dataPnt00ago", dataPnt00ago);  //IF YOU MESS UP THE VARIABLE, IT WONT REGISTER AN ERROR 
   d5022:	495e      	ldr	r1, [pc, #376]	; (d519c <setup+0x17c>)
   d5024:	485e      	ldr	r0, [pc, #376]	; (d51a0 <setup+0x180>)
  pinMode(FOURTWENTY_PWR, OUTPUT); 
  pinMode(VELO_READ, INPUT); 
  pinMode(WTRTMP_READ, INPUT); 
  pinMode(TEMP_READ, INPUT); 
  pinMode(TEMP_PWR, OUTPUT); 
  pinMode(REED_PIN,INPUT_PULLUP);
   d5026:	4c5f      	ldr	r4, [pc, #380]	; (d51a4 <setup+0x184>)
   d5028:	4d5f      	ldr	r5, [pc, #380]	; (d51a8 <setup+0x188>)
unsigned long Time_Wake = 0;
unsigned long Time_Sleep = 0;
unsigned long Nap_Length = 0;

void setup()
{
   d502a:	b089      	sub	sp, #36	; 0x24
  Particle.variable("dataPnt00ago", dataPnt00ago);  //IF YOU MESS UP THE VARIABLE, IT WONT REGISTER AN ERROR 
   d502c:	f7ff fff4 	bl	d5018 <_ZN10CloudClass8variableIA9_cIA19_cEEEbRKT_DpRKT0_>
  Particle.variable("dataPnt05ago", dataPnt05ago);  //  IT DOESN"T REGISTER, NOR DOES IT THROW AN ERROR IF YOU MAKE
   d5030:	495e      	ldr	r1, [pc, #376]	; (d51ac <setup+0x18c>)
   d5032:	485f      	ldr	r0, [pc, #380]	; (d51b0 <setup+0x190>)
   d5034:	f7ff fff0 	bl	d5018 <_ZN10CloudClass8variableIA9_cIA19_cEEEbRKT_DpRKT0_>
  Particle.variable("dataPnt10ago", dataPnt10ago);  //  UP A VARIABLE NAME....1Feb202117
   d5038:	495e      	ldr	r1, [pc, #376]	; (d51b4 <setup+0x194>)
   d503a:	485f      	ldr	r0, [pc, #380]	; (d51b8 <setup+0x198>)
   d503c:	f7ff ffec 	bl	d5018 <_ZN10CloudClass8variableIA9_cIA19_cEEEbRKT_DpRKT0_>
   d5040:	2300      	movs	r3, #0
   d5042:	2202      	movs	r2, #2
   d5044:	495d      	ldr	r1, [pc, #372]	; (d51bc <setup+0x19c>)
   d5046:	485e      	ldr	r0, [pc, #376]	; (d51c0 <setup+0x1a0>)
   d5048:	f002 fde6 	bl	d7c18 <spark_variable>
   d504c:	2300      	movs	r3, #0
   d504e:	2202      	movs	r2, #2
   d5050:	495c      	ldr	r1, [pc, #368]	; (d51c4 <setup+0x1a4>)
   d5052:	485d      	ldr	r0, [pc, #372]	; (d51c8 <setup+0x1a8>)
   d5054:	f002 fde0 	bl	d7c18 <spark_variable>
   d5058:	2300      	movs	r3, #0
   d505a:	2202      	movs	r2, #2
   d505c:	495b      	ldr	r1, [pc, #364]	; (d51cc <setup+0x1ac>)
   d505e:	485c      	ldr	r0, [pc, #368]	; (d51d0 <setup+0x1b0>)
   d5060:	f002 fdda 	bl	d7c18 <spark_variable>
   d5064:	2300      	movs	r3, #0
   d5066:	2202      	movs	r2, #2
   d5068:	495a      	ldr	r1, [pc, #360]	; (d51d4 <setup+0x1b4>)
   d506a:	485b      	ldr	r0, [pc, #364]	; (d51d8 <setup+0x1b8>)
   d506c:	f002 fdd4 	bl	d7c18 <spark_variable>
  Particle.variable("battCharge", &battCharge, INT);
  Particle.variable("Station", &STATION, INT);
  Particle.variable("KeepAlive", &Keep_Alive, INT);  
  Particle.variable("program", &PROGRAM, INT);
  Particle.variable("Revision", Revision);
   d5070:	495a      	ldr	r1, [pc, #360]	; (d51dc <setup+0x1bc>)
   d5072:	485b      	ldr	r0, [pc, #364]	; (d51e0 <setup+0x1c0>)
   d5074:	f7ff ffd0 	bl	d5018 <_ZN10CloudClass8variableIA9_cIA19_cEEEbRKT_DpRKT0_>
  rtcSync.setup();
   d5078:	485a      	ldr	r0, [pc, #360]	; (d51e4 <setup+0x1c4>)
   d507a:	f000 f9e3 	bl	d5444 <_ZN15RTCSynchronizer5setupEv>
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d507e:	485a      	ldr	r0, [pc, #360]	; (d51e8 <setup+0x1c8>)
   d5080:	2300      	movs	r3, #0
   d5082:	461a      	mov	r2, r3
   d5084:	2101      	movs	r1, #1
   d5086:	6840      	ldr	r0, [r0, #4]
   d5088:	f002 fe26 	bl	d7cd8 <network_off>
  //don't plan on using these, so I may as well leave them off.
  Mesh.off();
  BLE.off();
   d508c:	f004 fb30 	bl	d96f0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d5090:	f004 fbe6 	bl	d9860 <_ZNK8particle14BleLocalDevice3offEv>
  Serial.begin(19200); //kill the serial for production.  need an ifdef...
   d5094:	f003 fa12 	bl	d84bc <_Z16_fetch_usbserialv>
   d5098:	f44f 4196 	mov.w	r1, #19200	; 0x4b00
   d509c:	f003 fa02 	bl	d84a4 <_ZN9USBSerial5beginEl>
  //SerialLogHandler logHandler;
  pinMode(DEPTH_READ, INPUT); 
   d50a0:	4b52      	ldr	r3, [pc, #328]	; (d51ec <setup+0x1cc>)
   d50a2:	2100      	movs	r1, #0
   d50a4:	8818      	ldrh	r0, [r3, #0]
   d50a6:	f004 feff 	bl	d9ea8 <pinMode>
  pinMode(FOURTWENTY_PWR, OUTPUT); 
   d50aa:	4b51      	ldr	r3, [pc, #324]	; (d51f0 <setup+0x1d0>)
   d50ac:	2101      	movs	r1, #1
   d50ae:	8818      	ldrh	r0, [r3, #0]
   d50b0:	f004 fefa 	bl	d9ea8 <pinMode>
  pinMode(VELO_READ, INPUT); 
   d50b4:	4b4f      	ldr	r3, [pc, #316]	; (d51f4 <setup+0x1d4>)
   d50b6:	2100      	movs	r1, #0
   d50b8:	8818      	ldrh	r0, [r3, #0]
   d50ba:	f004 fef5 	bl	d9ea8 <pinMode>
  pinMode(WTRTMP_READ, INPUT); 
   d50be:	4b4e      	ldr	r3, [pc, #312]	; (d51f8 <setup+0x1d8>)
   d50c0:	2100      	movs	r1, #0
   d50c2:	8818      	ldrh	r0, [r3, #0]
   d50c4:	f004 fef0 	bl	d9ea8 <pinMode>
  pinMode(TEMP_READ, INPUT); 
   d50c8:	4b4c      	ldr	r3, [pc, #304]	; (d51fc <setup+0x1dc>)
   d50ca:	2100      	movs	r1, #0
   d50cc:	8818      	ldrh	r0, [r3, #0]
   d50ce:	f004 feeb 	bl	d9ea8 <pinMode>
  pinMode(TEMP_PWR, OUTPUT); 
   d50d2:	4b4b      	ldr	r3, [pc, #300]	; (d5200 <setup+0x1e0>)
   d50d4:	2101      	movs	r1, #1
   d50d6:	8818      	ldrh	r0, [r3, #0]
   d50d8:	f004 fee6 	bl	d9ea8 <pinMode>
  pinMode(REED_PIN,INPUT_PULLUP);
   d50dc:	2102      	movs	r1, #2
   d50de:	8820      	ldrh	r0, [r4, #0]
   d50e0:	f004 fee2 	bl	d9ea8 <pinMode>
  attachInterrupt(REED_PIN,Tip_Int_Handler,FALLING);
   d50e4:	2300      	movs	r3, #0
   d50e6:	8820      	ldrh	r0, [r4, #0]
   d50e8:	4946      	ldr	r1, [pc, #280]	; (d5204 <setup+0x1e4>)
   d50ea:	9300      	str	r3, [sp, #0]
   d50ec:	2202      	movs	r2, #2
   d50ee:	f04f 33ff 	mov.w	r3, #4294967295
   d50f2:	f003 ffd7 	bl	d90a4 <_Z15attachInterrupttPFvvE13InterruptModeah>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
   d50f6:	4a44      	ldr	r2, [pc, #272]	; (d5208 <setup+0x1e8>)
   d50f8:	4944      	ldr	r1, [pc, #272]	; (d520c <setup+0x1ec>)
   d50fa:	4845      	ldr	r0, [pc, #276]	; (d5210 <setup+0x1f0>)
   d50fc:	f003 fadd 	bl	d86ba <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  Particle.function("Settings",Configuration_Settings);
  //22Aug20_Serial.println( fuel.getSoC() );
  //default to DST unless it's Nov-Feb
  if (Time.month() > 10 || Time.month() < 3) {
   d5100:	f004 f9a0 	bl	d9444 <_ZN9TimeClass5monthEv>
   d5104:	280a      	cmp	r0, #10
   d5106:	dc42      	bgt.n	d518e <setup+0x16e>
   d5108:	f004 f99c 	bl	d9444 <_ZN9TimeClass5monthEv>
   d510c:	2802      	cmp	r0, #2
   d510e:	dd3e      	ble.n	d518e <setup+0x16e>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d5110:	4c25      	ldr	r4, [pc, #148]	; (d51a8 <setup+0x188>)
    Time.zone(-4);
    Settings_Obj.eeTimeZone = 4;
  }
  //Get the saved settings from eeprom
  EEPROM.get(addr, Settings_Obj);
   d5112:	4f40      	ldr	r7, [pc, #256]	; (d5214 <setup+0x1f4>)
   d5114:	f004 fe6e 	bl	d9df4 <_Z21__fetch_global_EEPROMv>
   d5118:	2214      	movs	r2, #20
   d511a:	4621      	mov	r1, r4
   d511c:	7838      	ldrb	r0, [r7, #0]
   d511e:	f002 fcb3 	bl	d7a88 <HAL_EEPROM_Get>
  if(Settings_Obj.version != 1) {
   d5122:	782b      	ldrb	r3, [r5, #0]
   d5124:	2b01      	cmp	r3, #1
   d5126:	d013      	beq.n	d5150 <setup+0x130>
    // EEPROM was empty -> initialize myObj
    EEPROM_Obj defaultObj = { 1, 9900, 0, 0, 5 };
   d5128:	4d3b      	ldr	r5, [pc, #236]	; (d5218 <setup+0x1f8>)
   d512a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d512c:	ae03      	add	r6, sp, #12
   d512e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    Settings_Obj = defaultObj;
   d5130:	ae03      	add	r6, sp, #12
   d5132:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  }
  //Get the saved settings from eeprom
  EEPROM.get(addr, Settings_Obj);
  if(Settings_Obj.version != 1) {
    // EEPROM was empty -> initialize myObj
    EEPROM_Obj defaultObj = { 1, 9900, 0, 0, 5 };
   d5134:	f8d5 e000 	ldr.w	lr, [r5]
    Settings_Obj = defaultObj;
   d5138:	4625      	mov	r5, r4
   d513a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d513c:	f8c5 e000 	str.w	lr, [r5]
    EEPROM.put(addr,Settings_Obj);
   d5140:	f004 fe58 	bl	d9df4 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d5144:	2214      	movs	r2, #20
   d5146:	4621      	mov	r1, r4
   d5148:	7838      	ldrb	r0, [r7, #0]
   d514a:	f002 fca5 	bl	d7a98 <HAL_EEPROM_Put>
   d514e:	e010      	b.n	d5172 <setup+0x152>
  }  
  else {
    STATION=Settings_Obj.eeStation;
   d5150:	4b1c      	ldr	r3, [pc, #112]	; (d51c4 <setup+0x1a4>)
   d5152:	6862      	ldr	r2, [r4, #4]
   d5154:	601a      	str	r2, [r3, #0]
    Keep_Alive = Settings_Obj.eeKeep_Alive;
   d5156:	4b1d      	ldr	r3, [pc, #116]	; (d51cc <setup+0x1ac>)
   d5158:	68a2      	ldr	r2, [r4, #8]
   d515a:	601a      	str	r2, [r3, #0]
    PROGRAM = Settings_Obj.eePROGRAM;
   d515c:	4b1d      	ldr	r3, [pc, #116]	; (d51d4 <setup+0x1b4>)
   d515e:	68e2      	ldr	r2, [r4, #12]
   d5160:	601a      	str	r2, [r3, #0]
    int tmpint = Settings_Obj.eeTimeZone;
   d5162:	6923      	ldr	r3, [r4, #16]
    tmpint=tmpint*-1;
    Time.zone(tmpint);
   d5164:	425b      	negs	r3, r3
   d5166:	ee00 3a10 	vmov	s0, r3
   d516a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
   d516e:	f004 f841 	bl	d91f4 <_ZN9TimeClass4zoneEf>
  }
  battCharge = int(fuel.getSoC()); //grab it early for the publish
   d5172:	482a      	ldr	r0, [pc, #168]	; (d521c <setup+0x1fc>)
   d5174:	f003 ff0e 	bl	d8f94 <_ZN9FuelGauge6getSoCEv>
   d5178:	4b10      	ldr	r3, [pc, #64]	; (d51bc <setup+0x19c>)
  delay(120000); //leave 120 seconds to set up configurations after reset. one minute is not enough in the rain...-fwb-21May20
   d517a:	4829      	ldr	r0, [pc, #164]	; (d5220 <setup+0x200>)
    PROGRAM = Settings_Obj.eePROGRAM;
    int tmpint = Settings_Obj.eeTimeZone;
    tmpint=tmpint*-1;
    Time.zone(tmpint);
  }
  battCharge = int(fuel.getSoC()); //grab it early for the publish
   d517c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d5180:	ed83 0a00 	vstr	s0, [r3]
  delay(120000); //leave 120 seconds to set up configurations after reset. one minute is not enough in the rain...-fwb-21May20
}
   d5184:	b009      	add	sp, #36	; 0x24
   d5186:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    int tmpint = Settings_Obj.eeTimeZone;
    tmpint=tmpint*-1;
    Time.zone(tmpint);
  }
  battCharge = int(fuel.getSoC()); //grab it early for the publish
  delay(120000); //leave 120 seconds to set up configurations after reset. one minute is not enough in the rain...-fwb-21May20
   d518a:	f003 be49 	b.w	d8e20 <delay>
  attachInterrupt(REED_PIN,Tip_Int_Handler,FALLING);
  Particle.function("Settings",Configuration_Settings);
  //22Aug20_Serial.println( fuel.getSoC() );
  //default to DST unless it's Nov-Feb
  if (Time.month() > 10 || Time.month() < 3) {
    Time.zone(-4);
   d518e:	eeb9 0a00 	vmov.f32	s0, #144	; 0xc0800000 -4.0
   d5192:	f004 f82f 	bl	d91f4 <_ZN9TimeClass4zoneEf>
    Settings_Obj.eeTimeZone = 4;
   d5196:	2304      	movs	r3, #4
   d5198:	612b      	str	r3, [r5, #16]
   d519a:	e7b9      	b.n	d5110 <setup+0xf0>
   d519c:	2003db2c 	.word	0x2003db2c
   d51a0:	000dc87a 	.word	0x000dc87a
   d51a4:	2003db20 	.word	0x2003db20
   d51a8:	2003e2dc 	.word	0x2003e2dc
   d51ac:	2003db68 	.word	0x2003db68
   d51b0:	000dc887 	.word	0x000dc887
   d51b4:	2003dbc8 	.word	0x2003dbc8
   d51b8:	000dc894 	.word	0x000dc894
   d51bc:	2003dcd0 	.word	0x2003dcd0
   d51c0:	000dc8a1 	.word	0x000dc8a1
   d51c4:	2003db1c 	.word	0x2003db1c
   d51c8:	000dc8ac 	.word	0x000dc8ac
   d51cc:	2003e2d8 	.word	0x2003e2d8
   d51d0:	000dc8b4 	.word	0x000dc8b4
   d51d4:	2003e308 	.word	0x2003e308
   d51d8:	000dc8be 	.word	0x000dc8be
   d51dc:	2003dbac 	.word	0x2003dbac
   d51e0:	000dc8c6 	.word	0x000dc8c6
   d51e4:	2003e178 	.word	0x2003e178
   d51e8:	2003e324 	.word	0x2003e324
   d51ec:	2003db28 	.word	0x2003db28
   d51f0:	2003dba8 	.word	0x2003dba8
   d51f4:	2003dba4 	.word	0x2003dba4
   d51f8:	2003dc08 	.word	0x2003dc08
   d51fc:	2003db24 	.word	0x2003db24
   d5200:	2003dbc4 	.word	0x2003dbc4
   d5204:	000d40b9 	.word	0x000d40b9
   d5208:	000dc8cf 	.word	0x000dc8cf
   d520c:	000d4af9 	.word	0x000d4af9
   d5210:	000d868f 	.word	0x000d868f
   d5214:	2003dccd 	.word	0x2003dccd
   d5218:	000dc7c8 	.word	0x000dc7c8
   d521c:	2003e15c 	.word	0x2003e15c
   d5220:	0001d4c0 	.word	0x0001d4c0

000d5224 <_GLOBAL__sub_I_PROGRAM>:
		Serial.write(data);
	}
	// close the file:
	myFile.close();
  */
}
   d5224:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5228:	4b29      	ldr	r3, [pc, #164]	; (d52d0 <_GLOBAL__sub_I_PROGRAM+0xac>)
char dataPnt05ago[53]="five ago";
char dataPnt10ago[53]="ten ago";
//char data_array[DataPts_to_Store][48]={0};
int battCharge = 0; //battery charge, as a percent, should be < 255
char message[6][54] = {0}; 
FuelGauge fuel;
   d522a:	4c2a      	ldr	r4, [pc, #168]	; (d52d4 <_GLOBAL__sub_I_PROGRAM+0xb0>)
   d522c:	4f2a      	ldr	r7, [pc, #168]	; (d52d8 <_GLOBAL__sub_I_PROGRAM+0xb4>)
//SD Card & RTC
// The SD card CS pin on the Adafruit AdaLogger FeatherWing is D5.
const int SD_CHIP_SELECT = D5;
SdFat sd;
//setup the RTC
RTCSynchronizer rtcSync;
   d522e:	f8df 90d0 	ldr.w	r9, [pc, #208]	; d5300 <_GLOBAL__sub_I_PROGRAM+0xdc>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d5232:	f8df 80d0 	ldr.w	r8, [pc, #208]	; d5304 <_GLOBAL__sub_I_PROGRAM+0xe0>
   d5236:	2500      	movs	r5, #0
   d5238:	601d      	str	r5, [r3, #0]
   d523a:	4b28      	ldr	r3, [pc, #160]	; (d52dc <_GLOBAL__sub_I_PROGRAM+0xb8>)
   d523c:	2601      	movs	r6, #1
   d523e:	601e      	str	r6, [r3, #0]
   d5240:	4b27      	ldr	r3, [pc, #156]	; (d52e0 <_GLOBAL__sub_I_PROGRAM+0xbc>)
		Serial.write(data);
	}
	// close the file:
	myFile.close();
  */
}
   d5242:	b085      	sub	sp, #20
   d5244:	701e      	strb	r6, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d5246:	f002 fc77 	bl	d7b38 <HAL_Pin_Map>
char dataPnt05ago[53]="five ago";
char dataPnt10ago[53]="ten ago";
//char data_array[DataPts_to_Store][48]={0};
int battCharge = 0; //battery charge, as a percent, should be < 255
char message[6][54] = {0}; 
FuelGauge fuel;
   d524a:	4629      	mov	r1, r5
   d524c:	4620      	mov	r0, r4
   d524e:	f003 fe61 	bl	d8f14 <_ZN9FuelGaugeC1Eb>
   d5252:	463a      	mov	r2, r7
   d5254:	4923      	ldr	r1, [pc, #140]	; (d52e4 <_GLOBAL__sub_I_PROGRAM+0xc0>)
   d5256:	4620      	mov	r0, r4
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
   d5258:	4c23      	ldr	r4, [pc, #140]	; (d52e8 <_GLOBAL__sub_I_PROGRAM+0xc4>)
   d525a:	f004 fe79 	bl	d9f50 <__aeabi_atexit>
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
   d525e:	2364      	movs	r3, #100	; 0x64
   d5260:	f884 3460 	strb.w	r3, [r4, #1120]	; 0x460
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   d5264:	4b21      	ldr	r3, [pc, #132]	; (d52ec <_GLOBAL__sub_I_PROGRAM+0xc8>)
   d5266:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
   d526a:	71e5      	strb	r5, [r4, #7]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d526c:	f884 543c 	strb.w	r5, [r4, #1084]	; 0x43c
   d5270:	f884 543d 	strb.w	r5, [r4, #1085]	; 0x43d
   d5274:	f884 546a 	strb.w	r5, [r4, #1130]	; 0x46a
   d5278:	f8c4 5478 	str.w	r5, [r4, #1144]	; 0x478
   d527c:	f884 547c 	strb.w	r5, [r4, #1148]	; 0x47c
   d5280:	f884 547d 	strb.w	r5, [r4, #1149]	; 0x47d
   d5284:	f8c4 8470 	str.w	r8, [r4, #1136]	; 0x470
   d5288:	f884 6474 	strb.w	r6, [r4, #1140]	; 0x474
//SD Card & RTC
// The SD card CS pin on the Adafruit AdaLogger FeatherWing is D5.
const int SD_CHIP_SELECT = D5;
SdFat sd;
//setup the RTC
RTCSynchronizer rtcSync;
   d528c:	4648      	mov	r0, r9
   d528e:	f000 f85b 	bl	d5348 <_ZN15RTCSynchronizerC1Ev>
   d5292:	463a      	mov	r2, r7
   d5294:	4916      	ldr	r1, [pc, #88]	; (d52f0 <_GLOBAL__sub_I_PROGRAM+0xcc>)
   d5296:	4648      	mov	r0, r9
   d5298:	f004 fe5a 	bl	d9f50 <__aeabi_atexit>
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
   d529c:	f88d 5004 	strb.w	r5, [sp, #4]
   d52a0:	f88d 500d 	strb.w	r5, [sp, #13]
SdCardPrintHandler printToCard(sd, SD_CHIP_SELECT, SPI_FULL_SPEED);
   d52a4:	4d13      	ldr	r5, [pc, #76]	; (d52f4 <_GLOBAL__sub_I_PROGRAM+0xd0>)
   d52a6:	4b14      	ldr	r3, [pc, #80]	; (d52f8 <_GLOBAL__sub_I_PROGRAM+0xd4>)
   d52a8:	9302      	str	r3, [sp, #8]
   d52aa:	4621      	mov	r1, r4
   d52ac:	466b      	mov	r3, sp
   d52ae:	2205      	movs	r2, #5
   d52b0:	4628      	mov	r0, r5
   d52b2:	f8cd 8000 	str.w	r8, [sp]
   d52b6:	f88d 600c 	strb.w	r6, [sp, #12]
   d52ba:	f002 f811 	bl	d72e0 <_ZN18SdCardPrintHandlerC1ER5SdFathN8particle13__SPISettingsE>
   d52be:	463a      	mov	r2, r7
   d52c0:	490e      	ldr	r1, [pc, #56]	; (d52fc <_GLOBAL__sub_I_PROGRAM+0xd8>)
   d52c2:	4628      	mov	r0, r5
   d52c4:	f004 fe44 	bl	d9f50 <__aeabi_atexit>
		Serial.write(data);
	}
	// close the file:
	myFile.close();
  */
}
   d52c8:	b005      	add	sp, #20
   d52ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d52ce:	bf00      	nop
   d52d0:	2003e164 	.word	0x2003e164
   d52d4:	2003e15c 	.word	0x2003e15c
   d52d8:	2003dcc8 	.word	0x2003dcc8
   d52dc:	2003e16c 	.word	0x2003e16c
   d52e0:	2003dcd4 	.word	0x2003dcd4
   d52e4:	000d8f33 	.word	0x000d8f33
   d52e8:	2003dcd8 	.word	0x2003dcd8
   d52ec:	2003e608 	.word	0x2003e608
   d52f0:	000d5309 	.word	0x000d5309
   d52f4:	2003e180 	.word	0x2003e180
   d52f8:	02faf080 	.word	0x02faf080
   d52fc:	000d740d 	.word	0x000d740d
   d5300:	2003e178 	.word	0x2003e178
   d5304:	000dc7c4 	.word	0x000dc7c4

000d5308 <_ZN15RTCSynchronizerD1Ev>:

}

RTCSynchronizer::~RTCSynchronizer() {

}
   d5308:	4770      	bx	lr

000d530a <_ZN15RTCSynchronizerD0Ev>:

RTCSynchronizer::RTCSynchronizer() {

}

RTCSynchronizer::~RTCSynchronizer() {
   d530a:	b510      	push	{r4, lr}

}
   d530c:	2108      	movs	r1, #8

RTCSynchronizer::RTCSynchronizer() {

}

RTCSynchronizer::~RTCSynchronizer() {
   d530e:	4604      	mov	r4, r0

}
   d5310:	f004 fe23 	bl	d9f5a <_ZdlPvj>
   d5314:	4620      	mov	r0, r4
   d5316:	bd10      	pop	{r4, pc}

000d5318 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d5318:	b40e      	push	{r1, r2, r3}
   d531a:	b500      	push	{lr}
   d531c:	b08c      	sub	sp, #48	; 0x30
   d531e:	aa0d      	add	r2, sp, #52	; 0x34
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d5320:	2320      	movs	r3, #32
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d5322:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list args;
    va_start(args, fmt);
   d5326:	9203      	str	r2, [sp, #12]

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d5328:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d532c:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d532e:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d5330:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d5332:	aa04      	add	r2, sp, #16
   d5334:	201e      	movs	r0, #30
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d5336:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d5338:	f002 fc66 	bl	d7c08 <log_message_v>
inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}
   d533c:	b00c      	add	sp, #48	; 0x30
   d533e:	f85d eb04 	ldr.w	lr, [sp], #4
   d5342:	b003      	add	sp, #12
   d5344:	4770      	bx	lr
	...

000d5348 <_ZN15RTCSynchronizerC1Ev>:
#include "AdafruitDataLoggerRK.h"


RTCSynchronizer::RTCSynchronizer() {
   d5348:	4a02      	ldr	r2, [pc, #8]	; (d5354 <_ZN15RTCSynchronizerC1Ev+0xc>)
   d534a:	6002      	str	r2, [r0, #0]
   d534c:	2200      	movs	r2, #0
   d534e:	7142      	strb	r2, [r0, #5]

}
   d5350:	4770      	bx	lr
   d5352:	bf00      	nop
   d5354:	000dc8e0 	.word	0x000dc8e0

000d5358 <_ZN15RTCSynchronizer8syncTimeEv>:

void RTCSynchronizer::loop() {
	syncTime();
}

void RTCSynchronizer::syncTime() {
   d5358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!hasRTC) {
   d535c:	7943      	ldrb	r3, [r0, #5]

void RTCSynchronizer::loop() {
	syncTime();
}

void RTCSynchronizer::syncTime() {
   d535e:	b08a      	sub	sp, #40	; 0x28
	if (!hasRTC) {
   d5360:	2b00      	cmp	r3, #0
   d5362:	d062      	beq.n	d542a <_ZN15RTCSynchronizer8syncTimeEv+0xd2>
		return;
	}

	// We have an RTC on the I2C bus

	if (!rtc.initialized()) {
   d5364:	1d05      	adds	r5, r0, #4
   d5366:	4628      	mov	r0, r5
   d5368:	f001 fe34 	bl	d6fd4 <_ZN11RTC_PCF852311initializedEv>
   d536c:	2800      	cmp	r0, #0
   d536e:	d140      	bne.n	d53f2 <_ZN15RTCSynchronizer8syncTimeEv+0x9a>
		if (Time.isValid()) {
   d5370:	f004 f818 	bl	d93a4 <_ZN9TimeClass7isValidEv>
   d5374:	2800      	cmp	r0, #0
   d5376:	d058      	beq.n	d542a <_ZN15RTCSynchronizer8syncTimeEv+0xd2>
			// We have time from the cloud, so use it to set the RTC
		    uint32_t now = Time.now();
   d5378:	f004 f835 	bl	d93e6 <_ZN9TimeClass3nowEv>

		    Log.info("setting RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d537c:	4b2c      	ldr	r3, [pc, #176]	; (d5430 <_ZN15RTCSynchronizer8syncTimeEv+0xd8>)
   d537e:	492d      	ldr	r1, [pc, #180]	; (d5434 <_ZN15RTCSynchronizer8syncTimeEv+0xdc>)
   d5380:	681b      	ldr	r3, [r3, #0]
	// We have an RTC on the I2C bus

	if (!rtc.initialized()) {
		if (Time.isValid()) {
			// We have time from the cloud, so use it to set the RTC
		    uint32_t now = Time.now();
   d5382:	4604      	mov	r4, r0

		    Log.info("setting RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d5384:	4602      	mov	r2, r0
   d5386:	a806      	add	r0, sp, #24
   d5388:	f003 ffda 	bl	d9340 <_ZN9TimeClass6formatElPKc>
   d538c:	9a06      	ldr	r2, [sp, #24]
   d538e:	492a      	ldr	r1, [pc, #168]	; (d5438 <_ZN15RTCSynchronizer8syncTimeEv+0xe0>)
   d5390:	482a      	ldr	r0, [pc, #168]	; (d543c <_ZN15RTCSynchronizer8syncTimeEv+0xe4>)
   d5392:	f7ff ffc1 	bl	d5318 <_ZNK5spark6Logger4infoEPKcz>
   d5396:	a806      	add	r0, sp, #24
   d5398:	f003 fc32 	bl	d8c00 <_ZN6StringD1Ev>

		    rtc.adjust(DateTime(Time.year(now), Time.month(now), Time.day(now), Time.hour(now), Time.minute(now), Time.second(now)));
   d539c:	4620      	mov	r0, r4
   d539e:	f003 ff13 	bl	d91c8 <_ZN9TimeClass4yearEl>
   d53a2:	4680      	mov	r8, r0
   d53a4:	4620      	mov	r0, r4
   d53a6:	f003 ff05 	bl	d91b4 <_ZN9TimeClass5monthEl>
   d53aa:	4681      	mov	r9, r0
   d53ac:	4620      	mov	r0, r4
   d53ae:	f003 fef9 	bl	d91a4 <_ZN9TimeClass3dayEl>
   d53b2:	4682      	mov	sl, r0
   d53b4:	4620      	mov	r0, r4
   d53b6:	f003 fedd 	bl	d9174 <_ZN9TimeClass4hourEl>
   d53ba:	4606      	mov	r6, r0
   d53bc:	4620      	mov	r0, r4
   d53be:	f003 fee1 	bl	d9184 <_ZN9TimeClass6minuteEl>
   d53c2:	4607      	mov	r7, r0
   d53c4:	4620      	mov	r0, r4
   d53c6:	f003 fee5 	bl	d9194 <_ZN9TimeClass6secondEl>
   d53ca:	b2ff      	uxtb	r7, r7
   d53cc:	b2c0      	uxtb	r0, r0
   d53ce:	b2f6      	uxtb	r6, r6
   d53d0:	9002      	str	r0, [sp, #8]
   d53d2:	fa1f f188 	uxth.w	r1, r8
   d53d6:	9701      	str	r7, [sp, #4]
   d53d8:	9600      	str	r6, [sp, #0]
   d53da:	fa5f f38a 	uxtb.w	r3, sl
   d53de:	fa5f f289 	uxtb.w	r2, r9
   d53e2:	a806      	add	r0, sp, #24
   d53e4:	f001 fdca 	bl	d6f7c <_ZN8DateTimeC1Ethhhhh>
   d53e8:	a906      	add	r1, sp, #24
   d53ea:	4628      	mov	r0, r5
   d53ec:	f001 fe13 	bl	d7016 <_ZN11RTC_PCF85236adjustERK8DateTime>
   d53f0:	e01b      	b.n	d542a <_ZN15RTCSynchronizer8syncTimeEv+0xd2>
		}
	}
	else {
		if (!Time.isValid()) {
   d53f2:	f003 ffd7 	bl	d93a4 <_ZN9TimeClass7isValidEv>
   d53f6:	b9c0      	cbnz	r0, d542a <_ZN15RTCSynchronizer8syncTimeEv+0xd2>
			// RTC is initialized, but we haven't gotten time from the cloud, so set the time that way
			DateTime now = rtc.now();
   d53f8:	a804      	add	r0, sp, #16
   d53fa:	f001 fe89 	bl	d7110 <_ZN11RTC_PCF85233nowEv>

			Time.setTime(now.unixtime());
   d53fe:	a804      	add	r0, sp, #16
   d5400:	f001 fdd0 	bl	d6fa4 <_ZNK8DateTime8unixtimeEv>
   d5404:	f003 ff12 	bl	d922c <_ZN9TimeClass7setTimeEl>

		    Log.info("setting Time from RTC %s", Time.format(Time.now(), TIME_FORMAT_DEFAULT).c_str());
   d5408:	f003 ffed 	bl	d93e6 <_ZN9TimeClass3nowEv>
   d540c:	4b08      	ldr	r3, [pc, #32]	; (d5430 <_ZN15RTCSynchronizer8syncTimeEv+0xd8>)
   d540e:	4909      	ldr	r1, [pc, #36]	; (d5434 <_ZN15RTCSynchronizer8syncTimeEv+0xdc>)
   d5410:	681b      	ldr	r3, [r3, #0]
   d5412:	4602      	mov	r2, r0
   d5414:	a806      	add	r0, sp, #24
   d5416:	f003 ff93 	bl	d9340 <_ZN9TimeClass6formatElPKc>
   d541a:	4808      	ldr	r0, [pc, #32]	; (d543c <_ZN15RTCSynchronizer8syncTimeEv+0xe4>)
   d541c:	9a06      	ldr	r2, [sp, #24]
   d541e:	4908      	ldr	r1, [pc, #32]	; (d5440 <_ZN15RTCSynchronizer8syncTimeEv+0xe8>)
   d5420:	f7ff ff7a 	bl	d5318 <_ZNK5spark6Logger4infoEPKcz>
   d5424:	a806      	add	r0, sp, #24
   d5426:	f003 fbeb 	bl	d8c00 <_ZN6StringD1Ev>
		}
	}
}
   d542a:	b00a      	add	sp, #40	; 0x28
   d542c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5430:	2003dc0c 	.word	0x2003dc0c
   d5434:	2003e578 	.word	0x2003e578
   d5438:	000dc8e8 	.word	0x000dc8e8
   d543c:	2003e58c 	.word	0x2003e58c
   d5440:	000dc902 	.word	0x000dc902

000d5444 <_ZN15RTCSynchronizer5setupEv>:

RTCSynchronizer::~RTCSynchronizer() {

}

void RTCSynchronizer::setup() {
   d5444:	b510      	push	{r4, lr}
   d5446:	4604      	mov	r4, r0
	hasRTC = rtc.begin();
   d5448:	3004      	adds	r0, #4
   d544a:	f001 feda 	bl	d7202 <_ZN11RTC_PCF85235beginEv>
   d544e:	7160      	strb	r0, [r4, #5]
	syncTime();
   d5450:	4620      	mov	r0, r4
}
   d5452:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

}

void RTCSynchronizer::setup() {
	hasRTC = rtc.begin();
	syncTime();
   d5456:	f7ff bf7f 	b.w	d5358 <_ZN15RTCSynchronizer8syncTimeEv>

000d545a <_ZN15RTCSynchronizer4loopEv>:
}

void RTCSynchronizer::loop() {
	syncTime();
   d545a:	f7ff bf7d 	b.w	d5358 <_ZN15RTCSynchronizer8syncTimeEv>

000d545e <_GLOBAL__sub_I__ZN15RTCSynchronizerC2Ev>:
   d545e:	f002 bb6b 	b.w	d7b38 <HAL_Pin_Map>

000d5462 <_GLOBAL__sub_I_MinimumSerial.cpp>:
   d5462:	f002 bb69 	b.w	d7b38 <HAL_Pin_Map>
	...

000d5468 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   d5468:	4b01      	ldr	r3, [pc, #4]	; (d5470 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   d546a:	2201      	movs	r2, #1
   d546c:	701a      	strb	r2, [r3, #0]
   d546e:	4770      	bx	lr
   d5470:	2003e30c 	.word	0x2003e30c

000d5474 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   d5474:	1d01      	adds	r1, r0, #4
   d5476:	6800      	ldr	r0, [r0, #0]
   d5478:	f002 be9c 	b.w	d81b4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>

000d547c <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   d547c:	b510      	push	{r4, lr}
   d547e:	4604      	mov	r4, r0
  m_csPin = csPin;
   d5480:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   d5482:	6800      	ldr	r0, [r0, #0]
   d5484:	f002 fe78 	bl	d8178 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   d5488:	7d20      	ldrb	r0, [r4, #20]
   d548a:	2101      	movs	r1, #1
   d548c:	f004 fd0c 	bl	d9ea8 <pinMode>
  digitalWrite(m_csPin, HIGH);
   d5490:	7d20      	ldrb	r0, [r4, #20]
   d5492:	2101      	movs	r1, #1
}
   d5494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
  m_csPin = csPin;
  m_spi->begin();
  pinMode(m_csPin, OUTPUT);
  digitalWrite(m_csPin, HIGH);
   d5498:	f004 bd17 	b.w	d9eca <digitalWrite>

000d549c <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   d549c:	6800      	ldr	r0, [r0, #0]
   d549e:	f002 be70 	b.w	d8182 <_ZN8SPIClass14endTransactionEv>

000d54a2 <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   d54a2:	21ff      	movs	r1, #255	; 0xff
   d54a4:	6800      	ldr	r0, [r0, #0]
   d54a6:	f002 bef5 	b.w	d8294 <_ZN8SPIClass8transferEh>
	...

000d54ac <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   d54ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d54ae:	4b08      	ldr	r3, [pc, #32]	; (d54d0 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   d54b0:	9300      	str	r3, [sp, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d54b2:	2500      	movs	r5, #0
   d54b4:	4c07      	ldr	r4, [pc, #28]	; (d54d4 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d54b6:	6800      	ldr	r0, [r0, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d54b8:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d54ba:	4613      	mov	r3, r2
   d54bc:	460a      	mov	r2, r1
   d54be:	4629      	mov	r1, r5
   d54c0:	f002 feee 	bl	d82a0 <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   d54c4:	7823      	ldrb	r3, [r4, #0]
   d54c6:	2b00      	cmp	r3, #0
   d54c8:	d0fc      	beq.n	d54c4 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   d54ca:	2000      	movs	r0, #0
   d54cc:	b003      	add	sp, #12
   d54ce:	bd30      	pop	{r4, r5, pc}
   d54d0:	000d5469 	.word	0x000d5469
   d54d4:	2003e30c 	.word	0x2003e30c

000d54d8 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   d54d8:	6800      	ldr	r0, [r0, #0]
   d54da:	f002 bedb 	b.w	d8294 <_ZN8SPIClass8transferEh>
	...

000d54e0 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   d54e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d54e2:	4b07      	ldr	r3, [pc, #28]	; (d5500 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   d54e4:	9300      	str	r3, [sp, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d54e6:	2500      	movs	r5, #0
   d54e8:	4c06      	ldr	r4, [pc, #24]	; (d5504 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d54ea:	6800      	ldr	r0, [r0, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d54ec:	7025      	strb	r5, [r4, #0]

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d54ee:	4613      	mov	r3, r2
   d54f0:	462a      	mov	r2, r5
   d54f2:	f002 fed5 	bl	d82a0 <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
   d54f6:	7823      	ldrb	r3, [r4, #0]
   d54f8:	2b00      	cmp	r3, #0
   d54fa:	d0fc      	beq.n	d54f6 <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   d54fc:	b003      	add	sp, #12
   d54fe:	bd30      	pop	{r4, r5, pc}
   d5500:	000d5469 	.word	0x000d5469
   d5504:	2003e30c 	.word	0x2003e30c

000d5508 <_GLOBAL__sub_I__ZN14SdSpiAltDriver8activateEv>:
   d5508:	f002 bb16 	b.w	d7b38 <HAL_Pin_Map>

000d550c <_GLOBAL__sub_I_SdSpiTeensy3.cpp>:
   d550c:	f002 bb14 	b.w	d7b38 <HAL_Pin_Map>

000d5510 <_GLOBAL__sub_I_SdSpiSAM3X.cpp>:
   d5510:	f002 bb12 	b.w	d7b38 <HAL_Pin_Map>

000d5514 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d5514:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d5516:	4c0e      	ldr	r4, [pc, #56]	; (d5550 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d5518:	460e      	mov	r6, r1
   d551a:	4615      	mov	r5, r2

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d551c:	f002 fa8c 	bl	d7a38 <HAL_Timer_Get_Micro_Seconds>
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d5520:	6823      	ldr	r3, [r4, #0]
   d5522:	1ac0      	subs	r0, r0, r3
   d5524:	4b0b      	ldr	r3, [pc, #44]	; (d5554 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   d5526:	4298      	cmp	r0, r3
   d5528:	d908      	bls.n	d553c <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d552a:	f002 fa8d 	bl	d7a48 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d552e:	4b0a      	ldr	r3, [pc, #40]	; (d5558 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   d5530:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d5532:	f002 fb81 	bl	d7c38 <spark_process>
   d5536:	f002 fa7f 	bl	d7a38 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   d553a:	6020      	str	r0, [r4, #0]
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d553c:	f002 fa84 	bl	d7a48 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   d5540:	b280      	uxth	r0, r0
   d5542:	1b80      	subs	r0, r0, r6
}
   d5544:	42a8      	cmp	r0, r5
   d5546:	bfd4      	ite	le
   d5548:	2000      	movle	r0, #0
   d554a:	2001      	movgt	r0, #1
   d554c:	bd70      	pop	{r4, r5, r6, pc}
   d554e:	bf00      	nop
   d5550:	2003e310 	.word	0x2003e310
   d5554:	000186a0 	.word	0x000186a0
   d5558:	2003e604 	.word	0x2003e604

000d555c <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d555c:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   d555e:	7a05      	ldrb	r5, [r0, #8]
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d5560:	4604      	mov	r4, r0
  if (!m_spiActive) {
   d5562:	b94d      	cbnz	r5, d5578 <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
   d5564:	6840      	ldr	r0, [r0, #4]
   d5566:	f7ff ff85 	bl	d5474 <_ZN14SdSpiAltDriver8activateEv>
   d556a:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d556c:	4629      	mov	r1, r5
   d556e:	7d18      	ldrb	r0, [r3, #20]
   d5570:	f004 fcab 	bl	d9eca <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   d5574:	2301      	movs	r3, #1
   d5576:	7223      	strb	r3, [r4, #8]
   d5578:	bd38      	pop	{r3, r4, r5, pc}

000d557a <_ZN9SdSpiCard7spiStopEv>:
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d557a:	b510      	push	{r4, lr}
  if (m_spiActive) {
   d557c:	7a03      	ldrb	r3, [r0, #8]
    spiSelect();
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d557e:	4604      	mov	r4, r0
  if (m_spiActive) {
   d5580:	b16b      	cbz	r3, d559e <_ZN9SdSpiCard7spiStopEv+0x24>
   d5582:	6843      	ldr	r3, [r0, #4]
  void setSpiSettings(SPISettings spiSettings) {
    m_spiSettings = spiSettings;
  }
  /** Set CS high. */
  void unselect() {
    digitalWrite(m_csPin, HIGH);
   d5584:	2101      	movs	r1, #1
   d5586:	7d18      	ldrb	r0, [r3, #20]
   d5588:	f004 fc9f 	bl	d9eca <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d558c:	21ff      	movs	r1, #255	; 0xff
   d558e:	6860      	ldr	r0, [r4, #4]
   d5590:	f7ff ffa2 	bl	d54d8 <_ZN14SdSpiAltDriver4sendEh>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
   d5594:	6860      	ldr	r0, [r4, #4]
   d5596:	f7ff ff81 	bl	d549c <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
   d559a:	2300      	movs	r3, #0
   d559c:	7223      	strb	r3, [r4, #8]
   d559e:	bd10      	pop	{r4, pc}

000d55a0 <_ZN9SdSpiCard8readDataEPhj>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   d55a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d55a2:	4604      	mov	r4, r0
   d55a4:	460d      	mov	r5, r1
   d55a6:	4616      	mov	r6, r2
   d55a8:	f002 fa4e 	bl	d7a48 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   d55ac:	b287      	uxth	r7, r0
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d55ae:	6860      	ldr	r0, [r4, #4]
   d55b0:	f7ff ff77 	bl	d54a2 <_ZN14SdSpiAltDriver7receiveEv>
  uint16_t crc;
#endif  // USE_SD_CRC
  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start block token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
   d55b4:	28ff      	cmp	r0, #255	; 0xff
   d55b6:	7260      	strb	r0, [r4, #9]
   d55b8:	d109      	bne.n	d55ce <_ZN9SdSpiCard8readDataEPhj+0x2e>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   d55ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d55be:	4639      	mov	r1, r7
   d55c0:	4620      	mov	r0, r4
   d55c2:	f7ff ffa7 	bl	d5514 <_ZN9SdSpiCard10isTimedOutEtt>
   d55c6:	2800      	cmp	r0, #0
   d55c8:	d0f1      	beq.n	d55ae <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d55ca:	2355      	movs	r3, #85	; 0x55
   d55cc:	e00b      	b.n	d55e6 <_ZN9SdSpiCard8readDataEPhj+0x46>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_BLOCK) {
   d55ce:	28fe      	cmp	r0, #254	; 0xfe
   d55d0:	d001      	beq.n	d55d6 <_ZN9SdSpiCard8readDataEPhj+0x36>
   d55d2:	2350      	movs	r3, #80	; 0x50
   d55d4:	e007      	b.n	d55e6 <_ZN9SdSpiCard8readDataEPhj+0x46>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
   d55d6:	4632      	mov	r2, r6
   d55d8:	4629      	mov	r1, r5
   d55da:	6860      	ldr	r0, [r4, #4]
   d55dc:	f7ff ff66 	bl	d54ac <_ZN14SdSpiAltDriver7receiveEPhj>
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
   d55e0:	7260      	strb	r0, [r4, #9]
   d55e2:	b130      	cbz	r0, d55f2 <_ZN9SdSpiCard8readDataEPhj+0x52>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d55e4:	2360      	movs	r3, #96	; 0x60
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
   d55e6:	4620      	mov	r0, r4
   d55e8:	7023      	strb	r3, [r4, #0]
   d55ea:	f7ff ffc6 	bl	d557a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d55ee:	2000      	movs	r0, #0
}
   d55f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d55f2:	6860      	ldr	r0, [r4, #4]
   d55f4:	f7ff ff55 	bl	d54a2 <_ZN14SdSpiAltDriver7receiveEv>
   d55f8:	6860      	ldr	r0, [r4, #4]
   d55fa:	f7ff ff52 	bl	d54a2 <_ZN14SdSpiAltDriver7receiveEv>
   d55fe:	2001      	movs	r0, #1
   d5600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5602 <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   d5602:	b570      	push	{r4, r5, r6, lr}
   d5604:	4604      	mov	r4, r0
   d5606:	460e      	mov	r6, r1
   d5608:	f002 fa1e 	bl	d7a48 <HAL_Timer_Get_Milli_Seconds>
   d560c:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   d560e:	4632      	mov	r2, r6
   d5610:	4629      	mov	r1, r5
   d5612:	4620      	mov	r0, r4
   d5614:	f7ff ff7e 	bl	d5514 <_ZN9SdSpiCard10isTimedOutEtt>
   d5618:	b930      	cbnz	r0, d5628 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
   d561a:	6860      	ldr	r0, [r4, #4]
   d561c:	f7ff ff41 	bl	d54a2 <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
   d5620:	28ff      	cmp	r0, #255	; 0xff
   d5622:	d1f4      	bne.n	d560e <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   d5624:	2001      	movs	r0, #1
   d5626:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  return false;
   d5628:	2000      	movs	r0, #0
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   d562a:	bd70      	pop	{r4, r5, r6, pc}

000d562c <_ZN9SdSpiCard11cardCommandEhm>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d562c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_spiActive) {
   d562e:	7a03      	ldrb	r3, [r0, #8]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d5630:	9201      	str	r2, [sp, #4]
   d5632:	4604      	mov	r4, r0
   d5634:	460d      	mov	r5, r1
  // select card
  if (!m_spiActive) {
   d5636:	b90b      	cbnz	r3, d563c <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   d5638:	f7ff ff90 	bl	d555c <_ZN9SdSpiCard8spiStartEv>
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
   d563c:	b125      	cbz	r5, d5648 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
   d563e:	f44f 7196 	mov.w	r1, #300	; 0x12c
   d5642:	4620      	mov	r0, r4
   d5644:	f7ff ffdd 	bl	d5602 <_ZN9SdSpiCard11waitNotBusyEt>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d5648:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   d564c:	6860      	ldr	r0, [r4, #4]
   d564e:	f7ff ff43 	bl	d54d8 <_ZN14SdSpiAltDriver4sendEh>
   d5652:	f10d 0607 	add.w	r6, sp, #7
   d5656:	f10d 0703 	add.w	r7, sp, #3
   d565a:	f816 1901 	ldrb.w	r1, [r6], #-1
   d565e:	6860      	ldr	r0, [r4, #4]
   d5660:	f7ff ff3a 	bl	d54d8 <_ZN14SdSpiAltDriver4sendEh>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
   d5664:	42be      	cmp	r6, r7
   d5666:	d1f8      	bne.n	d565a <_ZN9SdSpiCard11cardCommandEhm+0x2e>
    spiSend(pa[i]);
  }
  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   d5668:	2d00      	cmp	r5, #0
   d566a:	bf0c      	ite	eq
   d566c:	2195      	moveq	r1, #149	; 0x95
   d566e:	2187      	movne	r1, #135	; 0x87
   d5670:	6860      	ldr	r0, [r4, #4]
   d5672:	f7ff ff31 	bl	d54d8 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d5676:	6860      	ldr	r0, [r4, #4]
   d5678:	f7ff ff13 	bl	d54a2 <_ZN14SdSpiAltDriver7receiveEv>
   d567c:	250b      	movs	r5, #11
   d567e:	6860      	ldr	r0, [r4, #4]
   d5680:	f7ff ff0f 	bl	d54a2 <_ZN14SdSpiAltDriver7receiveEv>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   d5684:	0603      	lsls	r3, r0, #24
   d5686:	7260      	strb	r0, [r4, #9]
   d5688:	d503      	bpl.n	d5692 <_ZN9SdSpiCard11cardCommandEhm+0x66>
   d568a:	3d01      	subs	r5, #1
   d568c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d5690:	d1f5      	bne.n	d567e <_ZN9SdSpiCard11cardCommandEhm+0x52>
  }
  return m_status;
}
   d5692:	b003      	add	sp, #12
   d5694:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5696 <_ZN9SdSpiCard8cardAcmdEhm>:
  /** Set CS high and deactivate the card. */
  void spiStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   d5696:	b570      	push	{r4, r5, r6, lr}
   d5698:	4604      	mov	r4, r0
   d569a:	460d      	mov	r5, r1
   d569c:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   d569e:	2137      	movs	r1, #55	; 0x37
   d56a0:	2200      	movs	r2, #0
   d56a2:	f7ff ffc3 	bl	d562c <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   d56a6:	4632      	mov	r2, r6
   d56a8:	4629      	mov	r1, r5
   d56aa:	4620      	mov	r0, r4
  }
   d56ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
   d56b0:	f7ff bfbc 	b.w	d562c <_ZN9SdSpiCard11cardCommandEhm>

000d56b4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d56b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   d56b8:	2500      	movs	r5, #0
   d56ba:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   d56bc:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   d56be:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   d56c0:	6041      	str	r1, [r0, #4]
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d56c2:	4604      	mov	r4, r0
   d56c4:	4690      	mov	r8, r2
   d56c6:	461e      	mov	r6, r3
   d56c8:	f002 f9be 	bl	d7a48 <HAL_Timer_Get_Milli_Seconds>
  m_type = 0;
  m_spiDriver = spi;
  uint16_t t0 = curTimeMS();
  uint32_t arg;

  m_spiDriver->begin(csPin);
   d56cc:	4641      	mov	r1, r8
   d56ce:	4607      	mov	r7, r0
   d56d0:	6860      	ldr	r0, [r4, #4]
   d56d2:	f7ff fed3 	bl	d547c <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   d56d6:	6863      	ldr	r3, [r4, #4]
    SPI_CLK_CORE = 72*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d56d8:	4a4f      	ldr	r2, [pc, #316]	; (d5818 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x164>)
   d56da:	721d      	strb	r5, [r3, #8]
   d56dc:	f04f 0801 	mov.w	r8, #1
   d56e0:	60da      	str	r2, [r3, #12]
   d56e2:	745d      	strb	r5, [r3, #17]
   d56e4:	f883 8010 	strb.w	r8, [r3, #16]
  spiStart();
   d56e8:	4620      	mov	r0, r4
   d56ea:	f7ff ff37 	bl	d555c <_ZN9SdSpiCard8spiStartEv>
   d56ee:	6863      	ldr	r3, [r4, #4]
   d56f0:	4641      	mov	r1, r8
   d56f2:	7d18      	ldrb	r0, [r3, #20]
   d56f4:	f004 fbe9 	bl	d9eca <digitalWrite>
   d56f8:	250a      	movs	r5, #10
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d56fa:	21ff      	movs	r1, #255	; 0xff
   d56fc:	6860      	ldr	r0, [r4, #4]
   d56fe:	3d01      	subs	r5, #1
   d5700:	f7ff feea 	bl	d54d8 <_ZN14SdSpiAltDriver4sendEh>

  // must supply min of 74 clock cycles with CS high.
  spiUnselect();
  for (uint8_t i = 0; i < 10; i++) {
   d5704:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d5708:	d1f7      	bne.n	d56fa <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x46>
   d570a:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d570c:	4629      	mov	r1, r5
   d570e:	7d18      	ldrb	r0, [r3, #20]
   d5710:	f004 fbdb 	bl	d9eca <digitalWrite>
   d5714:	250a      	movs	r5, #10

  DBG_BEGIN_TIME(DBG_CMD0_TIME);
  // command to go idle in SPI mode
  for (uint8_t i = 1;; i++) {
    DBG_EVENT_COUNT(DBG_CMD0_COUNT);
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   d5716:	2200      	movs	r2, #0
   d5718:	4611      	mov	r1, r2
   d571a:	4620      	mov	r0, r4
   d571c:	f7ff ff86 	bl	d562c <_ZN9SdSpiCard11cardCommandEhm>
   d5720:	2801      	cmp	r0, #1
   d5722:	4680      	mov	r8, r0
   d5724:	d012      	beq.n	d574c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x98>
   d5726:	3d01      	subs	r5, #1
      break;
    }
    if (i == SD_CMD0_RETRY) {
   d5728:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d572c:	d101      	bne.n	d5732 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x7e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d572e:	2320      	movs	r3, #32
   d5730:	e057      	b.n	d57e2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d5732:	21fd      	movs	r1, #253	; 0xfd
   d5734:	6860      	ldr	r0, [r4, #4]
   d5736:	f7ff fecf 	bl	d54d8 <_ZN14SdSpiAltDriver4sendEh>
   d573a:	f44f 7802 	mov.w	r8, #520	; 0x208
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d573e:	6860      	ldr	r0, [r4, #4]
   d5740:	f7ff feaf 	bl	d54a2 <_ZN14SdSpiAltDriver7receiveEv>
      goto fail;
    }
    // stop multi-block write
    spiSend(STOP_TRAN_TOKEN);
    // finish block transfer
    for (int i = 0; i < 520; i++) {
   d5744:	f1b8 0801 	subs.w	r8, r8, #1
   d5748:	d1f9      	bne.n	d573e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x8a>
   d574a:	e7e4      	b.n	d5716 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x62>
    error(SD_CARD_ERROR_CMD59);
    goto fail;
  }
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   d574c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   d5750:	2108      	movs	r1, #8
   d5752:	4620      	mov	r0, r4
   d5754:	f7ff ff6a 	bl	d562c <_ZN9SdSpiCard11cardCommandEhm>
   d5758:	2805      	cmp	r0, #5
   d575a:	d102      	bne.n	d5762 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xae>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d575c:	f884 800a 	strb.w	r8, [r4, #10]
   d5760:	e00f      	b.n	d5782 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
   d5762:	2504      	movs	r5, #4
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d5764:	6860      	ldr	r0, [r4, #4]
   d5766:	f7ff fe9c 	bl	d54a2 <_ZN14SdSpiAltDriver7receiveEv>
   d576a:	3d01      	subs	r5, #1
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d576c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   d5770:	7260      	strb	r0, [r4, #9]
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d5772:	d1f7      	bne.n	d5764 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xb0>
      m_status = spiReceive();
    }
    if (m_status == 0XAA) {
   d5774:	28aa      	cmp	r0, #170	; 0xaa
   d5776:	d102      	bne.n	d577e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xca>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d5778:	2302      	movs	r3, #2
   d577a:	72a3      	strb	r3, [r4, #10]
   d577c:	e001      	b.n	d5782 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d577e:	2325      	movs	r3, #37	; 0x25
   d5780:	e02f      	b.n	d57e2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   d5782:	7aa3      	ldrb	r3, [r4, #10]
   d5784:	2b02      	cmp	r3, #2
   d5786:	bf0c      	ite	eq
   d5788:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
   d578c:	2500      	movne	r5, #0
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d578e:	b2bf      	uxth	r7, r7
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   d5790:	462a      	mov	r2, r5
   d5792:	2129      	movs	r1, #41	; 0x29
   d5794:	4620      	mov	r0, r4
   d5796:	f7ff ff7e 	bl	d5696 <_ZN9SdSpiCard8cardAcmdEhm>
   d579a:	4602      	mov	r2, r0
   d579c:	b148      	cbz	r0, d57b2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xfe>
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d579e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   d57a2:	4639      	mov	r1, r7
   d57a4:	4620      	mov	r0, r4
   d57a6:	f7ff feb5 	bl	d5514 <_ZN9SdSpiCard10isTimedOutEtt>
   d57aa:	2800      	cmp	r0, #0
   d57ac:	d0f0      	beq.n	d5790 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xdc>
   d57ae:	2343      	movs	r3, #67	; 0x43
   d57b0:	e017      	b.n	d57e2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      goto fail;
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
   d57b2:	7aa3      	ldrb	r3, [r4, #10]
   d57b4:	2b02      	cmp	r3, #2
   d57b6:	d00e      	beq.n	d57d6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x122>
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
    }
  }
  spiStop();
   d57b8:	4620      	mov	r0, r4
   d57ba:	f7ff fede 	bl	d557a <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   d57be:	6863      	ldr	r3, [r4, #4]
   d57c0:	68b0      	ldr	r0, [r6, #8]
   d57c2:	7934      	ldrb	r4, [r6, #4]
   d57c4:	7b31      	ldrb	r1, [r6, #12]
   d57c6:	7b72      	ldrb	r2, [r6, #13]
   d57c8:	745a      	strb	r2, [r3, #17]
   d57ca:	60d8      	str	r0, [r3, #12]
   d57cc:	721c      	strb	r4, [r3, #8]
   d57ce:	7419      	strb	r1, [r3, #16]
  return true;
   d57d0:	2001      	movs	r0, #1
   d57d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
   d57d6:	213a      	movs	r1, #58	; 0x3a
   d57d8:	4620      	mov	r0, r4
   d57da:	f7ff ff27 	bl	d562c <_ZN9SdSpiCard11cardCommandEhm>
   d57de:	b138      	cbz	r0, d57f0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x13c>
   d57e0:	2337      	movs	r3, #55	; 0x37
  spiStop();
  m_spiDriver->setSpiSettings(settings);
  return true;

fail:
  spiStop();
   d57e2:	4620      	mov	r0, r4
   d57e4:	7023      	strb	r3, [r4, #0]
   d57e6:	f7ff fec8 	bl	d557a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d57ea:	2000      	movs	r0, #0
}
   d57ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d57f0:	6860      	ldr	r0, [r4, #4]
   d57f2:	f7ff fe56 	bl	d54a2 <_ZN14SdSpiAltDriver7receiveEv>
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
   d57f6:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   d57fa:	28c0      	cmp	r0, #192	; 0xc0
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d57fc:	bf04      	itt	eq
   d57fe:	2303      	moveq	r3, #3
   d5800:	72a3      	strbeq	r3, [r4, #10]
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d5802:	6860      	ldr	r0, [r4, #4]
   d5804:	f7ff fe4d 	bl	d54a2 <_ZN14SdSpiAltDriver7receiveEv>
   d5808:	6860      	ldr	r0, [r4, #4]
   d580a:	f7ff fe4a 	bl	d54a2 <_ZN14SdSpiAltDriver7receiveEv>
   d580e:	6860      	ldr	r0, [r4, #4]
   d5810:	f7ff fe47 	bl	d54a2 <_ZN14SdSpiAltDriver7receiveEv>
   d5814:	e7d0      	b.n	d57b8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x104>
   d5816:	bf00      	nop
   d5818:	0003d090 	.word	0x0003d090

000d581c <_ZN9SdSpiCard9readBlockEmPh>:
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d581c:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d581e:	7a83      	ldrb	r3, [r0, #10]
   d5820:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d5822:	bf18      	it	ne
   d5824:	0249      	lslne	r1, r1, #9
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d5826:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d5828:	460a      	mov	r2, r1
   d582a:	2111      	movs	r1, #17
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d582c:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d582e:	f7ff fefd 	bl	d562c <_ZN9SdSpiCard11cardCommandEhm>
   d5832:	b110      	cbz	r0, d583a <_ZN9SdSpiCard9readBlockEmPh+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d5834:	2330      	movs	r3, #48	; 0x30
   d5836:	7023      	strb	r3, [r4, #0]
   d5838:	e00b      	b.n	d5852 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
   d583a:	4629      	mov	r1, r5
   d583c:	f44f 7200 	mov.w	r2, #512	; 0x200
   d5840:	4620      	mov	r0, r4
   d5842:	f7ff fead 	bl	d55a0 <_ZN9SdSpiCard8readDataEPhj>
   d5846:	4605      	mov	r5, r0
   d5848:	b118      	cbz	r0, d5852 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  spiStop();
   d584a:	4620      	mov	r0, r4
   d584c:	f7ff fe95 	bl	d557a <_ZN9SdSpiCard7spiStopEv>
  return true;
   d5850:	e003      	b.n	d585a <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  spiStop();
   d5852:	4620      	mov	r0, r4
   d5854:	f7ff fe91 	bl	d557a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5858:	2500      	movs	r5, #0
}
   d585a:	4628      	mov	r0, r5
   d585c:	bd38      	pop	{r3, r4, r5, pc}

000d585e <_ZN9SdSpiCard9readStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d585e:	b510      	push	{r4, lr}
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
   d5860:	7a83      	ldrb	r3, [r0, #10]
   d5862:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d5864:	460a      	mov	r2, r1
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d5866:	bf18      	it	ne
   d5868:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD18, blockNumber)) {
   d586a:	2112      	movs	r1, #18
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d586c:	4604      	mov	r4, r0
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD18, blockNumber)) {
   d586e:	f7ff fedd 	bl	d562c <_ZN9SdSpiCard11cardCommandEhm>
   d5872:	b130      	cbz	r0, d5882 <_ZN9SdSpiCard9readStartEm+0x24>
   d5874:	2331      	movs	r3, #49	; 0x31
  }
//  spiStop();
  return true;

fail:
  spiStop();
   d5876:	4620      	mov	r0, r4
   d5878:	7023      	strb	r3, [r4, #0]
   d587a:	f7ff fe7e 	bl	d557a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d587e:	2000      	movs	r0, #0
   d5880:	bd10      	pop	{r4, pc}
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
   d5882:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d5884:	bd10      	pop	{r4, pc}

000d5886 <_ZN9SdSpiCard8readStopEv>:
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d5886:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   d5888:	2200      	movs	r2, #0
   d588a:	210c      	movs	r1, #12
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d588c:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   d588e:	f7ff fecd 	bl	d562c <_ZN9SdSpiCard11cardCommandEhm>
   d5892:	b130      	cbz	r0, d58a2 <_ZN9SdSpiCard8readStopEv+0x1c>
   d5894:	2328      	movs	r3, #40	; 0x28
  }
  spiStop();
  return true;

fail:
  spiStop();
   d5896:	4620      	mov	r0, r4
   d5898:	7023      	strb	r3, [r4, #0]
   d589a:	f7ff fe6e 	bl	d557a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d589e:	2000      	movs	r0, #0
   d58a0:	bd10      	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
   d58a2:	4620      	mov	r0, r4
   d58a4:	f7ff fe69 	bl	d557a <_ZN9SdSpiCard7spiStopEv>
  return true;
   d58a8:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d58aa:	bd10      	pop	{r4, pc}

000d58ac <_ZN9SdSpiCard10readBlocksEmPhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   d58ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d58ae:	4605      	mov	r5, r0
   d58b0:	4616      	mov	r6, r2
   d58b2:	461f      	mov	r7, r3
  if (!readStart(block)) {
   d58b4:	f7ff ffd3 	bl	d585e <_ZN9SdSpiCard9readStartEm>
   d58b8:	b198      	cbz	r0, d58e2 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
   d58ba:	2400      	movs	r4, #0
   d58bc:	b2a3      	uxth	r3, r4
    return false;
  }
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   d58be:	429f      	cmp	r7, r3
   d58c0:	eb06 2144 	add.w	r1, r6, r4, lsl #9
   d58c4:	d908      	bls.n	d58d8 <_ZN9SdSpiCard10readBlocksEmPhj+0x2c>
    if (!readData(dst, 512)) {
   d58c6:	f44f 7200 	mov.w	r2, #512	; 0x200
   d58ca:	4628      	mov	r0, r5
   d58cc:	f7ff fe68 	bl	d55a0 <_ZN9SdSpiCard8readDataEPhj>
   d58d0:	3401      	adds	r4, #1
   d58d2:	2800      	cmp	r0, #0
   d58d4:	d1f2      	bne.n	d58bc <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
   d58d6:	e004      	b.n	d58e2 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
      return false;
    }
  }
  return readStop();
   d58d8:	4628      	mov	r0, r5
}
   d58da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (uint16_t b = 0; b < count; b++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  return readStop();
   d58de:	f7ff bfd2 	b.w	d5886 <_ZN9SdSpiCard8readStopEv>
}
   d58e2:	2000      	movs	r0, #0
   d58e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d58e6 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   d58e6:	b538      	push	{r3, r4, r5, lr}
   d58e8:	4604      	mov	r4, r0
   d58ea:	4615      	mov	r5, r2
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d58ec:	6840      	ldr	r0, [r0, #4]
   d58ee:	f7ff fdf3 	bl	d54d8 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   d58f2:	f44f 7200 	mov.w	r2, #512	; 0x200
   d58f6:	4629      	mov	r1, r5
   d58f8:	6860      	ldr	r0, [r4, #4]
   d58fa:	f7ff fdf1 	bl	d54e0 <_ZN14SdSpiAltDriver4sendEPKhj>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d58fe:	21ff      	movs	r1, #255	; 0xff
   d5900:	6860      	ldr	r0, [r4, #4]
   d5902:	f7ff fde9 	bl	d54d8 <_ZN14SdSpiAltDriver4sendEh>
   d5906:	21ff      	movs	r1, #255	; 0xff
   d5908:	6860      	ldr	r0, [r4, #4]
   d590a:	f7ff fde5 	bl	d54d8 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d590e:	6860      	ldr	r0, [r4, #4]
   d5910:	f7ff fdc7 	bl	d54a2 <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
   d5914:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   d5916:	f000 001f 	and.w	r0, r0, #31
   d591a:	2805      	cmp	r0, #5
   d591c:	d006      	beq.n	d592c <_ZN9SdSpiCard9writeDataEhPKh+0x46>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d591e:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   d5920:	4620      	mov	r0, r4
   d5922:	7023      	strb	r3, [r4, #0]
   d5924:	f7ff fe29 	bl	d557a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5928:	2000      	movs	r0, #0
   d592a:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
   d592c:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d592e:	bd38      	pop	{r3, r4, r5, pc}

000d5930 <_ZN9SdSpiCard10writeBlockEmPKh>:
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d5930:	b570      	push	{r4, r5, r6, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d5932:	7a83      	ldrb	r3, [r0, #10]
   d5934:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d5936:	bf18      	it	ne
   d5938:	0249      	lslne	r1, r1, #9
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d593a:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d593c:	460a      	mov	r2, r1
   d593e:	2118      	movs	r1, #24
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d5940:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d5942:	f7ff fe73 	bl	d562c <_ZN9SdSpiCard11cardCommandEhm>
   d5946:	4606      	mov	r6, r0
   d5948:	b108      	cbz	r0, d594e <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
   d594a:	2332      	movs	r3, #50	; 0x32
   d594c:	e01d      	b.n	d598a <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
   d594e:	462a      	mov	r2, r5
   d5950:	21fe      	movs	r1, #254	; 0xfe
   d5952:	4620      	mov	r0, r4
   d5954:	f7ff ffc7 	bl	d58e6 <_ZN9SdSpiCard9writeDataEhPKh>
   d5958:	b1c0      	cbz	r0, d598c <_ZN9SdSpiCard10writeBlockEmPKh+0x5c>


#if CHECK_FLASH_PROGRAMMING
  // wait for flash programming to complete
  DBG_BEGIN_TIME(DBG_WRITE_FLASH);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d595a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d595e:	4620      	mov	r0, r4
   d5960:	f7ff fe4f 	bl	d5602 <_ZN9SdSpiCard11waitNotBusyEt>
   d5964:	4605      	mov	r5, r0
   d5966:	b908      	cbnz	r0, d596c <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>
   d5968:	235a      	movs	r3, #90	; 0x5a
   d596a:	e00e      	b.n	d598a <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_FLASH_PROGRAMMING);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_FLASH);
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiReceive()) {
   d596c:	4632      	mov	r2, r6
   d596e:	210d      	movs	r1, #13
   d5970:	4620      	mov	r0, r4
   d5972:	f7ff fe5b 	bl	d562c <_ZN9SdSpiCard11cardCommandEhm>
   d5976:	b938      	cbnz	r0, d5988 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d5978:	6860      	ldr	r0, [r4, #4]
   d597a:	f7ff fd92 	bl	d54a2 <_ZN14SdSpiAltDriver7receiveEv>
   d597e:	b918      	cbnz	r0, d5988 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
    error(SD_CARD_ERROR_CMD13);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  spiStop();
   d5980:	4620      	mov	r0, r4
   d5982:	f7ff fdfa 	bl	d557a <_ZN9SdSpiCard7spiStopEv>
  return true;
   d5986:	e005      	b.n	d5994 <_ZN9SdSpiCard10writeBlockEmPKh+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d5988:	2329      	movs	r3, #41	; 0x29
   d598a:	7023      	strb	r3, [r4, #0]

fail:
  spiStop();
   d598c:	4620      	mov	r0, r4
   d598e:	f7ff fdf4 	bl	d557a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5992:	2500      	movs	r5, #0
}
   d5994:	4628      	mov	r0, r5
   d5996:	bd70      	pop	{r4, r5, r6, pc}

000d5998 <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d5998:	b538      	push	{r3, r4, r5, lr}
   d599a:	460d      	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d599c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d59a0:	4604      	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d59a2:	f7ff fe2e 	bl	d5602 <_ZN9SdSpiCard11waitNotBusyEt>
   d59a6:	b910      	cbnz	r0, d59ae <_ZN9SdSpiCard9writeDataEPKh+0x16>
   d59a8:	235b      	movs	r3, #91	; 0x5b
   d59aa:	7023      	strb	r3, [r4, #0]
   d59ac:	e005      	b.n	d59ba <_ZN9SdSpiCard9writeDataEPKh+0x22>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   d59ae:	462a      	mov	r2, r5
   d59b0:	21fc      	movs	r1, #252	; 0xfc
   d59b2:	4620      	mov	r0, r4
   d59b4:	f7ff ff97 	bl	d58e6 <_ZN9SdSpiCard9writeDataEhPKh>
   d59b8:	b918      	cbnz	r0, d59c2 <_ZN9SdSpiCard9writeDataEPKh+0x2a>
    goto fail;
  }
  return true;

fail:
  spiStop();
   d59ba:	4620      	mov	r0, r4
   d59bc:	f7ff fddd 	bl	d557a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d59c0:	2000      	movs	r0, #0
}
   d59c2:	bd38      	pop	{r3, r4, r5, pc}

000d59c4 <_ZN9SdSpiCard10writeStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d59c4:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d59c6:	7a83      	ldrb	r3, [r0, #10]
   d59c8:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d59ca:	460a      	mov	r2, r1
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d59cc:	bf18      	it	ne
   d59ce:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   d59d0:	2119      	movs	r1, #25
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d59d2:	4604      	mov	r4, r0
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
   d59d4:	f7ff fe2a 	bl	d562c <_ZN9SdSpiCard11cardCommandEhm>
   d59d8:	b130      	cbz	r0, d59e8 <_ZN9SdSpiCard10writeStartEm+0x24>
   d59da:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   d59dc:	4620      	mov	r0, r4
   d59de:	7023      	strb	r3, [r4, #0]
   d59e0:	f7ff fdcb 	bl	d557a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d59e4:	2000      	movs	r0, #0
   d59e6:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
   d59e8:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d59ea:	bd10      	pop	{r4, pc}

000d59ec <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d59ec:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d59ee:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d59f2:	4604      	mov	r4, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d59f4:	f7ff fe05 	bl	d5602 <_ZN9SdSpiCard11waitNotBusyEt>
   d59f8:	4605      	mov	r5, r0
   d59fa:	b120      	cbz	r0, d5a06 <_ZN9SdSpiCard9writeStopEv+0x1a>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d59fc:	21fd      	movs	r1, #253	; 0xfd
   d59fe:	6860      	ldr	r0, [r4, #4]
   d5a00:	f7ff fd6a 	bl	d54d8 <_ZN14SdSpiAltDriver4sendEh>
   d5a04:	e001      	b.n	d5a0a <_ZN9SdSpiCard9writeStopEv+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d5a06:	2356      	movs	r3, #86	; 0x56
   d5a08:	7023      	strb	r3, [r4, #0]
  spiStop();
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
   d5a0a:	4620      	mov	r0, r4
   d5a0c:	f7ff fdb5 	bl	d557a <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d5a10:	4628      	mov	r0, r5
   d5a12:	bd38      	pop	{r3, r4, r5, pc}

000d5a14 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   d5a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5a16:	4605      	mov	r5, r0
   d5a18:	4616      	mov	r6, r2
   d5a1a:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   d5a1c:	f7ff ffd2 	bl	d59c4 <_ZN9SdSpiCard10writeStartEm>
   d5a20:	b170      	cbz	r0, d5a40 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
   d5a22:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d5a24:	42bc      	cmp	r4, r7
   d5a26:	eb06 2144 	add.w	r1, r6, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d5a2a:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d5a2c:	d004      	beq.n	d5a38 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   d5a2e:	f7ff ffb3 	bl	d5998 <_ZN9SdSpiCard9writeDataEPKh>
   d5a32:	b128      	cbz	r0, d5a40 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d5a34:	3401      	adds	r4, #1
   d5a36:	e7f5      	b.n	d5a24 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
  return writeStop();

 fail:
  spiStop();
  return false;
}
   d5a38:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d5a3c:	f7ff bfd6 	b.w	d59ec <_ZN9SdSpiCard9writeStopEv>

 fail:
  spiStop();
   d5a40:	4628      	mov	r0, r5
   d5a42:	f7ff fd9a 	bl	d557a <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d5a46:	2000      	movs	r0, #0
   d5a48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5a4a <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
   d5a4a:	f002 b875 	b.w	d7b38 <HAL_Pin_Map>

000d5a4e <_GLOBAL__sub_I__ZN11SdSpiCardEX9readBlockEmPh>:
   d5a4e:	f002 b873 	b.w	d7b38 <HAL_Pin_Map>

000d5a52 <_GLOBAL__sub_I__ZN10SdioCardEX9readBlockEmPh>:
   d5a52:	f002 b871 	b.w	d7b38 <HAL_Pin_Map>

000d5a56 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d5a56:	b570      	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   d5a58:	7803      	ldrb	r3, [r0, #0]
   d5a5a:	07da      	lsls	r2, r3, #31
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d5a5c:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   d5a5e:	d51e      	bpl.n	d5a9e <_ZN8FatCache4syncEv+0x48>
   d5a60:	6843      	ldr	r3, [r0, #4]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d5a62:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   d5a64:	f100 060c 	add.w	r6, r0, #12
   d5a68:	4632      	mov	r2, r6
   d5a6a:	6818      	ldr	r0, [r3, #0]
   d5a6c:	f7ff ff60 	bl	d5930 <_ZN9SdSpiCard10writeBlockEmPKh>
   d5a70:	4605      	mov	r5, r0
   d5a72:	b908      	cbnz	r0, d5a78 <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   d5a74:	2500      	movs	r5, #0
   d5a76:	e013      	b.n	d5aa0 <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   d5a78:	7823      	ldrb	r3, [r4, #0]
   d5a7a:	079b      	lsls	r3, r3, #30
   d5a7c:	d404      	bmi.n	d5a88 <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
   d5a7e:	7823      	ldrb	r3, [r4, #0]
   d5a80:	f023 0301 	bic.w	r3, r3, #1
   d5a84:	7023      	strb	r3, [r4, #0]
   d5a86:	e00b      	b.n	d5aa0 <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   d5a88:	6863      	ldr	r3, [r4, #4]
   d5a8a:	68a0      	ldr	r0, [r4, #8]
   d5a8c:	6919      	ldr	r1, [r3, #16]
   d5a8e:	4632      	mov	r2, r6
   d5a90:	4401      	add	r1, r0
   d5a92:	6818      	ldr	r0, [r3, #0]
   d5a94:	f7ff ff4c 	bl	d5930 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   d5a98:	2800      	cmp	r0, #0
   d5a9a:	d1f0      	bne.n	d5a7e <_ZN8FatCache4syncEv+0x28>
   d5a9c:	e7ea      	b.n	d5a74 <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
   d5a9e:	2501      	movs	r5, #1

fail:
  return false;
}
   d5aa0:	4628      	mov	r0, r5
   d5aa2:	bd70      	pop	{r4, r5, r6, pc}

000d5aa4 <_ZN8FatCache4readEmh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d5aa4:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   d5aa6:	6883      	ldr	r3, [r0, #8]
   d5aa8:	428b      	cmp	r3, r1
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d5aaa:	4604      	mov	r4, r0
   d5aac:	460e      	mov	r6, r1
   d5aae:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   d5ab0:	d014      	beq.n	d5adc <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
   d5ab2:	f7ff ffd0 	bl	d5a56 <_ZN8FatCache4syncEv>
   d5ab6:	b908      	cbnz	r0, d5abc <_ZN8FatCache4readEmh+0x18>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:

  return 0;
   d5ab8:	2000      	movs	r0, #0
   d5aba:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
   d5abc:	076b      	lsls	r3, r5, #29
   d5abe:	d503      	bpl.n	d5ac8 <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
   d5ac0:	2300      	movs	r3, #0
   d5ac2:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   d5ac4:	60a6      	str	r6, [r4, #8]
   d5ac6:	e009      	b.n	d5adc <_ZN8FatCache4readEmh+0x38>
   d5ac8:	6863      	ldr	r3, [r4, #4]
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d5aca:	f104 020c 	add.w	r2, r4, #12
   d5ace:	4631      	mov	r1, r6
   d5ad0:	6818      	ldr	r0, [r3, #0]
   d5ad2:	f7ff fea3 	bl	d581c <_ZN9SdSpiCard9readBlockEmPh>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
   d5ad6:	2800      	cmp	r0, #0
   d5ad8:	d1f2      	bne.n	d5ac0 <_ZN8FatCache4readEmh+0x1c>
   d5ada:	e7ed      	b.n	d5ab8 <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
   d5adc:	7823      	ldrb	r3, [r4, #0]
   d5ade:	4620      	mov	r0, r4
   d5ae0:	f005 0503 	and.w	r5, r5, #3
   d5ae4:	431d      	orrs	r5, r3
   d5ae6:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:

  return 0;
}
   d5aea:	bd70      	pop	{r4, r5, r6, pc}

000d5aec <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   d5aec:	b510      	push	{r4, lr}
   d5aee:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d5af0:	3024      	adds	r0, #36	; 0x24
   d5af2:	f7ff ffb0 	bl	d5a56 <_ZN8FatCache4syncEv>
   d5af6:	b128      	cbz	r0, d5b04 <_ZN9FatVolume9cacheSyncEv+0x18>
   d5af8:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   d5afc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d5b00:	f7ff bfa9 	b.w	d5a56 <_ZN8FatCache4syncEv>
  }
   d5b04:	bd10      	pop	{r4, pc}

000d5b06 <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   d5b06:	7983      	ldrb	r3, [r0, #6]
   d5b08:	6940      	ldr	r0, [r0, #20]
   d5b0a:	3902      	subs	r1, #2
   d5b0c:	4099      	lsls	r1, r3
}
   d5b0e:	4408      	add	r0, r1
   d5b10:	4770      	bx	lr

000d5b12 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5b12:	2901      	cmp	r1, #1
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   d5b14:	b570      	push	{r4, r5, r6, lr}
   d5b16:	4605      	mov	r5, r0
   d5b18:	460c      	mov	r4, r1
   d5b1a:	4616      	mov	r6, r2
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5b1c:	d802      	bhi.n	d5b24 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   d5b1e:	f04f 30ff 	mov.w	r0, #4294967295
   d5b22:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5b24:	69c3      	ldr	r3, [r0, #28]
   d5b26:	4299      	cmp	r1, r3
   d5b28:	d8f9      	bhi.n	d5b1e <_ZN9FatVolume6fatGetEmPm+0xc>
   d5b2a:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d5b2c:	2b20      	cmp	r3, #32
   d5b2e:	d110      	bne.n	d5b52 <_ZN9FatVolume6fatGetEmPm+0x40>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
   d5b30:	6981      	ldr	r1, [r0, #24]
   d5b32:	2202      	movs	r2, #2
   d5b34:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d5b38:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d5b3c:	f7ff ffb2 	bl	d5aa4 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d5b40:	2800      	cmp	r0, #0
   d5b42:	d0ec      	beq.n	d5b1e <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   d5b44:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d5b48:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   d5b4c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
   d5b50:	e00f      	b.n	d5b72 <_ZN9FatVolume6fatGetEmPm+0x60>
  }
  if (fatType() == 16) {
   d5b52:	2b10      	cmp	r3, #16
   d5b54:	d1e3      	bne.n	d5b1e <_ZN9FatVolume6fatGetEmPm+0xc>
   d5b56:	6983      	ldr	r3, [r0, #24]
   d5b58:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d5b5c:	2202      	movs	r2, #2
   d5b5e:	4419      	add	r1, r3
   d5b60:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d5b64:	f7ff ff9e 	bl	d5aa4 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d5b68:	2800      	cmp	r0, #0
   d5b6a:	d0d8      	beq.n	d5b1e <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
   d5b6c:	b2e4      	uxtb	r4, r4
   d5b6e:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
   d5b72:	69ea      	ldr	r2, [r5, #28]
   d5b74:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
   d5b76:	bf9a      	itte	ls
   d5b78:	6033      	strls	r3, [r6, #0]
  return 1;
   d5b7a:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
   d5b7c:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
   d5b7e:	bd70      	pop	{r4, r5, r6, pc}

000d5b80 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5b80:	2901      	cmp	r1, #1
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   d5b82:	b538      	push	{r3, r4, r5, lr}
   d5b84:	460c      	mov	r4, r1
   d5b86:	4615      	mov	r5, r2
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5b88:	d801      	bhi.n	d5b8e <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   d5b8a:	2000      	movs	r0, #0
   d5b8c:	bd38      	pop	{r3, r4, r5, pc}
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5b8e:	69c3      	ldr	r3, [r0, #28]
   d5b90:	4299      	cmp	r1, r3
   d5b92:	d8fa      	bhi.n	d5b8a <_ZN9FatVolume6fatPutEmm+0xa>
   d5b94:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d5b96:	2b20      	cmp	r3, #32
   d5b98:	d10e      	bne.n	d5bb8 <_ZN9FatVolume6fatPutEmm+0x38>
   d5b9a:	6981      	ldr	r1, [r0, #24]
   d5b9c:	2203      	movs	r2, #3
   d5b9e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d5ba2:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d5ba6:	f7ff ff7d 	bl	d5aa4 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d5baa:	2800      	cmp	r0, #0
   d5bac:	d0ed      	beq.n	d5b8a <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
   d5bae:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d5bb2:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
   d5bb6:	e00f      	b.n	d5bd8 <_ZN9FatVolume6fatPutEmm+0x58>
    return true;
  }

  if (fatType() == 16) {
   d5bb8:	2b10      	cmp	r3, #16
   d5bba:	d1e6      	bne.n	d5b8a <_ZN9FatVolume6fatPutEmm+0xa>
   d5bbc:	6983      	ldr	r3, [r0, #24]
   d5bbe:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d5bc2:	2203      	movs	r2, #3
   d5bc4:	4419      	add	r1, r3
   d5bc6:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d5bca:	f7ff ff6b 	bl	d5aa4 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d5bce:	2800      	cmp	r0, #0
   d5bd0:	d0db      	beq.n	d5b8a <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
   d5bd2:	b2e4      	uxtb	r4, r4
   d5bd4:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
   d5bd8:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
   d5bda:	bd38      	pop	{r3, r4, r5, pc}

000d5bdc <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d5bdc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d5be0:	68c4      	ldr	r4, [r0, #12]
   d5be2:	428c      	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d5be4:	4605      	mov	r5, r0
   d5be6:	460e      	mov	r6, r1
   d5be8:	4690      	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d5bea:	d207      	bcs.n	d5bfc <_ZN9FatVolume15allocateClusterEmPm+0x20>
   d5bec:	460c      	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
   d5bee:	2700      	movs	r7, #0
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
   d5bf0:	69eb      	ldr	r3, [r5, #28]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
   d5bf2:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   d5bf4:	429c      	cmp	r4, r3
   d5bf6:	d903      	bls.n	d5c00 <_ZN9FatVolume15allocateClusterEmPm+0x24>
      if (setStart) {
   d5bf8:	b9cf      	cbnz	r7, d5c2e <_ZN9FatVolume15allocateClusterEmPm+0x52>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
   d5bfa:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
   d5bfc:	2701      	movs	r7, #1
   d5bfe:	e7f7      	b.n	d5bf0 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      continue;
    }
    if (find == current) {
   d5c00:	42a6      	cmp	r6, r4
   d5c02:	d014      	beq.n	d5c2e <_ZN9FatVolume15allocateClusterEmPm+0x52>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
   d5c04:	aa01      	add	r2, sp, #4
   d5c06:	4621      	mov	r1, r4
   d5c08:	4628      	mov	r0, r5
   d5c0a:	f7ff ff82 	bl	d5b12 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d5c0e:	2800      	cmp	r0, #0
   d5c10:	db0d      	blt.n	d5c2e <_ZN9FatVolume15allocateClusterEmPm+0x52>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
   d5c12:	d0ed      	beq.n	d5bf0 <_ZN9FatVolume15allocateClusterEmPm+0x14>
   d5c14:	9b01      	ldr	r3, [sp, #4]
   d5c16:	2b00      	cmp	r3, #0
   d5c18:	d1ea      	bne.n	d5bf0 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      break;
    }
  }
  if (setStart) {
   d5c1a:	b107      	cbz	r7, d5c1e <_ZN9FatVolume15allocateClusterEmPm+0x42>
    m_allocSearchStart = find;
   d5c1c:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   d5c1e:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   d5c22:	4621      	mov	r1, r4
   d5c24:	4628      	mov	r0, r5
   d5c26:	f7ff ffab 	bl	d5b80 <_ZN9FatVolume6fatPutEmm>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
   d5c2a:	4607      	mov	r7, r0
   d5c2c:	b908      	cbnz	r0, d5c32 <_ZN9FatVolume15allocateClusterEmPm+0x56>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
   d5c2e:	2700      	movs	r7, #0
   d5c30:	e00b      	b.n	d5c4a <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
   d5c32:	b916      	cbnz	r6, d5c3a <_ZN9FatVolume15allocateClusterEmPm+0x5e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
   d5c34:	f8c8 4000 	str.w	r4, [r8]
  return true;
   d5c38:	e007      	b.n	d5c4a <_ZN9FatVolume15allocateClusterEmPm+0x6e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
   d5c3a:	4622      	mov	r2, r4
   d5c3c:	4631      	mov	r1, r6
   d5c3e:	4628      	mov	r0, r5
   d5c40:	f7ff ff9e 	bl	d5b80 <_ZN9FatVolume6fatPutEmm>
   d5c44:	2800      	cmp	r0, #0
   d5c46:	d1f5      	bne.n	d5c34 <_ZN9FatVolume15allocateClusterEmPm+0x58>
   d5c48:	e7f1      	b.n	d5c2e <_ZN9FatVolume15allocateClusterEmPm+0x52>
  *next = find;
  return true;

fail:
  return false;
}
   d5c4a:	4638      	mov	r0, r7
   d5c4c:	b002      	add	sp, #8
   d5c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5c52 <_ZN9FatVolume9freeChainEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   d5c52:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5c54:	4605      	mov	r5, r0
   d5c56:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   d5c58:	aa01      	add	r2, sp, #4
   d5c5a:	4621      	mov	r1, r4
   d5c5c:	4628      	mov	r0, r5
   d5c5e:	f7ff ff58 	bl	d5b12 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d5c62:	1e06      	subs	r6, r0, #0
   d5c64:	da01      	bge.n	d5c6a <_ZN9FatVolume9freeChainEm+0x18>
  } while (fg);

  return true;

fail:
  return false;
   d5c66:	2000      	movs	r0, #0
   d5c68:	e00f      	b.n	d5c8a <_ZN9FatVolume9freeChainEm+0x38>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   d5c6a:	2200      	movs	r2, #0
   d5c6c:	4621      	mov	r1, r4
   d5c6e:	4628      	mov	r0, r5
   d5c70:	f7ff ff86 	bl	d5b80 <_ZN9FatVolume6fatPutEmm>
   d5c74:	2800      	cmp	r0, #0
   d5c76:	d0f6      	beq.n	d5c66 <_ZN9FatVolume9freeChainEm+0x14>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   d5c78:	68eb      	ldr	r3, [r5, #12]
   d5c7a:	429c      	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
   d5c7c:	bf9c      	itt	ls
   d5c7e:	f104 34ff 	addls.w	r4, r4, #4294967295
   d5c82:	60ec      	strls	r4, [r5, #12]
    }
    cluster = next;
   d5c84:	9c01      	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
   d5c86:	2e00      	cmp	r6, #0
   d5c88:	d1e6      	bne.n	d5c58 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   d5c8a:	b002      	add	sp, #8
   d5c8c:	bd70      	pop	{r4, r5, r6, pc}

000d5c8e <_ZN9FatVolume4initEh>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d5c8e:	b570      	push	{r4, r5, r6, lr}
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   d5c90:	2301      	movs	r3, #1

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d5c92:	4604      	mov	r4, r0
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d5c94:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   d5c96:	60c3      	str	r3, [r0, #12]
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d5c98:	f04f 33ff 	mov.w	r3, #4294967295
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d5c9c:	71c2      	strb	r2, [r0, #7]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   d5c9e:	460d      	mov	r5, r1
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d5ca0:	62a0      	str	r0, [r4, #40]	; 0x28
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d5ca2:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d5ca6:	62c3      	str	r3, [r0, #44]	; 0x2c
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d5ca8:	f8c4 0234 	str.w	r0, [r4, #564]	; 0x234
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d5cac:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   d5cb0:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
   d5cb4:	b1a1      	cbz	r1, d5ce0 <_ZN9FatVolume4initEh+0x52>
    if (part > 4) {
   d5cb6:	2904      	cmp	r1, #4
   d5cb8:	d85d      	bhi.n	d5d76 <_ZN9FatVolume4initEh+0xe8>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5cba:	4611      	mov	r1, r2
   d5cbc:	3024      	adds	r0, #36	; 0x24
   d5cbe:	f7ff fef1 	bl	d5aa4 <_ZN8FatCache4readEmh>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc = cacheFetchData(0, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d5cc2:	2800      	cmp	r0, #0
   d5cc4:	d057      	beq.n	d5d76 <_ZN9FatVolume4initEh+0xe8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    part_t* p = &pc->mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   d5cc6:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   d5cca:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   d5cce:	065b      	lsls	r3, r3, #25
   d5cd0:	d151      	bne.n	d5d76 <_ZN9FatVolume4initEh+0xe8>
   d5cd2:	351b      	adds	r5, #27
   d5cd4:	eb00 1505 	add.w	r5, r0, r5, lsl #4
   d5cd8:	f8d5 5006 	ldr.w	r5, [r5, #6]
   d5cdc:	2d00      	cmp	r5, #0
   d5cde:	d04a      	beq.n	d5d76 <_ZN9FatVolume4initEh+0xe8>
   d5ce0:	2200      	movs	r2, #0
   d5ce2:	4629      	mov	r1, r5
   d5ce4:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d5ce8:	f7ff fedc 	bl	d5aa4 <_ZN8FatCache4readEmh>
      goto fail;
    }
    volumeStartBlock = p->firstSector;
  }
  pc = cacheFetchData(volumeStartBlock, FatCache::CACHE_FOR_READ);
  if (!pc) {
   d5cec:	2800      	cmp	r0, #0
   d5cee:	d042      	beq.n	d5d76 <_ZN9FatVolume4initEh+0xe8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  fbs = &(pc->fbs32);
  if (fbs->bytesPerSector != 512 ||
   d5cf0:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   d5cf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   d5cf8:	d13d      	bne.n	d5d76 <_ZN9FatVolume4initEh+0xe8>
   d5cfa:	7c03      	ldrb	r3, [r0, #16]
   d5cfc:	2b02      	cmp	r3, #2
   d5cfe:	d13a      	bne.n	d5d76 <_ZN9FatVolume4initEh+0xe8>
      fbs->fatCount != 2 ||
   d5d00:	89c3      	ldrh	r3, [r0, #14]
   d5d02:	2b00      	cmp	r3, #0
   d5d04:	d037      	beq.n	d5d76 <_ZN9FatVolume4initEh+0xe8>
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
   d5d06:	7b41      	ldrb	r1, [r0, #13]
   d5d08:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   d5d0a:	1e4b      	subs	r3, r1, #1
   d5d0c:	7163      	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
   d5d0e:	2300      	movs	r3, #0
   d5d10:	71a3      	strb	r3, [r4, #6]
   d5d12:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d5d14:	2301      	movs	r3, #1
   d5d16:	428b      	cmp	r3, r1
   d5d18:	d007      	beq.n	d5d2a <_ZN9FatVolume4initEh+0x9c>
    if (tmp == 0) {
   d5d1a:	3e01      	subs	r6, #1
   d5d1c:	d02b      	beq.n	d5d76 <_ZN9FatVolume4initEh+0xe8>
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d5d1e:	79a2      	ldrb	r2, [r4, #6]
   d5d20:	005b      	lsls	r3, r3, #1
   d5d22:	3201      	adds	r2, #1
   d5d24:	b2db      	uxtb	r3, r3
   d5d26:	71a2      	strb	r2, [r4, #6]
   d5d28:	e7f5      	b.n	d5d16 <_ZN9FatVolume4initEh+0x88>
    if (tmp == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   d5d2a:	8ac2      	ldrh	r2, [r0, #22]
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;
   d5d2c:	b902      	cbnz	r2, d5d30 <_ZN9FatVolume4initEh+0xa2>
   d5d2e:	6a42      	ldr	r2, [r0, #36]	; 0x24
   d5d30:	6122      	str	r2, [r4, #16]

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   d5d32:	89c6      	ldrh	r6, [r0, #14]
   d5d34:	442e      	add	r6, r5
   d5d36:	61a6      	str	r6, [r4, #24]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   d5d38:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   d5d3c:	8123      	strh	r3, [r4, #8]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   d5d3e:	eb06 0142 	add.w	r1, r6, r2, lsl #1
   d5d42:	6221      	str	r1, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   d5d44:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   d5d48:	0152      	lsls	r2, r2, #5
   d5d4a:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
   d5d4e:	eb01 2262 	add.w	r2, r1, r2, asr #9
   d5d52:	6162      	str	r2, [r4, #20]

  // total blocks for FAT16 or FAT32
  totalBlocks = fbs->totalSectors16 ?
   d5d54:	f8b0 3013 	ldrh.w	r3, [r0, #19]
                fbs->totalSectors16 : fbs->totalSectors32;
   d5d58:	b903      	cbnz	r3, d5d5c <_ZN9FatVolume4initEh+0xce>
   d5d5a:	6a03      	ldr	r3, [r0, #32]
  // total data blocks
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   d5d5c:	1aad      	subs	r5, r5, r2
   d5d5e:	442b      	add	r3, r5

  // divide by cluster size to get cluster count
  clusterCount >>= m_clusterSizeShift;
   d5d60:	79a5      	ldrb	r5, [r4, #6]
   d5d62:	fa23 f505 	lsr.w	r5, r3, r5
  m_lastCluster = clusterCount + 1;
   d5d66:	1c6b      	adds	r3, r5, #1
   d5d68:	61e3      	str	r3, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
   d5d6a:	f640 73f4 	movw	r3, #4084	; 0xff4
   d5d6e:	429d      	cmp	r5, r3
   d5d70:	d803      	bhi.n	d5d7a <_ZN9FatVolume4initEh+0xec>
    m_fatType = 12;
   d5d72:	230c      	movs	r3, #12
   d5d74:	71e3      	strb	r3, [r4, #7]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   d5d76:	2000      	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
   d5d78:	bd70      	pop	{r4, r5, r6, pc}
    }
  } else if (clusterCount < 65525) {
   d5d7a:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   d5d7e:	429d      	cmp	r5, r3
    m_fatType = 16;
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
   d5d80:	bf85      	ittet	hi
   d5d82:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   d5d84:	6223      	strhi	r3, [r4, #32]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
   d5d86:	2310      	movls	r3, #16
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
    m_fatType = 32;
   d5d88:	2320      	movhi	r3, #32
   d5d8a:	71e3      	strb	r3, [r4, #7]
  }
  return true;
   d5d8c:	2001      	movs	r0, #1

fail:
  return false;
}
   d5d8e:	bd70      	pop	{r4, r5, r6, pc}

000d5d90 <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
   d5d90:	f001 bed2 	b.w	d7b38 <HAL_Pin_Map>

000d5d94 <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
   d5d94:	f001 bed0 	b.w	d7b38 <HAL_Pin_Map>

000d5d98 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5d98:	b570      	push	{r4, r5, r6, lr}
   d5d9a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5d9c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5d9e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5da0:	b149      	cbz	r1, d5db6 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5da2:	f006 f8a1 	bl	dbee8 <strlen>
   d5da6:	682b      	ldr	r3, [r5, #0]
   d5da8:	4602      	mov	r2, r0
   d5daa:	4621      	mov	r1, r4
   d5dac:	4628      	mov	r0, r5
   d5dae:	68db      	ldr	r3, [r3, #12]
    }
   d5db0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5db4:	4718      	bx	r3
    }
   d5db6:	bd70      	pop	{r4, r5, r6, pc}

000d5db8 <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
   d5db8:	f001 bebe 	b.w	d7b38 <HAL_Pin_Map>

000d5dbc <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d5dbc:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d5dbe:	6901      	ldr	r1, [r0, #16]
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d5dc0:	f043 0304 	orr.w	r3, r3, #4
   d5dc4:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d5dc6:	f100 0210 	add.w	r2, r0, #16
   d5dca:	6880      	ldr	r0, [r0, #8]
   d5dcc:	f7ff bf06 	b.w	d5bdc <_ZN9FatVolume15allocateClusterEmPm>

000d5dd0 <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d5dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d5dd4:	7803      	ldrb	r3, [r0, #0]
   d5dd6:	f003 0320 	and.w	r3, r3, #32
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d5dda:	4604      	mov	r4, r0
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d5ddc:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d5de0:	b10b      	cbz	r3, d5de6 <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
   d5de2:	2600      	movs	r6, #0
   d5de4:	e02e      	b.n	d5e44 <_ZN7FatFile13addDirClusterEv+0x74>
  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
   d5de6:	6942      	ldr	r2, [r0, #20]
   d5de8:	4b18      	ldr	r3, [pc, #96]	; (d5e4c <_ZN7FatFile13addDirClusterEv+0x7c>)
   d5dea:	429a      	cmp	r2, r3
   d5dec:	d8f9      	bhi.n	d5de2 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
   d5dee:	f7ff ffe5 	bl	d5dbc <_ZN7FatFile10addClusterEv>
   d5df2:	4606      	mov	r6, r0
   d5df4:	2800      	cmp	r0, #0
   d5df6:	d0f4      	beq.n	d5de2 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  block = m_vol->clusterFirstBlock(m_curCluster);
   d5df8:	6921      	ldr	r1, [r4, #16]
   d5dfa:	68a0      	ldr	r0, [r4, #8]
   d5dfc:	f7ff fe83 	bl	d5b06 <_ZNK9FatVolume17clusterFirstBlockEm>
   d5e00:	4607      	mov	r7, r0
   d5e02:	68a0      	ldr	r0, [r4, #8]
   d5e04:	2205      	movs	r2, #5
   d5e06:	4639      	mov	r1, r7
   d5e08:	3024      	adds	r0, #36	; 0x24
   d5e0a:	f7ff fe4b 	bl	d5aa4 <_ZN8FatCache4readEmh>
  pc = m_vol->cacheFetchData(block, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
   d5e0e:	4680      	mov	r8, r0
   d5e10:	2800      	cmp	r0, #0
   d5e12:	d0e6      	beq.n	d5de2 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
   d5e14:	4629      	mov	r1, r5
   d5e16:	f44f 7200 	mov.w	r2, #512	; 0x200
   d5e1a:	f005 faf3 	bl	db404 <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d5e1e:	2501      	movs	r5, #1
   d5e20:	68a3      	ldr	r3, [r4, #8]
   d5e22:	791a      	ldrb	r2, [r3, #4]
   d5e24:	42aa      	cmp	r2, r5
   d5e26:	d909      	bls.n	d5e3c <_ZN7FatFile13addDirClusterEv+0x6c>
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d5e28:	4642      	mov	r2, r8
   d5e2a:	19e9      	adds	r1, r5, r7
   d5e2c:	6818      	ldr	r0, [r3, #0]
   d5e2e:	f7ff fd7f 	bl	d5930 <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   d5e32:	2800      	cmp	r0, #0
   d5e34:	d0d5      	beq.n	d5de2 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d5e36:	3501      	adds	r5, #1
   d5e38:	b2ed      	uxtb	r5, r5
   d5e3a:	e7f1      	b.n	d5e20 <_ZN7FatFile13addDirClusterEv+0x50>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   d5e3c:	6963      	ldr	r3, [r4, #20]
   d5e3e:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   d5e42:	6163      	str	r3, [r4, #20]
  return true;

fail:
  return false;
}
   d5e44:	4630      	mov	r0, r6
   d5e46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5e4a:	bf00      	nop
   d5e4c:	001ffdff 	.word	0x001ffdff

000d5e50 <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   d5e50:	b510      	push	{r4, lr}
   d5e52:	4604      	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5e54:	6880      	ldr	r0, [r0, #8]
   d5e56:	460a      	mov	r2, r1
   d5e58:	3024      	adds	r0, #36	; 0x24
   d5e5a:	69a1      	ldr	r1, [r4, #24]
   d5e5c:	f7ff fe22 	bl	d5aa4 <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
   d5e60:	b120      	cbz	r0, d5e6c <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
   d5e62:	88a3      	ldrh	r3, [r4, #4]
   d5e64:	f003 030f 	and.w	r3, r3, #15
   d5e68:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
   d5e6c:	bd10      	pop	{r4, pc}

000d5e6e <_ZN7FatFile7dirNameEPK14directoryEntryPc>:

fail:
  return false;
}
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
   d5e6e:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5e70:	2400      	movs	r4, #0
   d5e72:	1e45      	subs	r5, r0, #1
  uint8_t j = 0;
  uint8_t lcBit = DIR_NT_LC_BASE;
   d5e74:	2608      	movs	r6, #8
fail:
  return false;
}
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
  uint8_t j = 0;
   d5e76:	4623      	mov	r3, r4
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = DIR_NT_LC_EXT;
      name[j++] = '.';
   d5e78:	272e      	movs	r7, #46	; 0x2e
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
  uint8_t j = 0;
  uint8_t lcBit = DIR_NT_LC_BASE;
  for (uint8_t i = 0; i < 11; i++) {
    if (dir->name[i] == ' ') {
   d5e7a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   d5e7e:	2a20      	cmp	r2, #32
   d5e80:	d018      	beq.n	d5eb4 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x46>
      continue;
    }
    if (i == 8) {
   d5e82:	2c08      	cmp	r4, #8
      // Position bit for extension.
      lcBit = DIR_NT_LC_EXT;
      name[j++] = '.';
   d5e84:	bf02      	ittt	eq
   d5e86:	54cf      	strbeq	r7, [r1, r3]
   d5e88:	1c5a      	addeq	r2, r3, #1
   d5e8a:	b2d3      	uxtbeq	r3, r2
    }
    char c = dir->name[i];
   d5e8c:	782a      	ldrb	r2, [r5, #0]
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   d5e8e:	f1a2 0e41 	sub.w	lr, r2, #65	; 0x41
    if (dir->name[i] == ' ') {
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = DIR_NT_LC_EXT;
   d5e92:	bf08      	it	eq
   d5e94:	2610      	moveq	r6, #16
      name[j++] = '.';
    }
    char c = dir->name[i];
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   d5e96:	f1be 0f19 	cmp.w	lr, #25
   d5e9a:	d806      	bhi.n	d5eaa <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x3c>
   d5e9c:	f890 e00c 	ldrb.w	lr, [r0, #12]
   d5ea0:	ea16 0f0e 	tst.w	r6, lr
      c += 'a' - 'A';
   d5ea4:	bf1c      	itt	ne
   d5ea6:	3220      	addne	r2, #32
   d5ea8:	b2d2      	uxtbne	r2, r2
    }
    name[j++] = c;
   d5eaa:	f103 0e01 	add.w	lr, r3, #1
   d5eae:	54ca      	strb	r2, [r1, r3]
   d5eb0:	fa5f f38e 	uxtb.w	r3, lr
   d5eb4:	3401      	adds	r4, #1
}
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
  uint8_t j = 0;
  uint8_t lcBit = DIR_NT_LC_BASE;
  for (uint8_t i = 0; i < 11; i++) {
   d5eb6:	2c0b      	cmp	r4, #11
   d5eb8:	d1df      	bne.n	d5e7a <_ZN7FatFile7dirNameEPK14directoryEntryPc+0xc>
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
      c += 'a' - 'A';
    }
    name[j++] = c;
  }
  name[j] = 0;
   d5eba:	2200      	movs	r2, #0
   d5ebc:	54ca      	strb	r2, [r1, r3]
  return j;
}
   d5ebe:	4618      	mov	r0, r3
   d5ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5ec2 <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d5ec2:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
   d5ec4:	7804      	ldrb	r4, [r0, #0]
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d5ec6:	4605      	mov	r5, r0
   d5ec8:	460e      	mov	r6, r1
  // error if file is already open
  if (isOpen()) {
   d5eca:	b984      	cbnz	r4, d5eee <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   d5ecc:	2224      	movs	r2, #36	; 0x24
   d5ece:	4621      	mov	r1, r4
   d5ed0:	f005 fa98 	bl	db404 <memset>

  m_vol = vol;
   d5ed4:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
   d5ed6:	79f3      	ldrb	r3, [r6, #7]
   d5ed8:	2b10      	cmp	r3, #16
   d5eda:	d003      	beq.n	d5ee4 <_ZN7FatFile8openRootEP9FatVolume+0x22>
   d5edc:	2b20      	cmp	r3, #32
   d5ede:	d106      	bne.n	d5eee <_ZN7FatFile8openRootEP9FatVolume+0x2c>
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d5ee0:	2340      	movs	r3, #64	; 0x40
   d5ee2:	e000      	b.n	d5ee6 <_ZN7FatFile8openRootEP9FatVolume+0x24>
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
   d5ee4:	2320      	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d5ee6:	2001      	movs	r0, #1
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d5ee8:	702b      	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d5eea:	70a8      	strb	r0, [r5, #2]
   d5eec:	bd70      	pop	{r4, r5, r6, pc}
  return true;

fail:
  return false;
   d5eee:	2000      	movs	r0, #0
   d5ef0:	bd70      	pop	{r4, r5, r6, pc}

000d5ef2 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   d5ef2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5ef6:	7803      	ldrb	r3, [r0, #0]
   d5ef8:	4604      	mov	r4, r0
   d5efa:	4689      	mov	r9, r1
   d5efc:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   d5efe:	b14b      	cbz	r3, d5f14 <_ZN7FatFile4readEPvj+0x22>
   d5f00:	7882      	ldrb	r2, [r0, #2]
   d5f02:	07d1      	lsls	r1, r2, #31
   d5f04:	d506      	bpl.n	d5f14 <_ZN7FatFile4readEPvj+0x22>
   d5f06:	e00c      	b.n	d5f22 <_ZN7FatFile4readEPvj+0x30>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d5f08:	465a      	mov	r2, fp
   d5f0a:	6921      	ldr	r1, [r4, #16]
   d5f0c:	f7ff fe01 	bl	d5b12 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   d5f10:	2800      	cmp	r0, #0
   d5f12:	da3d      	bge.n	d5f90 <_ZN7FatFile4readEPvj+0x9e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   d5f14:	7863      	ldrb	r3, [r4, #1]
   d5f16:	f043 0302 	orr.w	r3, r3, #2
   d5f1a:	7063      	strb	r3, [r4, #1]
  return -1;
   d5f1c:	f04f 30ff 	mov.w	r0, #4294967295
   d5f20:	e097      	b.n	d6052 <_ZN7FatFile4readEPvj+0x160>
  if (!isOpen() || !(m_flags & F_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   d5f22:	071a      	lsls	r2, r3, #28
   d5f24:	d503      	bpl.n	d5f2e <_ZN7FatFile4readEPvj+0x3c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   d5f26:	69e3      	ldr	r3, [r4, #28]
   d5f28:	6962      	ldr	r2, [r4, #20]
   d5f2a:	1a9b      	subs	r3, r3, r2
   d5f2c:	e007      	b.n	d5f3e <_ZN7FatFile4readEPvj+0x4c>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
   d5f2e:	069a      	lsls	r2, r3, #26
   d5f30:	d508      	bpl.n	d5f44 <_ZN7FatFile4readEPvj+0x52>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   d5f32:	68a3      	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
   d5f34:	891a      	ldrh	r2, [r3, #8]
   d5f36:	6963      	ldr	r3, [r4, #20]
   d5f38:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
   d5f3c:	b29b      	uxth	r3, r3
   d5f3e:	429d      	cmp	r5, r3
   d5f40:	bf28      	it	cs
   d5f42:	461d      	movcs	r5, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   d5f44:	462e      	mov	r6, r5
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t blockOfCluster = 0;
   d5f46:	f04f 0800 	mov.w	r8, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d5f4a:	f104 0b10 	add.w	fp, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d5f4e:	2e00      	cmp	r6, #0
   d5f50:	d035      	beq.n	d5fbe <_ZN7FatFile4readEPvj+0xcc>
   d5f52:	7822      	ldrb	r2, [r4, #0]
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d5f54:	6963      	ldr	r3, [r4, #20]
   d5f56:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   d5f58:	f012 0f20 	tst.w	r2, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d5f5c:	f3c3 0a08 	ubfx	sl, r3, #0, #9
   d5f60:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   d5f64:	d002      	beq.n	d5f6c <_ZN7FatFile4readEPvj+0x7a>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   d5f66:	6a03      	ldr	r3, [r0, #32]
   d5f68:	4419      	add	r1, r3
   d5f6a:	e01d      	b.n	d5fa8 <_ZN7FatFile4readEPvj+0xb6>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d5f6c:	f890 8005 	ldrb.w	r8, [r0, #5]
   d5f70:	ea01 0808 	and.w	r8, r1, r8
    } else {
      blockOfCluster = m_vol->blockOfCluster(m_curPosition);
      if (offset == 0 && blockOfCluster == 0) {
   d5f74:	f1ba 0f00 	cmp.w	sl, #0
   d5f78:	d110      	bne.n	d5f9c <_ZN7FatFile4readEPvj+0xaa>
   d5f7a:	f1b8 0f00 	cmp.w	r8, #0
   d5f7e:	d10d      	bne.n	d5f9c <_ZN7FatFile4readEPvj+0xaa>
        // start of new cluster
        if (m_curPosition == 0) {
   d5f80:	2b00      	cmp	r3, #0
   d5f82:	d1c1      	bne.n	d5f08 <_ZN7FatFile4readEPvj+0x16>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d5f84:	0653      	lsls	r3, r2, #25
   d5f86:	bf4c      	ite	mi
   d5f88:	6a03      	ldrmi	r3, [r0, #32]
   d5f8a:	6a23      	ldrpl	r3, [r4, #32]
   d5f8c:	6123      	str	r3, [r4, #16]
   d5f8e:	e005      	b.n	d5f9c <_ZN7FatFile4readEPvj+0xaa>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
   d5f90:	d104      	bne.n	d5f9c <_ZN7FatFile4readEPvj+0xaa>
            if (isDir()) {
   d5f92:	7823      	ldrb	r3, [r4, #0]
   d5f94:	f013 0f70 	tst.w	r3, #112	; 0x70
   d5f98:	d111      	bne.n	d5fbe <_ZN7FatFile4readEPvj+0xcc>
   d5f9a:	e7bb      	b.n	d5f14 <_ZN7FatFile4readEPvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d5f9c:	6921      	ldr	r1, [r4, #16]
   d5f9e:	68a0      	ldr	r0, [r4, #8]
   d5fa0:	f7ff fdb1 	bl	d5b06 <_ZNK9FatVolume17clusterFirstBlockEm>
   d5fa4:	eb08 0100 	add.w	r1, r8, r0
   d5fa8:	68a0      	ldr	r0, [r4, #8]
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   d5faa:	f1ba 0f00 	cmp.w	sl, #0
   d5fae:	d135      	bne.n	d601c <_ZN7FatFile4readEPvj+0x12a>
   d5fb0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5fb4:	d332      	bcc.n	d601c <_ZN7FatFile4readEPvj+0x12a>
   d5fb6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d5fb8:	4299      	cmp	r1, r3
   d5fba:	d102      	bne.n	d5fc2 <_ZN7FatFile4readEPvj+0xd0>
   d5fbc:	e02e      	b.n	d601c <_ZN7FatFile4readEPvj+0x12a>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
   d5fbe:	1ba8      	subs	r0, r5, r6
   d5fc0:	e047      	b.n	d6052 <_ZN7FatFile4readEPvj+0x160>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   d5fc2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d5fc6:	d31b      	bcc.n	d6000 <_ZN7FatFile4readEPvj+0x10e>
      size_t nb = toRead >> 9;
      if (!isRootFixed()) {
   d5fc8:	7822      	ldrb	r2, [r4, #0]
   d5fca:	0697      	lsls	r7, r2, #26
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
      size_t nb = toRead >> 9;
   d5fcc:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   d5fd0:	d406      	bmi.n	d5fe0 <_ZN7FatFile4readEPvj+0xee>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
   d5fd2:	7902      	ldrb	r2, [r0, #4]
   d5fd4:	ebc8 0202 	rsb	r2, r8, r2
   d5fd8:	b2d2      	uxtb	r2, r2
   d5fda:	4592      	cmp	sl, r2
   d5fdc:	bf28      	it	cs
   d5fde:	4692      	movcs	sl, r2
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5fe0:	4299      	cmp	r1, r3
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
          nb = mb;
        }
      }
      n = 512*nb;
   d5fe2:	ea4f 274a 	mov.w	r7, sl, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5fe6:	d207      	bcs.n	d5ff8 <_ZN7FatFile4readEPvj+0x106>
   d5fe8:	68a0      	ldr	r0, [r4, #8]
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
  }
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
   d5fea:	4653      	mov	r3, sl
   d5fec:	464a      	mov	r2, r9
   d5fee:	6800      	ldr	r0, [r0, #0]
   d5ff0:	f7ff fc5c 	bl	d58ac <_ZN9SdSpiCard10readBlocksEmPhj>
        if (!m_vol->cacheSyncData()) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readBlocks(block, dst, nb)) {
   d5ff4:	b960      	cbnz	r0, d6010 <_ZN7FatFile4readEPvj+0x11e>
   d5ff6:	e78d      	b.n	d5f14 <_ZN7FatFile4readEPvj+0x22>
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5ff8:	4453      	add	r3, sl
   d5ffa:	4299      	cmp	r1, r3
   d5ffc:	d321      	bcc.n	d6042 <_ZN7FatFile4readEPvj+0x150>
   d5ffe:	e7f3      	b.n	d5fe8 <_ZN7FatFile4readEPvj+0xf6>
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d6000:	464a      	mov	r2, r9
   d6002:	6800      	ldr	r0, [r0, #0]
   d6004:	f7ff fc0a 	bl	d581c <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   d6008:	2800      	cmp	r0, #0
   d600a:	d083      	beq.n	d5f14 <_ZN7FatFile4readEPvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
   d600c:	f44f 7700 	mov.w	r7, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
   d6010:	6963      	ldr	r3, [r4, #20]
   d6012:	443b      	add	r3, r7
      if (!m_vol->readBlock(block, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
   d6014:	44b9      	add	r9, r7
    m_curPosition += n;
   d6016:	6163      	str	r3, [r4, #20]
    toRead -= n;
   d6018:	1bf6      	subs	r6, r6, r7
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d601a:	e798      	b.n	d5f4e <_ZN7FatFile4readEPvj+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d601c:	2200      	movs	r2, #0
   d601e:	3024      	adds	r0, #36	; 0x24
   d6020:	f7ff fd40 	bl	d5aa4 <_ZN8FatCache4readEmh>
      if (n > toRead) {
        n = toRead;
      }
      // read block to cache and copy data to caller
      pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_READ);
      if (!pc) {
   d6024:	2800      	cmp	r0, #0
   d6026:	f43f af75 	beq.w	d5f14 <_ZN7FatFile4readEPvj+0x22>
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
   d602a:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
   d602e:	42b7      	cmp	r7, r6
   d6030:	bf28      	it	cs
   d6032:	4637      	movcs	r7, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
   d6034:	eb00 010a 	add.w	r1, r0, sl
   d6038:	463a      	mov	r2, r7
   d603a:	4648      	mov	r0, r9
   d603c:	f005 f9d7 	bl	db3ee <memcpy>
   d6040:	e7e6      	b.n	d6010 <_ZN7FatFile4readEPvj+0x11e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d6042:	3024      	adds	r0, #36	; 0x24
   d6044:	9101      	str	r1, [sp, #4]
   d6046:	f7ff fd06 	bl	d5a56 <_ZN8FatCache4syncEv>
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!m_vol->cacheSyncData()) {
   d604a:	9901      	ldr	r1, [sp, #4]
   d604c:	2800      	cmp	r0, #0
   d604e:	d1cb      	bne.n	d5fe8 <_ZN7FatFile4readEPvj+0xf6>
   d6050:	e760      	b.n	d5f14 <_ZN7FatFile4readEPvj+0x22>
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
  return -1;
}
   d6052:	b003      	add	sp, #12
   d6054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d6058 <_ZN7FatFile12readDirCacheEb>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d6058:	b537      	push	{r0, r1, r2, r4, r5, lr}
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
   d605a:	6943      	ldr	r3, [r0, #20]
   d605c:	f3c3 1543 	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d6060:	4604      	mov	r4, r0
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
   d6062:	b105      	cbz	r5, d6066 <_ZN7FatFile12readDirCacheEb+0xe>
   d6064:	b969      	cbnz	r1, d6082 <_ZN7FatFile12readDirCacheEb+0x2a>
    int8_t n = read(&n, 1);
   d6066:	2201      	movs	r2, #1
   d6068:	f10d 0107 	add.w	r1, sp, #7
   d606c:	4620      	mov	r0, r4
   d606e:	f7ff ff40 	bl	d5ef2 <_ZN7FatFile4readEPvj>
   d6072:	b240      	sxtb	r0, r0
    if  (n != 1) {
   d6074:	2801      	cmp	r0, #1
   d6076:	d001      	beq.n	d607c <_ZN7FatFile12readDirCacheEb+0x24>
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;

fail:
  return 0;
   d6078:	2000      	movs	r0, #0
   d607a:	e008      	b.n	d608e <_ZN7FatFile12readDirCacheEb+0x36>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
   d607c:	6963      	ldr	r3, [r4, #20]
   d607e:	331f      	adds	r3, #31
   d6080:	e000      	b.n	d6084 <_ZN7FatFile12readDirCacheEb+0x2c>
  } else {
    m_curPosition += 32;
   d6082:	3320      	adds	r3, #32
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d6084:	68a0      	ldr	r0, [r4, #8]
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
   d6086:	6163      	str	r3, [r4, #20]
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d6088:	3030      	adds	r0, #48	; 0x30
   d608a:	eb00 1045 	add.w	r0, r0, r5, lsl #5

fail:
  return 0;
}
   d608e:	b003      	add	sp, #12
   d6090:	bd30      	pop	{r4, r5, pc}

000d6092 <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d6092:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6096:	460e      	mov	r6, r1
   d6098:	7801      	ldrb	r1, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
   d609a:	6907      	ldr	r7, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d609c:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
   d609e:	2900      	cmp	r1, #0
   d60a0:	d039      	beq.n	d6116 <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
   d60a2:	6945      	ldr	r5, [r0, #20]
   d60a4:	42b5      	cmp	r5, r6
   d60a6:	d03a      	beq.n	d611e <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
   d60a8:	b90e      	cbnz	r6, d60ae <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
   d60aa:	6106      	str	r6, [r0, #16]
    goto done;
   d60ac:	e031      	b.n	d6112 <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
   d60ae:	070b      	lsls	r3, r1, #28
   d60b0:	d503      	bpl.n	d60ba <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
   d60b2:	69c3      	ldr	r3, [r0, #28]
   d60b4:	429e      	cmp	r6, r3
   d60b6:	d82e      	bhi.n	d6116 <_ZN7FatFile7seekSetEm+0x84>
   d60b8:	e007      	b.n	d60ca <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
   d60ba:	0688      	lsls	r0, r1, #26
   d60bc:	d505      	bpl.n	d60ca <_ZN7FatFile7seekSetEm+0x38>
   d60be:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   d60c0:	891b      	ldrh	r3, [r3, #8]
   d60c2:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
   d60c6:	d826      	bhi.n	d6116 <_ZN7FatFile7seekSetEm+0x84>
   d60c8:	e023      	b.n	d6112 <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d60ca:	f8d4 e008 	ldr.w	lr, [r4, #8]
   d60ce:	f89e 3006 	ldrb.w	r3, [lr, #6]
   d60d2:	1e6a      	subs	r2, r5, #1
   d60d4:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d60d8:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d60da:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d60dc:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
   d60de:	429a      	cmp	r2, r3
   d60e0:	d800      	bhi.n	d60e4 <_ZN7FatFile7seekSetEm+0x52>
   d60e2:	b94d      	cbnz	r5, d60f8 <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d60e4:	064a      	lsls	r2, r1, #25
   d60e6:	bf4c      	ite	mi
   d60e8:	f8de 2020 	ldrmi.w	r2, [lr, #32]
   d60ec:	6a22      	ldrpl	r2, [r4, #32]
   d60ee:	6122      	str	r2, [r4, #16]
   d60f0:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d60f2:	f104 0810 	add.w	r8, r4, #16
   d60f6:	e00a      	b.n	d610e <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
   d60f8:	1a9b      	subs	r3, r3, r2
   d60fa:	e7f9      	b.n	d60f0 <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d60fc:	4642      	mov	r2, r8
   d60fe:	6921      	ldr	r1, [r4, #16]
   d6100:	68a0      	ldr	r0, [r4, #8]
   d6102:	f7ff fd06 	bl	d5b12 <_ZN9FatVolume6fatGetEmPm>
   d6106:	2800      	cmp	r0, #0
   d6108:	f105 35ff 	add.w	r5, r5, #4294967295
   d610c:	dd03      	ble.n	d6116 <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
   d610e:	2d00      	cmp	r5, #0
   d6110:	d1f4      	bne.n	d60fc <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
   d6112:	6166      	str	r6, [r4, #20]
   d6114:	e003      	b.n	d611e <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
   d6116:	6127      	str	r7, [r4, #16]
  return false;
   d6118:	2000      	movs	r0, #0
   d611a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
   d611e:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
   d6120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6124 <_ZN7FatFile15openCachedEntryEPS_tih>:
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d6124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6126:	460f      	mov	r7, r1
   d6128:	4615      	mov	r5, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d612a:	2100      	movs	r1, #0
   d612c:	2224      	movs	r2, #36	; 0x24
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d612e:	4604      	mov	r4, r0
   d6130:	461e      	mov	r6, r3
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d6132:	f005 f967 	bl	db404 <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
   d6136:	68b8      	ldr	r0, [r7, #8]
   d6138:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d613a:	f005 020f 	and.w	r2, r5, #15
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
   d613e:	80a5      	strh	r5, [r4, #4]
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d6140:	f100 0130 	add.w	r1, r0, #48	; 0x30
   d6144:	0152      	lsls	r2, r2, #5
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
   d6146:	6a3b      	ldr	r3, [r7, #32]
   d6148:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d614a:	4411      	add	r1, r2

  // Must be file or subdirectory.
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   d614c:	7acb      	ldrb	r3, [r1, #11]
   d614e:	071d      	lsls	r5, r3, #28
   d6150:	d44c      	bmi.n	d61ec <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
   d6152:	1883      	adds	r3, r0, r2
   d6154:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
   d6158:	f003 0317 	and.w	r3, r3, #23
   d615c:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   d615e:	7ac9      	ldrb	r1, [r1, #11]
   d6160:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   d6164:	bf04      	itt	eq
   d6166:	f043 0308 	orreq.w	r3, r3, #8
   d616a:	7023      	strbeq	r3, [r4, #0]
  }
  m_lfnOrd = lfnOrd;
   d616c:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d6170:	70e3      	strb	r3, [r4, #3]

  switch (oflag & O_ACCMODE) {
   d6172:	f006 0303 	and.w	r3, r6, #3
   d6176:	2b01      	cmp	r3, #1
   d6178:	d009      	beq.n	d618e <_ZN7FatFile15openCachedEntryEPS_tih+0x6a>
   d617a:	2b02      	cmp	r3, #2
   d617c:	d005      	beq.n	d618a <_ZN7FatFile15openCachedEntryEPS_tih+0x66>
   d617e:	2b00      	cmp	r3, #0
   d6180:	d134      	bne.n	d61ec <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    case O_RDONLY:
      if (oflag & O_TRUNC) {
   d6182:	0571      	lsls	r1, r6, #21
   d6184:	d432      	bmi.n	d61ec <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      m_flags = F_READ;
   d6186:	2301      	movs	r3, #1
   d6188:	e002      	b.n	d6190 <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_RDWR:
      m_flags = F_READ | F_WRITE;
   d618a:	2303      	movs	r3, #3
   d618c:	e000      	b.n	d6190 <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_WRONLY:
      m_flags = F_WRITE;
   d618e:	2302      	movs	r3, #2
   d6190:	70a3      	strb	r3, [r4, #2]
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & F_WRITE) {
   d6192:	78a1      	ldrb	r1, [r4, #2]
   d6194:	078b      	lsls	r3, r1, #30
   d6196:	d503      	bpl.n	d61a0 <_ZN7FatFile15openCachedEntryEPS_tih+0x7c>
    if (isSubDir() || isReadOnly()) {
   d6198:	7823      	ldrb	r3, [r4, #0]
   d619a:	f013 0f11 	tst.w	r3, #17
   d619e:	d125      	bne.n	d61ec <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   d61a0:	b24b      	sxtb	r3, r1
   d61a2:	f416 5f00 	tst.w	r6, #8192	; 0x2000
   d61a6:	f006 0108 	and.w	r1, r6, #8
   d61aa:	bf14      	ite	ne
   d61ac:	f06f 077f 	mvnne.w	r7, #127	; 0x7f
   d61b0:	2700      	moveq	r7, #0
   d61b2:	4319      	orrs	r1, r3
   d61b4:	4339      	orrs	r1, r7
   d61b6:	70a1      	strb	r1, [r4, #2]
   d61b8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c

  m_dirBlock = m_vol->cacheBlockNumber();
   d61ba:	61a3      	str	r3, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   d61bc:	4402      	add	r2, r0
                 | dir->firstClusterLow;

  if (oflag & O_TRUNC) {
   d61be:	0575      	lsls	r5, r6, #21

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
   d61c0:	f8b2 1044 	ldrh.w	r1, [r2, #68]	; 0x44
   d61c4:	f8b2 304a 	ldrh.w	r3, [r2, #74]	; 0x4a
   d61c8:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

  if (oflag & O_TRUNC) {
   d61cc:	d504      	bpl.n	d61d8 <_ZN7FatFile15openCachedEntryEPS_tih+0xb4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   d61ce:	b181      	cbz	r1, d61f2 <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d61d0:	f7ff fd3f 	bl	d5c52 <_ZN9FatVolume9freeChainEm>
   d61d4:	b968      	cbnz	r0, d61f2 <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d61d6:	e009      	b.n	d61ec <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
   d61d8:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   d61da:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   d61dc:	61e3      	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   d61de:	0473      	lsls	r3, r6, #17
   d61e0:	d50c      	bpl.n	d61fc <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
   d61e2:	69e1      	ldr	r1, [r4, #28]
   d61e4:	4620      	mov	r0, r4
   d61e6:	f7ff ff54 	bl	d6092 <_ZN7FatFile7seekSetEm>
   d61ea:	b938      	cbnz	r0, d61fc <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
    goto fail;
  }
  return true;

fail:
  m_attr = FILE_ATTR_CLOSED;
   d61ec:	2000      	movs	r0, #0
   d61ee:	7020      	strb	r0, [r4, #0]
  return false;
   d61f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
   d61f2:	78a3      	ldrb	r3, [r4, #2]
   d61f4:	f043 0304 	orr.w	r3, r3, #4
   d61f8:	70a3      	strb	r3, [r4, #2]
   d61fa:	e7f0      	b.n	d61de <_ZN7FatFile15openCachedEntryEPS_tih+0xba>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
   d61fc:	2001      	movs	r0, #1

fail:
  m_attr = FILE_ATTR_CLOSED;
  return false;
}
   d61fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6200 <_ZN7FatFile8openNextEPS_i>:
  *this = *cwd();
  rewind();
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
   d6200:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  ldir_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
   d6204:	7803      	ldrb	r3, [r0, #0]
  *this = *cwd();
  rewind();
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
   d6206:	4606      	mov	r6, r0
   d6208:	460d      	mov	r5, r1
   d620a:	4617      	mov	r7, r2
  ldir_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
   d620c:	bb53      	cbnz	r3, d6264 <_ZN7FatFile8openNextEPS_i+0x64>
   d620e:	780b      	ldrb	r3, [r1, #0]
   d6210:	f013 0f70 	tst.w	r3, #112	; 0x70
   d6214:	d026      	beq.n	d6264 <_ZN7FatFile8openNextEPS_i+0x64>
   d6216:	694c      	ldr	r4, [r1, #20]
   d6218:	f014 041f 	ands.w	r4, r4, #31
   d621c:	d122      	bne.n	d6264 <_ZN7FatFile8openNextEPS_i+0x64>
   d621e:	46a0      	mov	r8, r4
    goto fail;
  }
  while (1) {
    // read entry into cache
    index = dirFile->curPosition()/32;
    dir_t* dir = dirFile->readDirCache();
   d6220:	2100      	movs	r1, #0
   d6222:	4628      	mov	r0, r5
   d6224:	f8d5 9014 	ldr.w	r9, [r5, #20]
   d6228:	f7ff ff16 	bl	d6058 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d622c:	b1d0      	cbz	r0, d6264 <_ZN7FatFile8openNextEPS_i+0x64>
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    // done if last entry
    if (dir->name[0] == DIR_NAME_FREE) {
   d622e:	7803      	ldrb	r3, [r0, #0]
   d6230:	b1c3      	cbz	r3, d6264 <_ZN7FatFile8openNextEPS_i+0x64>
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == DIR_NAME_DELETED) {
   d6232:	2b2e      	cmp	r3, #46	; 0x2e
   d6234:	d101      	bne.n	d623a <_ZN7FatFile8openNextEPS_i+0x3a>
      if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
        lfnOrd = ldir->ord & 0X1F;
        chksum = ldir->chksum;
      }
    } else {
      lfnOrd = 0;
   d6236:	2400      	movs	r4, #0
   d6238:	e7f2      	b.n	d6220 <_ZN7FatFile8openNextEPS_i+0x20>
    // done if last entry
    if (dir->name[0] == DIR_NAME_FREE) {
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == DIR_NAME_DELETED) {
   d623a:	2be5      	cmp	r3, #229	; 0xe5
   d623c:	d0fb      	beq.n	d6236 <_ZN7FatFile8openNextEPS_i+0x36>
   d623e:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   d6240:	f011 0f08 	tst.w	r1, #8
   d6244:	d105      	bne.n	d6252 <_ZN7FatFile8openNextEPS_i+0x52>
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
   d6246:	b17c      	cbz	r4, d6268 <_ZN7FatFile8openNextEPS_i+0x68>
   d6248:	f000 fa73 	bl	d6732 <_ZN7FatFile11lfnChecksumEPh>
   d624c:	4580      	cmp	r8, r0
   d624e:	d109      	bne.n	d6264 <_ZN7FatFile8openNextEPS_i+0x64>
   d6250:	e00a      	b.n	d6268 <_ZN7FatFile8openNextEPS_i+0x68>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      return true;
    } else if (DIR_IS_LONG_NAME(dir)) {
   d6252:	290f      	cmp	r1, #15
   d6254:	d1ef      	bne.n	d6236 <_ZN7FatFile8openNextEPS_i+0x36>
      ldir = reinterpret_cast<ldir_t*>(dir);
      if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
   d6256:	0659      	lsls	r1, r3, #25
   d6258:	d5e2      	bpl.n	d6220 <_ZN7FatFile8openNextEPS_i+0x20>
        lfnOrd = ldir->ord & 0X1F;
   d625a:	f003 041f 	and.w	r4, r3, #31
        chksum = ldir->chksum;
   d625e:	f890 800d 	ldrb.w	r8, [r0, #13]
   d6262:	e7dd      	b.n	d6220 <_ZN7FatFile8openNextEPS_i+0x20>
      lfnOrd = 0;
    }
  }

fail:
  return false;
   d6264:	2000      	movs	r0, #0
   d6266:	e007      	b.n	d6278 <_ZN7FatFile8openNextEPS_i+0x78>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
   d6268:	9400      	str	r4, [sp, #0]
   d626a:	463b      	mov	r3, r7
   d626c:	f3c9 124f 	ubfx	r2, r9, #5, #16
   d6270:	4629      	mov	r1, r5
   d6272:	4630      	mov	r0, r6
   d6274:	f7ff ff56 	bl	d6124 <_ZN7FatFile15openCachedEntryEPS_tih>
    }
  }

fail:
  return false;
}
   d6278:	b003      	add	sp, #12
   d627a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d6280 <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d6280:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   d6282:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d6284:	4604      	mov	r4, r0
  if (!isOpen()) {
   d6286:	b90b      	cbnz	r3, d628c <_ZN7FatFile4syncEv+0xc>
    return true;
   d6288:	2001      	movs	r0, #1
   d628a:	bd38      	pop	{r3, r4, r5, pc}
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
   d628c:	7883      	ldrb	r3, [r0, #2]
   d628e:	075a      	lsls	r2, r3, #29
   d6290:	d523      	bpl.n	d62da <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d6292:	2101      	movs	r1, #1
   d6294:	f7ff fddc 	bl	d5e50 <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d6298:	4605      	mov	r5, r0
   d629a:	b928      	cbnz	r0, d62a8 <_ZN7FatFile4syncEv+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
   d629c:	7863      	ldrb	r3, [r4, #1]
   d629e:	f043 0301 	orr.w	r3, r3, #1
   d62a2:	7063      	strb	r3, [r4, #1]
  return false;
   d62a4:	2000      	movs	r0, #0
   d62a6:	bd38      	pop	{r3, r4, r5, pc}
    return true;
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d62a8:	7803      	ldrb	r3, [r0, #0]
   d62aa:	2be5      	cmp	r3, #229	; 0xe5
   d62ac:	d0f6      	beq.n	d629c <_ZN7FatFile4syncEv+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
   d62ae:	7823      	ldrb	r3, [r4, #0]
   d62b0:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   d62b2:	bf44      	itt	mi
   d62b4:	69e3      	ldrmi	r3, [r4, #28]
   d62b6:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   d62b8:	8c23      	ldrh	r3, [r4, #32]
   d62ba:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   d62bc:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d62be:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
   d62c0:	4b09      	ldr	r3, [pc, #36]	; (d62e8 <_ZN7FatFile4syncEv+0x68>)
   d62c2:	681b      	ldr	r3, [r3, #0]
   d62c4:	b12b      	cbz	r3, d62d2 <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   d62c6:	f100 0116 	add.w	r1, r0, #22
   d62ca:	3018      	adds	r0, #24
   d62cc:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   d62ce:	8b2b      	ldrh	r3, [r5, #24]
   d62d0:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
   d62d2:	78a3      	ldrb	r3, [r4, #2]
   d62d4:	f023 0304 	bic.w	r3, r3, #4
   d62d8:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
   d62da:	68a0      	ldr	r0, [r4, #8]
   d62dc:	f7ff fc06 	bl	d5aec <_ZN9FatVolume9cacheSyncEv>
   d62e0:	2800      	cmp	r0, #0
   d62e2:	d0db      	beq.n	d629c <_ZN7FatFile4syncEv+0x1c>
   d62e4:	e7d0      	b.n	d6288 <_ZN7FatFile4syncEv+0x8>
   d62e6:	bf00      	nop
   d62e8:	2003e318 	.word	0x2003e318

000d62ec <_ZN7FatFile5closeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
   d62ec:	b510      	push	{r4, lr}
   d62ee:	4604      	mov	r4, r0
  bool rtn = sync();
   d62f0:	f7ff ffc6 	bl	d6280 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   d62f4:	2300      	movs	r3, #0
   d62f6:	7023      	strb	r3, [r4, #0]
  return rtn;
}
   d62f8:	bd10      	pop	{r4, pc}

000d62fa <_ZN7FatFile4openEPS_PKci>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d62fa:	b5f0      	push	{r4, r5, r6, r7, lr}
   d62fc:	b093      	sub	sp, #76	; 0x4c
   d62fe:	461f      	mov	r7, r3
   d6300:	2300      	movs	r3, #0
   d6302:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   d6306:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d630a:	7803      	ldrb	r3, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d630c:	9201      	str	r2, [sp, #4]
   d630e:	4606      	mov	r6, r0
   d6310:	460c      	mov	r4, r1
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d6312:	b10b      	cbz	r3, d6318 <_ZN7FatFile4openEPS_PKci+0x1e>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
   d6314:	2000      	movs	r0, #0
   d6316:	e03d      	b.n	d6394 <_ZN7FatFile4openEPS_PKci+0x9a>
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d6318:	780b      	ldrb	r3, [r1, #0]
   d631a:	f013 0f70 	tst.w	r3, #112	; 0x70
   d631e:	d0f9      	beq.n	d6314 <_ZN7FatFile4openEPS_PKci+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
   d6320:	7813      	ldrb	r3, [r2, #0]
   d6322:	2b2f      	cmp	r3, #47	; 0x2f
   d6324:	d112      	bne.n	d634c <_ZN7FatFile4openEPS_PKci+0x52>
    while (isDirSeparator(*path)) {
   d6326:	9b01      	ldr	r3, [sp, #4]
   d6328:	781a      	ldrb	r2, [r3, #0]
   d632a:	2a2f      	cmp	r2, #47	; 0x2f
   d632c:	d102      	bne.n	d6334 <_ZN7FatFile4openEPS_PKci+0x3a>
      path++;
   d632e:	3301      	adds	r3, #1
   d6330:	9301      	str	r3, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
   d6332:	e7f8      	b.n	d6326 <_ZN7FatFile4openEPS_PKci+0x2c>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
   d6334:	68a1      	ldr	r1, [r4, #8]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
   d6336:	b91a      	cbnz	r2, d6340 <_ZN7FatFile4openEPS_PKci+0x46>
      return openRoot(dirFile->m_vol);
   d6338:	4630      	mov	r0, r6
   d633a:	f7ff fdc2 	bl	d5ec2 <_ZN7FatFile8openRootEP9FatVolume>
   d633e:	e029      	b.n	d6394 <_ZN7FatFile4openEPS_PKci+0x9a>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   d6340:	a809      	add	r0, sp, #36	; 0x24
   d6342:	f7ff fdbe 	bl	d5ec2 <_ZN7FatFile8openRootEP9FatVolume>
   d6346:	2800      	cmp	r0, #0
   d6348:	d0e4      	beq.n	d6314 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
   d634a:	ac09      	add	r4, sp, #36	; 0x24
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
   d634c:	aa01      	add	r2, sp, #4
   d634e:	a903      	add	r1, sp, #12
   d6350:	9801      	ldr	r0, [sp, #4]
   d6352:	f000 fa8d 	bl	d6870 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   d6356:	2800      	cmp	r0, #0
   d6358:	d0dc      	beq.n	d6314 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
   d635a:	9b01      	ldr	r3, [sp, #4]
   d635c:	781b      	ldrb	r3, [r3, #0]
   d635e:	b19b      	cbz	r3, d6388 <_ZN7FatFile4openEPS_PKci+0x8e>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
   d6360:	2300      	movs	r3, #0
   d6362:	aa03      	add	r2, sp, #12
   d6364:	4621      	mov	r1, r4
   d6366:	4630      	mov	r0, r6
   d6368:	f000 fc26 	bl	d6bb8 <_ZN7FatFile4openEPS_P7fname_ti>
   d636c:	2800      	cmp	r0, #0
   d636e:	d0d1      	beq.n	d6314 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
   d6370:	4635      	mov	r5, r6
   d6372:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6374:	ac09      	add	r4, sp, #36	; 0x24
   d6376:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6378:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d637a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d637c:	682b      	ldr	r3, [r5, #0]
   d637e:	6023      	str	r3, [r4, #0]
    dirFile = &tmpDir;
    close();
   d6380:	4630      	mov	r0, r6
   d6382:	f7ff ffb3 	bl	d62ec <_ZN7FatFile5closeEv>
   d6386:	e7e0      	b.n	d634a <_ZN7FatFile4openEPS_PKci+0x50>
  }
  return open(dirFile, &fname, oflag);
   d6388:	463b      	mov	r3, r7
   d638a:	aa03      	add	r2, sp, #12
   d638c:	4621      	mov	r1, r4
   d638e:	4630      	mov	r0, r6
   d6390:	f000 fc12 	bl	d6bb8 <_ZN7FatFile4openEPS_P7fname_ti>

fail:
  return false;
}
   d6394:	b013      	add	sp, #76	; 0x4c
   d6396:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6398 <_ZN7FatFile6removeEPS_PKc>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove(FatFile* dirFile, const char* path) {
   d6398:	b500      	push	{lr}
   d639a:	b08b      	sub	sp, #44	; 0x2c
   d639c:	2300      	movs	r3, #0
   d639e:	f88d 3004 	strb.w	r3, [sp, #4]
   d63a2:	f88d 3005 	strb.w	r3, [sp, #5]
  FatFile file;
  if (!file.open(dirFile, path, O_WRONLY)) {
   d63a6:	460a      	mov	r2, r1
   d63a8:	2301      	movs	r3, #1
   d63aa:	4601      	mov	r1, r0
   d63ac:	a801      	add	r0, sp, #4
   d63ae:	f7ff ffa4 	bl	d62fa <_ZN7FatFile4openEPS_PKci>
   d63b2:	b110      	cbz	r0, d63ba <_ZN7FatFile6removeEPS_PKc+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return file.remove();
   d63b4:	a801      	add	r0, sp, #4
   d63b6:	f000 fb47 	bl	d6a48 <_ZN7FatFile6removeEv>

fail:
  return false;
}
   d63ba:	b00b      	add	sp, #44	; 0x2c
   d63bc:	f85d fb04 	ldr.w	pc, [sp], #4

000d63c0 <_ZN7FatFile5mkdirEPS_P7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, fname_t* fname) {
   d63c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  dir_t dot;
  dir_t* dir;
  cache_t* pc;

  if (!parent->isDir()) {
   d63c4:	780b      	ldrb	r3, [r1, #0]
   d63c6:	f013 0f70 	tst.w	r3, #112	; 0x70

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, fname_t* fname) {
   d63ca:	b088      	sub	sp, #32
   d63cc:	4604      	mov	r4, r0
   d63ce:	460f      	mov	r7, r1
  uint32_t block;
  dir_t dot;
  dir_t* dir;
  cache_t* pc;

  if (!parent->isDir()) {
   d63d0:	d01c      	beq.n	d640c <_ZN7FatFile5mkdirEPS_P7fname_t+0x4c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, fname, O_RDWR | O_CREAT | O_EXCL)) {
   d63d2:	f640 2302 	movw	r3, #2562	; 0xa02
   d63d6:	f000 fbef 	bl	d6bb8 <_ZN7FatFile4openEPS_P7fname_ti>
   d63da:	b1b8      	cbz	r0, d640c <_ZN7FatFile5mkdirEPS_P7fname_t+0x4c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_flags = F_READ;
   d63dc:	2601      	movs	r6, #1
  m_attr = FILE_ATTR_SUBDIR;
   d63de:	2510      	movs	r5, #16
  if (!open(parent, fname, O_RDWR | O_CREAT | O_EXCL)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_flags = F_READ;
   d63e0:	70a6      	strb	r6, [r4, #2]
  m_attr = FILE_ATTR_SUBDIR;
   d63e2:	7025      	strb	r5, [r4, #0]

  // allocate and zero first cluster
  if (!addDirCluster()) {
   d63e4:	4620      	mov	r0, r4
   d63e6:	f7ff fcf3 	bl	d5dd0 <_ZN7FatFile13addDirClusterEv>
   d63ea:	b178      	cbz	r0, d640c <_ZN7FatFile5mkdirEPS_P7fname_t+0x4c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_firstCluster = m_curCluster;
   d63ec:	6923      	ldr	r3, [r4, #16]
   d63ee:	6223      	str	r3, [r4, #32]
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
   d63f0:	2100      	movs	r1, #0
   d63f2:	4620      	mov	r0, r4
   d63f4:	f7ff fe4d 	bl	d6092 <_ZN7FatFile7seekSetEm>
  // Set to start of dir
  rewind();
  // force entry to device
  if (!sync()) {
   d63f8:	4620      	mov	r0, r4
   d63fa:	f7ff ff41 	bl	d6280 <_ZN7FatFile4syncEv>
   d63fe:	b128      	cbz	r0, d640c <_ZN7FatFile5mkdirEPS_P7fname_t+0x4c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // cache entry - should already be in cache due to sync() call
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d6400:	4631      	mov	r1, r6
   d6402:	4620      	mov	r0, r4
   d6404:	f7ff fd24 	bl	d5e50 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   d6408:	4603      	mov	r3, r0
   d640a:	b908      	cbnz	r0, d6410 <_ZN7FatFile5mkdirEPS_P7fname_t+0x50>
  memcpy(&pc->dir[1], &dot, sizeof(dot));
  // write first block
  return m_vol->cacheSync();

fail:
  return false;
   d640c:	2000      	movs	r0, #0
   d640e:	e051      	b.n	d64b4 <_ZN7FatFile5mkdirEPS_P7fname_t+0xf4>
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // change directory entry  attribute
  dir->attributes = DIR_ATT_DIRECTORY;
   d6410:	72c5      	strb	r5, [r0, #11]

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
   d6412:	4602      	mov	r2, r0
   d6414:	466e      	mov	r6, sp
   d6416:	f100 0c20 	add.w	ip, r0, #32
   d641a:	466d      	mov	r5, sp
   d641c:	6810      	ldr	r0, [r2, #0]
   d641e:	6851      	ldr	r1, [r2, #4]
   d6420:	46b6      	mov	lr, r6
   d6422:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   d6426:	3208      	adds	r2, #8
   d6428:	4562      	cmp	r2, ip
   d642a:	4676      	mov	r6, lr
   d642c:	d1f6      	bne.n	d641c <_ZN7FatFile5mkdirEPS_P7fname_t+0x5c>
   d642e:	f8b3 8014 	ldrh.w	r8, [r3, #20]
   d6432:	8b5e      	ldrh	r6, [r3, #26]
  dot.name[0] = '.';
   d6434:	232e      	movs	r3, #46	; 0x2e
   d6436:	f88d 3000 	strb.w	r3, [sp]
  for (uint8_t i = 1; i < 11; i++) {
    dot.name[i] = ' ';
   d643a:	2120      	movs	r1, #32
  // change directory entry  attribute
  dir->attributes = DIR_ATT_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
  dot.name[0] = '.';
   d643c:	2300      	movs	r3, #0
  for (uint8_t i = 1; i < 11; i++) {
    dot.name[i] = ' ';
   d643e:	18ea      	adds	r2, r5, r3
   d6440:	3301      	adds	r3, #1
  dir->attributes = DIR_ATT_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
  dot.name[0] = '.';
  for (uint8_t i = 1; i < 11; i++) {
   d6442:	2b0a      	cmp	r3, #10
    dot.name[i] = ' ';
   d6444:	7051      	strb	r1, [r2, #1]
  dir->attributes = DIR_ATT_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
  dot.name[0] = '.';
  for (uint8_t i = 1; i < 11; i++) {
   d6446:	d1fa      	bne.n	d643e <_ZN7FatFile5mkdirEPS_P7fname_t+0x7e>
    dot.name[i] = ' ';
  }

  // cache block for '.'  and '..'
  block = m_vol->clusterFirstBlock(m_firstCluster);
   d6448:	6a21      	ldr	r1, [r4, #32]
   d644a:	68a0      	ldr	r0, [r4, #8]
   d644c:	f7ff fb5b 	bl	d5b06 <_ZNK9FatVolume17clusterFirstBlockEm>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d6450:	68a3      	ldr	r3, [r4, #8]
   d6452:	4601      	mov	r1, r0
   d6454:	2201      	movs	r2, #1
   d6456:	f103 0024 	add.w	r0, r3, #36	; 0x24
   d645a:	f7ff fb23 	bl	d5aa4 <_ZN8FatCache4readEmh>
  pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_WRITE);
  if (!pc) {
   d645e:	4603      	mov	r3, r0
   d6460:	2800      	cmp	r0, #0
   d6462:	d0d3      	beq.n	d640c <_ZN7FatFile5mkdirEPS_P7fname_t+0x4c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy '.' to block
  memcpy(&pc->dir[0], &dot, sizeof(dot));
   d6464:	f8ad 601a 	strh.w	r6, [sp, #26]
   d6468:	f8ad 8014 	strh.w	r8, [sp, #20]
   d646c:	46ae      	mov	lr, r5
   d646e:	4606      	mov	r6, r0
   d6470:	f10d 0c20 	add.w	ip, sp, #32
   d6474:	4672      	mov	r2, lr
   d6476:	ca03      	ldmia	r2!, {r0, r1}
   d6478:	4562      	cmp	r2, ip
   d647a:	6030      	str	r0, [r6, #0]
   d647c:	6071      	str	r1, [r6, #4]
   d647e:	4696      	mov	lr, r2
   d6480:	f106 0608 	add.w	r6, r6, #8
   d6484:	d1f6      	bne.n	d6474 <_ZN7FatFile5mkdirEPS_P7fname_t+0xb4>
  // make entry for '..'
  dot.name[1] = '.';
   d6486:	222e      	movs	r2, #46	; 0x2e
   d6488:	f88d 2001 	strb.w	r2, [sp, #1]
  dot.firstClusterLow = parent->m_firstCluster & 0XFFFF;
   d648c:	6a3a      	ldr	r2, [r7, #32]
  dot.firstClusterHigh = parent->m_firstCluster >> 16;
  // copy '..' to block
  memcpy(&pc->dir[1], &dot, sizeof(dot));
   d648e:	f8ad 201a 	strh.w	r2, [sp, #26]
   d6492:	0c11      	lsrs	r1, r2, #16
   d6494:	f8ad 1014 	strh.w	r1, [sp, #20]
   d6498:	3320      	adds	r3, #32
   d649a:	ae08      	add	r6, sp, #32
   d649c:	462a      	mov	r2, r5
   d649e:	ca03      	ldmia	r2!, {r0, r1}
   d64a0:	42b2      	cmp	r2, r6
   d64a2:	6018      	str	r0, [r3, #0]
   d64a4:	6059      	str	r1, [r3, #4]
   d64a6:	4615      	mov	r5, r2
   d64a8:	f103 0308 	add.w	r3, r3, #8
   d64ac:	d1f6      	bne.n	d649c <_ZN7FatFile5mkdirEPS_P7fname_t+0xdc>
  // write first block
  return m_vol->cacheSync();
   d64ae:	68a0      	ldr	r0, [r4, #8]
   d64b0:	f7ff fb1c 	bl	d5aec <_ZN9FatVolume9cacheSyncEv>

fail:
  return false;
}
   d64b4:	b008      	add	sp, #32
   d64b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d64ba <_ZN7FatFile5mkdirEPS_PKcb>:
void FatFile::getpos(FatPos_t* pos) {
  pos->position = m_curPosition;
  pos->cluster = m_curCluster;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
   d64ba:	b5f0      	push	{r4, r5, r6, r7, lr}
   d64bc:	b093      	sub	sp, #76	; 0x4c
   d64be:	461f      	mov	r7, r3
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d64c0:	2300      	movs	r3, #0
   d64c2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   d64c6:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  fname_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
   d64ca:	7803      	ldrb	r3, [r0, #0]
void FatFile::getpos(FatPos_t* pos) {
  pos->position = m_curPosition;
  pos->cluster = m_curCluster;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
   d64cc:	9201      	str	r2, [sp, #4]
   d64ce:	4606      	mov	r6, r0
   d64d0:	460c      	mov	r4, r1
  fname_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
   d64d2:	2b00      	cmp	r3, #0
   d64d4:	d13e      	bne.n	d6554 <_ZN7FatFile5mkdirEPS_PKcb+0x9a>
   d64d6:	780b      	ldrb	r3, [r1, #0]
   d64d8:	f013 0f70 	tst.w	r3, #112	; 0x70
   d64dc:	d03a      	beq.n	d6554 <_ZN7FatFile5mkdirEPS_PKcb+0x9a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
   d64de:	7813      	ldrb	r3, [r2, #0]
   d64e0:	2b2f      	cmp	r3, #47	; 0x2f
   d64e2:	d10c      	bne.n	d64fe <_ZN7FatFile5mkdirEPS_PKcb+0x44>
    while (isDirSeparator(*path)) {
   d64e4:	9b01      	ldr	r3, [sp, #4]
   d64e6:	781a      	ldrb	r2, [r3, #0]
   d64e8:	2a2f      	cmp	r2, #47	; 0x2f
   d64ea:	d102      	bne.n	d64f2 <_ZN7FatFile5mkdirEPS_PKcb+0x38>
      path++;
   d64ec:	3301      	adds	r3, #1
   d64ee:	9301      	str	r3, [sp, #4]
  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
   d64f0:	e7f8      	b.n	d64e4 <_ZN7FatFile5mkdirEPS_PKcb+0x2a>
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
   d64f2:	68a1      	ldr	r1, [r4, #8]
   d64f4:	a809      	add	r0, sp, #36	; 0x24
   d64f6:	f7ff fce4 	bl	d5ec2 <_ZN7FatFile8openRootEP9FatVolume>
   d64fa:	b358      	cbz	r0, d6554 <_ZN7FatFile5mkdirEPS_PKcb+0x9a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
   d64fc:	ac09      	add	r4, sp, #36	; 0x24
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
   d64fe:	aa01      	add	r2, sp, #4
   d6500:	a903      	add	r1, sp, #12
   d6502:	9801      	ldr	r0, [sp, #4]
   d6504:	f000 f9b4 	bl	d6870 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   d6508:	b320      	cbz	r0, d6554 <_ZN7FatFile5mkdirEPS_PKcb+0x9a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
   d650a:	9b01      	ldr	r3, [sp, #4]
   d650c:	781b      	ldrb	r3, [r3, #0]
   d650e:	b1db      	cbz	r3, d6548 <_ZN7FatFile5mkdirEPS_PKcb+0x8e>
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
   d6510:	2300      	movs	r3, #0
   d6512:	aa03      	add	r2, sp, #12
   d6514:	4621      	mov	r1, r4
   d6516:	4630      	mov	r0, r6
   d6518:	f000 fb4e 	bl	d6bb8 <_ZN7FatFile4openEPS_P7fname_ti>
   d651c:	b158      	cbz	r0, d6536 <_ZN7FatFile5mkdirEPS_PKcb+0x7c>
      if (!pFlag || !mkdir(parent, &fname)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
   d651e:	4635      	mov	r5, r6
   d6520:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6522:	ac09      	add	r4, sp, #36	; 0x24
   d6524:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6526:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6528:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d652a:	682b      	ldr	r3, [r5, #0]
   d652c:	6023      	str	r3, [r4, #0]
    parent = &tmpDir;
    close();
   d652e:	4630      	mov	r0, r6
   d6530:	f7ff fedc 	bl	d62ec <_ZN7FatFile5closeEv>
   d6534:	e7e2      	b.n	d64fc <_ZN7FatFile5mkdirEPS_PKcb+0x42>
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
      if (!pFlag || !mkdir(parent, &fname)) {
   d6536:	b16f      	cbz	r7, d6554 <_ZN7FatFile5mkdirEPS_PKcb+0x9a>
   d6538:	aa03      	add	r2, sp, #12
   d653a:	4621      	mov	r1, r4
   d653c:	4630      	mov	r0, r6
   d653e:	f7ff ff3f 	bl	d63c0 <_ZN7FatFile5mkdirEPS_P7fname_t>
   d6542:	2800      	cmp	r0, #0
   d6544:	d1eb      	bne.n	d651e <_ZN7FatFile5mkdirEPS_PKcb+0x64>
   d6546:	e005      	b.n	d6554 <_ZN7FatFile5mkdirEPS_PKcb+0x9a>
    }
    tmpDir = *this;
    parent = &tmpDir;
    close();
  }
  return mkdir(parent, &fname);
   d6548:	aa03      	add	r2, sp, #12
   d654a:	4621      	mov	r1, r4
   d654c:	4630      	mov	r0, r6
   d654e:	f7ff ff37 	bl	d63c0 <_ZN7FatFile5mkdirEPS_P7fname_t>
   d6552:	e000      	b.n	d6556 <_ZN7FatFile5mkdirEPS_PKcb+0x9c>

fail:
  return false;
   d6554:	2000      	movs	r0, #0
}
   d6556:	b013      	add	sp, #76	; 0x4c
   d6558:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d655c <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d655c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d6560:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d6562:	4689      	mov	r9, r1
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d6564:	0719      	lsls	r1, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d6566:	4604      	mov	r4, r0
   d6568:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d656a:	d508      	bpl.n	d657e <_ZN7FatFile5writeEPKvj+0x22>
   d656c:	7883      	ldrb	r3, [r0, #2]
   d656e:	079a      	lsls	r2, r3, #30
   d6570:	d505      	bpl.n	d657e <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   d6572:	071b      	lsls	r3, r3, #28
   d6574:	d50b      	bpl.n	d658e <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
   d6576:	69e1      	ldr	r1, [r4, #28]
   d6578:	f7ff fd8b 	bl	d6092 <_ZN7FatFile7seekSetEm>
   d657c:	b938      	cbnz	r0, d658e <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   d657e:	7863      	ldrb	r3, [r4, #1]
   d6580:	f043 0301 	orr.w	r3, r3, #1
   d6584:	7063      	strb	r3, [r4, #1]
  return -1;
   d6586:	f04f 30ff 	mov.w	r0, #4294967295
   d658a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   d658e:	6963      	ldr	r3, [r4, #20]
   d6590:	43db      	mvns	r3, r3
   d6592:	4598      	cmp	r8, r3
   d6594:	d8f3      	bhi.n	d657e <_ZN7FatFile5writeEPKvj+0x22>
   d6596:	4646      	mov	r6, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d6598:	f04f 0a00 	mov.w	sl, #0
   d659c:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d659e:	2e00      	cmp	r6, #0
   d65a0:	f000 8081 	beq.w	d66a6 <_ZN7FatFile5writeEPKvj+0x14a>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   d65a4:	68a0      	ldr	r0, [r4, #8]
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d65a6:	7942      	ldrb	r2, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
   d65a8:	ea12 2553 	ands.w	r5, r2, r3, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
   d65ac:	f3c3 0708 	ubfx	r7, r3, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   d65b0:	d11c      	bne.n	d65ec <_ZN7FatFile5writeEPKvj+0x90>
   d65b2:	b9df      	cbnz	r7, d65ec <_ZN7FatFile5writeEPKvj+0x90>
      // start of new cluster
      if (m_curCluster != 0) {
   d65b4:	6921      	ldr	r1, [r4, #16]
   d65b6:	b171      	cbz	r1, d65d6 <_ZN7FatFile5writeEPKvj+0x7a>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d65b8:	f104 0210 	add.w	r2, r4, #16
   d65bc:	f7ff faa9 	bl	d5b12 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   d65c0:	2800      	cmp	r0, #0
   d65c2:	dbdc      	blt.n	d657e <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   d65c4:	f040 808e 	bne.w	d66e4 <_ZN7FatFile5writeEPKvj+0x188>
          // add cluster if at end of chain
          if (!addCluster()) {
   d65c8:	4620      	mov	r0, r4
   d65ca:	f7ff fbf7 	bl	d5dbc <_ZN7FatFile10addClusterEv>
   d65ce:	2800      	cmp	r0, #0
   d65d0:	f040 8088 	bne.w	d66e4 <_ZN7FatFile5writeEPKvj+0x188>
   d65d4:	e7d3      	b.n	d657e <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
   d65d6:	6a23      	ldr	r3, [r4, #32]
   d65d8:	b93b      	cbnz	r3, d65ea <_ZN7FatFile5writeEPKvj+0x8e>
          // allocate first cluster of file
          if (!addCluster()) {
   d65da:	4620      	mov	r0, r4
   d65dc:	f7ff fbee 	bl	d5dbc <_ZN7FatFile10addClusterEv>
   d65e0:	2800      	cmp	r0, #0
   d65e2:	d0cc      	beq.n	d657e <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
   d65e4:	6923      	ldr	r3, [r4, #16]
   d65e6:	6223      	str	r3, [r4, #32]
   d65e8:	e000      	b.n	d65ec <_ZN7FatFile5writeEPKvj+0x90>
        } else {
          m_curCluster = m_firstCluster;
   d65ea:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d65ec:	6921      	ldr	r1, [r4, #16]
   d65ee:	68a0      	ldr	r0, [r4, #8]
   d65f0:	f7ff fa89 	bl	d5b06 <_ZNK9FatVolume17clusterFirstBlockEm>
   d65f4:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
   d65f6:	b917      	cbnz	r7, d65fe <_ZN7FatFile5writeEPKvj+0xa2>
   d65f8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d65fc:	d221      	bcs.n	d6642 <_ZN7FatFile5writeEPKvj+0xe6>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   d65fe:	f5c7 7500 	rsb	r5, r7, #512	; 0x200
   d6602:	42b5      	cmp	r5, r6
   d6604:	bf28      	it	cs
   d6606:	4635      	movcs	r5, r6
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   d6608:	b937      	cbnz	r7, d6618 <_ZN7FatFile5writeEPKvj+0xbc>
   d660a:	6963      	ldr	r3, [r4, #20]
   d660c:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   d660e:	4293      	cmp	r3, r2
   d6610:	bf34      	ite	cc
   d6612:	2201      	movcc	r2, #1
   d6614:	2205      	movcs	r2, #5
   d6616:	e000      	b.n	d661a <_ZN7FatFile5writeEPKvj+0xbe>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
   d6618:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d661a:	68a0      	ldr	r0, [r4, #8]
   d661c:	3024      	adds	r0, #36	; 0x24
   d661e:	f7ff fa41 	bl	d5aa4 <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   d6622:	2800      	cmp	r0, #0
   d6624:	d0ab      	beq.n	d657e <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d6626:	4438      	add	r0, r7
   d6628:	462a      	mov	r2, r5
   d662a:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   d662c:	442f      	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d662e:	f004 fede 	bl	db3ee <memcpy>
      if (512 == (n + blockOffset)) {
   d6632:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
   d6636:	d130      	bne.n	d669a <_ZN7FatFile5writeEPKvj+0x13e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d6638:	68a0      	ldr	r0, [r4, #8]
   d663a:	3024      	adds	r0, #36	; 0x24
   d663c:	f7ff fa0b 	bl	d5a56 <_ZN8FatCache4syncEv>
   d6640:	e017      	b.n	d6672 <_ZN7FatFile5writeEPKvj+0x116>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
   d6642:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d6646:	68a0      	ldr	r0, [r4, #8]
   d6648:	d315      	bcc.n	d6676 <_ZN7FatFile5writeEPKvj+0x11a>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
   d664a:	7902      	ldrb	r2, [r0, #4]
   d664c:	1b52      	subs	r2, r2, r5
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
   d664e:	0a73      	lsrs	r3, r6, #9
      if (nb > maxBlocks) {
   d6650:	b2d2      	uxtb	r2, r2
   d6652:	4293      	cmp	r3, r2
   d6654:	bf28      	it	cs
   d6656:	4613      	movcs	r3, r2
   d6658:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        nb = maxBlocks;
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d665a:	4291      	cmp	r1, r2
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
        nb = maxBlocks;
      }
      n = 512*nb;
   d665c:	ea4f 2543 	mov.w	r5, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d6660:	d302      	bcc.n	d6668 <_ZN7FatFile5writeEPKvj+0x10c>
   d6662:	441a      	add	r2, r3
   d6664:	4291      	cmp	r1, r2
   d6666:	d337      	bcc.n	d66d8 <_ZN7FatFile5writeEPKvj+0x17c>
   d6668:	68a7      	ldr	r7, [r4, #8]
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t nb) {
    return m_blockDev->writeBlocks(block, src, nb);
   d666a:	464a      	mov	r2, r9
   d666c:	6838      	ldr	r0, [r7, #0]
   d666e:	f7ff f9d1 	bl	d5a14 <_ZN9SdSpiCard11writeBlocksEmPKhj>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   d6672:	b990      	cbnz	r0, d669a <_ZN7FatFile5writeEPKvj+0x13e>
   d6674:	e783      	b.n	d657e <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
   d6676:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d6678:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d667a:	bf02      	ittt	eq
   d667c:	f04f 33ff 	moveq.w	r3, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d6680:	f880 a024 	strbeq.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d6684:	62c3      	streq	r3, [r0, #44]	; 0x2c
   d6686:	68a3      	ldr	r3, [r4, #8]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d6688:	464a      	mov	r2, r9
   d668a:	6818      	ldr	r0, [r3, #0]
   d668c:	f7ff f950 	bl	d5930 <_ZN9SdSpiCard10writeBlockEmPKh>
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
   d6690:	2800      	cmp	r0, #0
   d6692:	f43f af74 	beq.w	d657e <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
   d6696:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   d669a:	6963      	ldr	r3, [r4, #20]
   d669c:	442b      	add	r3, r5
   d669e:	6163      	str	r3, [r4, #20]
    src += n;
   d66a0:	44a9      	add	r9, r5
    nToWrite -= n;
   d66a2:	1b76      	subs	r6, r6, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d66a4:	e77a      	b.n	d659c <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
   d66a6:	69e2      	ldr	r2, [r4, #28]
   d66a8:	4293      	cmp	r3, r2
   d66aa:	d901      	bls.n	d66b0 <_ZN7FatFile5writeEPKvj+0x154>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
   d66ac:	61e3      	str	r3, [r4, #28]
   d66ae:	e002      	b.n	d66b6 <_ZN7FatFile5writeEPKvj+0x15a>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
   d66b0:	4b0f      	ldr	r3, [pc, #60]	; (d66f0 <_ZN7FatFile5writeEPKvj+0x194>)
   d66b2:	681b      	ldr	r3, [r3, #0]
   d66b4:	b11b      	cbz	r3, d66be <_ZN7FatFile5writeEPKvj+0x162>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
   d66b6:	78a3      	ldrb	r3, [r4, #2]
   d66b8:	f043 0304 	orr.w	r3, r3, #4
   d66bc:	70a3      	strb	r3, [r4, #2]
  }

  if (m_flags & F_SYNC) {
   d66be:	f994 3002 	ldrsb.w	r3, [r4, #2]
   d66c2:	2b00      	cmp	r3, #0
   d66c4:	db02      	blt.n	d66cc <_ZN7FatFile5writeEPKvj+0x170>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
   d66c6:	4640      	mov	r0, r8
   d66c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & F_SYNC) {
    if (!sync()) {
   d66cc:	4620      	mov	r0, r4
   d66ce:	f7ff fdd7 	bl	d6280 <_ZN7FatFile4syncEv>
   d66d2:	2800      	cmp	r0, #0
   d66d4:	d1f7      	bne.n	d66c6 <_ZN7FatFile5writeEPKvj+0x16a>
   d66d6:	e752      	b.n	d657e <_ZN7FatFile5writeEPKvj+0x22>
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d66d8:	f04f 32ff 	mov.w	r2, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d66dc:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d66e0:	62c2      	str	r2, [r0, #44]	; 0x2c
   d66e2:	e7c1      	b.n	d6668 <_ZN7FatFile5writeEPKvj+0x10c>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d66e4:	6921      	ldr	r1, [r4, #16]
   d66e6:	68a0      	ldr	r0, [r4, #8]
   d66e8:	f7ff fa0d 	bl	d5b06 <_ZNK9FatVolume17clusterFirstBlockEm>
   d66ec:	4601      	mov	r1, r0
   d66ee:	e783      	b.n	d65f8 <_ZN7FatFile5writeEPKvj+0x9c>
   d66f0:	2003e318 	.word	0x2003e318

000d66f4 <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
   d66f4:	f001 ba20 	b.w	d7b38 <HAL_Pin_Map>

000d66f8 <_ZN7FatFile6getSFNEPc>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
#include "FatFileSystem.h"
//------------------------------------------------------------------------------
bool FatFile::getSFN(char* name) {
   d66f8:	b510      	push	{r4, lr}
   d66fa:	460c      	mov	r4, r1
   d66fc:	7801      	ldrb	r1, [r0, #0]
  dir_t* dir;
  if (!isOpen()) {
   d66fe:	b909      	cbnz	r1, d6704 <_ZN7FatFile6getSFNEPc+0xc>
  // format name
  dirName(dir, name);
  return true;

fail:
  return false;
   d6700:	2000      	movs	r0, #0
   d6702:	bd10      	pop	{r4, pc}
  dir_t* dir;
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
   d6704:	f011 0160 	ands.w	r1, r1, #96	; 0x60
   d6708:	d004      	beq.n	d6714 <_ZN7FatFile6getSFNEPc+0x1c>
    name[0] = '/';
   d670a:	232f      	movs	r3, #47	; 0x2f
   d670c:	7023      	strb	r3, [r4, #0]
    name[1] = '\0';
   d670e:	2300      	movs	r3, #0
   d6710:	7063      	strb	r3, [r4, #1]
   d6712:	e006      	b.n	d6722 <_ZN7FatFile6getSFNEPc+0x2a>
    return true;
  }
  // cache entry
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
   d6714:	f7ff fb9c 	bl	d5e50 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   d6718:	2800      	cmp	r0, #0
   d671a:	d0f1      	beq.n	d6700 <_ZN7FatFile6getSFNEPc+0x8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // format name
  dirName(dir, name);
   d671c:	4621      	mov	r1, r4
   d671e:	f7ff fba6 	bl	d5e6e <_ZN7FatFile7dirNameEPK14directoryEntryPc>
  return true;
   d6722:	2001      	movs	r0, #1

fail:
  return false;
}
   d6724:	bd10      	pop	{r4, pc}

000d6726 <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
   d6726:	f001 ba07 	b.w	d7b38 <HAL_Pin_Map>

000d672a <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
   d672a:	f001 ba05 	b.w	d7b38 <HAL_Pin_Map>

000d672e <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
   d672e:	f001 ba03 	b.w	d7b38 <HAL_Pin_Map>

000d6732 <_ZN7FatFile11lfnChecksumEPh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
   d6732:	1e41      	subs	r1, r0, #1
   d6734:	f100 020a 	add.w	r2, r0, #10
  uint8_t sum = 0;
   d6738:	2000      	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d673a:	0843      	lsrs	r3, r0, #1
   d673c:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
   d6740:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   d6744:	fa53 f080 	uxtab	r0, r3, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d6748:	428a      	cmp	r2, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d674a:	b2c0      	uxtb	r0, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d674c:	d1f5      	bne.n	d673a <_ZN7FatFile11lfnChecksumEPh+0x8>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
   d674e:	4770      	bx	lr

000d6750 <_ZN7FatFile11openClusterEPS_>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   d6750:	b538      	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
   d6752:	68cb      	ldr	r3, [r1, #12]
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   d6754:	4604      	mov	r4, r0
   d6756:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
   d6758:	b923      	cbnz	r3, d6764 <_ZN7FatFile11openClusterEPS_+0x14>
    return openRoot(file->m_vol);
   d675a:	6889      	ldr	r1, [r1, #8]
  m_attr = FILE_ATTR_SUBDIR;
  m_flags = F_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
   d675c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
   d6760:	f7ff bbaf 	b.w	d5ec2 <_ZN7FatFile8openRootEP9FatVolume>
  }
  memset(this, 0, sizeof(FatFile));
   d6764:	2224      	movs	r2, #36	; 0x24
   d6766:	2100      	movs	r1, #0
   d6768:	f004 fe4c 	bl	db404 <memset>
  m_attr = FILE_ATTR_SUBDIR;
   d676c:	2310      	movs	r3, #16
  m_flags = F_READ;
   d676e:	2001      	movs	r0, #1
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attr = FILE_ATTR_SUBDIR;
   d6770:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   d6772:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
   d6774:	68ab      	ldr	r3, [r5, #8]
   d6776:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
   d6778:	68eb      	ldr	r3, [r5, #12]
   d677a:	6223      	str	r3, [r4, #32]
  return true;
}
   d677c:	bd38      	pop	{r3, r4, r5, pc}

000d677e <_ZN7FatFile7getNameEPcj>:
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    lfnPutChar(ldir, i, c);
  }
}
//==============================================================================
bool FatFile::getName(char* name, size_t size) {
   d677e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6782:	b08b      	sub	sp, #44	; 0x2c
  FatFile dirFile;
  ldir_t* ldir;
  if (!isOpen() || size < 13) {
   d6784:	7803      	ldrb	r3, [r0, #0]
   d6786:	2500      	movs	r5, #0
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    lfnPutChar(ldir, i, c);
  }
}
//==============================================================================
bool FatFile::getName(char* name, size_t size) {
   d6788:	4680      	mov	r8, r0
   d678a:	460e      	mov	r6, r1
   d678c:	4617      	mov	r7, r2
   d678e:	f88d 5004 	strb.w	r5, [sp, #4]
   d6792:	f88d 5005 	strb.w	r5, [sp, #5]
  FatFile dirFile;
  ldir_t* ldir;
  if (!isOpen() || size < 13) {
   d6796:	b163      	cbz	r3, d67b2 <_ZN7FatFile7getNameEPcj+0x34>
   d6798:	2a0c      	cmp	r2, #12
   d679a:	d90a      	bls.n	d67b2 <_ZN7FatFile7getNameEPcj+0x34>
   d679c:	e00e      	b.n	d67bc <_ZN7FatFile7getNameEPcj+0x3e>
    goto fail;
  }
  if (!isLFN()) {
    return getSFN(name);
  }
  if (!dirFile.openCluster(this)) {
   d679e:	4641      	mov	r1, r8
   d67a0:	a801      	add	r0, sp, #4
   d67a2:	f7ff ffd5 	bl	d6750 <_ZN7FatFile11openClusterEPS_>
   d67a6:	b120      	cbz	r0, d67b2 <_ZN7FatFile7getNameEPcj+0x34>
   d67a8:	2401      	movs	r4, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t ord = 1; ord <= m_lfnOrd; ord++) {
   d67aa:	f898 3003 	ldrb.w	r3, [r8, #3]
   d67ae:	42a3      	cmp	r3, r4
   d67b0:	d20b      	bcs.n	d67ca <_ZN7FatFile7getNameEPcj+0x4c>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  name[0] = 0;
   d67b2:	f04f 0900 	mov.w	r9, #0
   d67b6:	f886 9000 	strb.w	r9, [r6]
  return false;
   d67ba:	e055      	b.n	d6868 <_ZN7FatFile7getNameEPcj+0xea>
  ldir_t* ldir;
  if (!isOpen() || size < 13) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
   d67bc:	78c3      	ldrb	r3, [r0, #3]
   d67be:	2b00      	cmp	r3, #0
   d67c0:	d1ed      	bne.n	d679e <_ZN7FatFile7getNameEPcj+0x20>
    return getSFN(name);
   d67c2:	f7ff ff99 	bl	d66f8 <_ZN7FatFile6getSFNEPc>
   d67c6:	4681      	mov	r9, r0
   d67c8:	e04e      	b.n	d6868 <_ZN7FatFile7getNameEPcj+0xea>
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t ord = 1; ord <= m_lfnOrd; ord++) {
    if (!dirFile.seekSet(32UL*(m_dirIndex - ord))) {
   d67ca:	f8b8 1004 	ldrh.w	r1, [r8, #4]
   d67ce:	1b09      	subs	r1, r1, r4
   d67d0:	0149      	lsls	r1, r1, #5
   d67d2:	a801      	add	r0, sp, #4
   d67d4:	f7ff fc5d 	bl	d6092 <_ZN7FatFile7seekSetEm>
   d67d8:	4681      	mov	r9, r0
   d67da:	2800      	cmp	r0, #0
   d67dc:	d0e9      	beq.n	d67b2 <_ZN7FatFile7getNameEPcj+0x34>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
   d67de:	2100      	movs	r1, #0
   d67e0:	a801      	add	r0, sp, #4
   d67e2:	f7ff fc39 	bl	d6058 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d67e6:	2800      	cmp	r0, #0
   d67e8:	d0e3      	beq.n	d67b2 <_ZN7FatFile7getNameEPcj+0x34>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attr != DIR_ATT_LONG_NAME) {
   d67ea:	7ac3      	ldrb	r3, [r0, #11]
   d67ec:	2b0f      	cmp	r3, #15
   d67ee:	d1e0      	bne.n	d67b2 <_ZN7FatFile7getNameEPcj+0x34>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ord != (ldir->ord & 0X1F)) {
   d67f0:	7803      	ldrb	r3, [r0, #0]
   d67f2:	f003 031f 	and.w	r3, r3, #31
   d67f6:	429c      	cmp	r4, r3
   d67f8:	d1db      	bne.n	d67b2 <_ZN7FatFile7getNameEPcj+0x34>
  return 0;
}
//------------------------------------------------------------------------------
static bool lfnGetName(ldir_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d67fa:	1e63      	subs	r3, r4, #1
   d67fc:	220d      	movs	r2, #13
   d67fe:	435a      	muls	r2, r3
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
   d6800:	eb06 0e02 	add.w	lr, r6, r2
  return 0;
}
//------------------------------------------------------------------------------
static bool lfnGetName(ldir_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d6804:	2300      	movs	r3, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   d6806:	2b04      	cmp	r3, #4
   d6808:	b2d9      	uxtb	r1, r3
   d680a:	d804      	bhi.n	d6816 <_ZN7FatFile7getNameEPcj+0x98>
    return ldir->name1[i];
   d680c:	eb00 0143 	add.w	r1, r0, r3, lsl #1
   d6810:	f8b1 1001 	ldrh.w	r1, [r1, #1]
   d6814:	e00b      	b.n	d682e <_ZN7FatFile7getNameEPcj+0xb0>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d6816:	290a      	cmp	r1, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   d6818:	bf95      	itete	ls
   d681a:	f103 31ff 	addls.w	r1, r3, #4294967295
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d681e:	1c59      	addhi	r1, r3, #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d6820:	eb00 0141 	addls.w	r1, r0, r1, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d6824:	eb00 0141 	addhi.w	r1, r0, r1, lsl #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d6828:	bf94      	ite	ls
   d682a:	88c9      	ldrhls	r1, [r1, #6]
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d682c:	8889      	ldrhhi	r1, [r1, #4]
static bool lfnGetName(ldir_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
   d682e:	b161      	cbz	r1, d684a <_ZN7FatFile7getNameEPcj+0xcc>
   d6830:	4297      	cmp	r7, r2
   d6832:	d910      	bls.n	d6856 <_ZN7FatFile7getNameEPcj+0xd8>
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
   d6834:	297e      	cmp	r1, #126	; 0x7e
   d6836:	bf94      	ite	ls
   d6838:	b2c9      	uxtbls	r1, r1
   d683a:	213f      	movhi	r1, #63	; 0x3f
   d683c:	f80e 1003 	strb.w	r1, [lr, r3]
   d6840:	3301      	adds	r3, #1
}
//------------------------------------------------------------------------------
static bool lfnGetName(ldir_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
   d6842:	2b0d      	cmp	r3, #13
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
   d6844:	f102 0201 	add.w	r2, r2, #1
}
//------------------------------------------------------------------------------
static bool lfnGetName(ldir_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
   d6848:	d1dd      	bne.n	d6806 <_ZN7FatFile7getNameEPcj+0x88>
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
  }
  // Terminate with zero byte if name fits.
  if (k < n && (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY)) {
   d684a:	4297      	cmp	r7, r2
   d684c:	d903      	bls.n	d6856 <_ZN7FatFile7getNameEPcj+0xd8>
   d684e:	7803      	ldrb	r3, [r0, #0]
   d6850:	0659      	lsls	r1, r3, #25
    name[k] = 0;
   d6852:	bf48      	it	mi
   d6854:	54b5      	strbmi	r5, [r6, r2]
  }
  // Truncate if name is too long.
  name[n - 1] = 0;
   d6856:	19f3      	adds	r3, r6, r7
   d6858:	f803 5c01 	strb.w	r5, [r3, #-1]
    }
    if (!lfnGetName(ldir, name, size)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
   d685c:	7803      	ldrb	r3, [r0, #0]
   d685e:	065b      	lsls	r3, r3, #25
   d6860:	d402      	bmi.n	d6868 <_ZN7FatFile7getNameEPcj+0xea>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t ord = 1; ord <= m_lfnOrd; ord++) {
   d6862:	3401      	adds	r4, #1
   d6864:	b2e4      	uxtb	r4, r4
   d6866:	e7a0      	b.n	d67aa <_ZN7FatFile7getNameEPcj+0x2c>
  DBG_FAIL_MACRO;

fail:
  name[0] = 0;
  return false;
}
   d6868:	4648      	mov	r0, r9
   d686a:	b00b      	add	sp, #44	; 0x2c
   d686c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6870 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   d6870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   d6874:	7803      	ldrb	r3, [r0, #0]
   d6876:	2b20      	cmp	r3, #32
   d6878:	f100 0401 	add.w	r4, r0, #1
   d687c:	d101      	bne.n	d6882 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12>
   d687e:	4620      	mov	r0, r4
   d6880:	e7f8      	b.n	d6874 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d6882:	4f70      	ldr	r7, [pc, #448]	; (d6a44 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1d4>)

  // Skip leading spaces.
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;
   d6884:	6088      	str	r0, [r1, #8]
   d6886:	4605      	mov	r5, r0
   d6888:	1a2c      	subs	r4, r5, r0

  for (len = 0; ; len++) {
    c = path[len];
   d688a:	462e      	mov	r6, r5
   d688c:	f815 3b01 	ldrb.w	r3, [r5], #1
    if (c == 0 || isDirSeparator(c)) {
   d6890:	b30b      	cbz	r3, d68d6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d6892:	2b2f      	cmp	r3, #47	; 0x2f
   d6894:	d101      	bne.n	d689a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2a>
   d6896:	1903      	adds	r3, r0, r4
   d6898:	e017      	b.n	d68ca <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d689a:	2b5c      	cmp	r3, #92	; 0x5c
   d689c:	d102      	bne.n	d68a4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x34>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   d689e:	2000      	movs	r0, #0
   d68a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d68a4:	f1a3 0422 	sub.w	r4, r3, #34	; 0x22
   d68a8:	b2e4      	uxtb	r4, r4
   d68aa:	2c1d      	cmp	r4, #29
   d68ac:	d803      	bhi.n	d68b6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x46>
   d68ae:	fa27 f404 	lsr.w	r4, r7, r4
   d68b2:	07e4      	lsls	r4, r4, #31
   d68b4:	d4f3      	bmi.n	d689e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   d68b6:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
   d68ba:	2c3c      	cmp	r4, #60	; 0x3c
   d68bc:	d0ef      	beq.n	d689e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
   d68be:	3b20      	subs	r3, #32
   d68c0:	2b5e      	cmp	r3, #94	; 0x5e
   d68c2:	d9e1      	bls.n	d6888 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18>
   d68c4:	e7eb      	b.n	d689e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   d68c6:	2d2f      	cmp	r5, #47	; 0x2f
   d68c8:	d105      	bne.n	d68d6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d68ca:	461e      	mov	r6, r3
   d68cc:	f813 5b01 	ldrb.w	r5, [r3], #1
   d68d0:	2d20      	cmp	r5, #32
   d68d2:	d1f8      	bne.n	d68c6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x56>
   d68d4:	e7f9      	b.n	d68ca <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  *ptr = &path[end];
   d68d6:	6016      	str	r6, [r2, #0]
   d68d8:	1903      	adds	r3, r0, r4

  // Back over spaces and dots.
  while (len) {
   d68da:	4298      	cmp	r0, r3
   d68dc:	ebc0 0803 	rsb	r8, r0, r3
   d68e0:	d009      	beq.n	d68f6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x86>
    c = path[len - 1];
   d68e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   d68e6:	2a2e      	cmp	r2, #46	; 0x2e
   d68e8:	d0f7      	beq.n	d68da <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
   d68ea:	2a20      	cmp	r2, #32
   d68ec:	d0f5      	beq.n	d68da <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
   d68ee:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   d68f2:	dcd4      	bgt.n	d689e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
   d68f4:	e001      	b.n	d68fa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x8a>
   d68f6:	f04f 0800 	mov.w	r8, #0
    return false;
  }
  fname->len = len;
   d68fa:	f8c1 8004 	str.w	r8, [r1, #4]
   d68fe:	f101 030c 	add.w	r3, r1, #12
   d6902:	f101 0217 	add.w	r2, r1, #23
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
   d6906:	2420      	movs	r4, #32
   d6908:	f803 4f01 	strb.w	r4, [r3, #1]!
  if (len > 255) {
    return false;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
   d690c:	4293      	cmp	r3, r2
   d690e:	d1fb      	bne.n	d6908 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x98>
   d6910:	4603      	mov	r3, r0
   d6912:	1a1a      	subs	r2, r3, r0
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   d6914:	f813 4b01 	ldrb.w	r4, [r3], #1
   d6918:	2c2e      	cmp	r4, #46	; 0x2e
   d691a:	d0fa      	beq.n	d6912 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
   d691c:	2c20      	cmp	r4, #32
   d691e:	d0f8      	beq.n	d6912 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
  // Not 8.3 if leading dot or space.
  is83 = !si;
   d6920:	fab2 f482 	clz	r4, r2
   d6924:	0964      	lsrs	r4, r4, #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   d6926:	f108 36ff 	add.w	r6, r8, #4294967295
   d692a:	1c73      	adds	r3, r6, #1
   d692c:	d107      	bne.n	d693e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   d692e:	2700      	movs	r7, #0
   d6930:	f04f 0e07 	mov.w	lr, #7
   d6934:	463d      	mov	r5, r7
   d6936:	46ba      	mov	sl, r7
   d6938:	f04f 0908 	mov.w	r9, #8
   d693c:	e009      	b.n	d6952 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe2>
   d693e:	5d83      	ldrb	r3, [r0, r6]
   d6940:	2b2e      	cmp	r3, #46	; 0x2e
   d6942:	d0f4      	beq.n	d692e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbe>
   d6944:	3e01      	subs	r6, #1
   d6946:	e7f0      	b.n	d692a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (; si < len; si++) {
    c = path[si];
   d6948:	5c83      	ldrb	r3, [r0, r2]
    if (c == ' ' || (c == '.' && dot != si)) {
   d694a:	2b20      	cmp	r3, #32
   d694c:	d104      	bne.n	d6958 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe8>
      is83 = false;
   d694e:	2400      	movs	r4, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
   d6950:	3201      	adds	r2, #1
   d6952:	4542      	cmp	r2, r8
   d6954:	dbf8      	blt.n	d6948 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd8>
   d6956:	e04b      	b.n	d69f0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x180>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
   d6958:	2b2e      	cmp	r3, #46	; 0x2e
   d695a:	d102      	bne.n	d6962 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf2>
   d695c:	42b2      	cmp	r2, r6
   d695e:	d1f6      	bne.n	d694e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
   d6960:	e003      	b.n	d696a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xfa>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character else false.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
   d6962:	2b22      	cmp	r3, #34	; 0x22
   d6964:	d017      	beq.n	d6996 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
   d6966:	2b7c      	cmp	r3, #124	; 0x7c
   d6968:	d015      	beq.n	d6996 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   d696a:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   d696e:	f1bc 0f05 	cmp.w	ip, #5
   d6972:	d801      	bhi.n	d6978 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x108>
   d6974:	2b2d      	cmp	r3, #45	; 0x2d
   d6976:	d10e      	bne.n	d6996 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
   d6978:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   d697c:	f1bc 0f05 	cmp.w	ip, #5
   d6980:	d909      	bls.n	d6996 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
   d6982:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   d6986:	f1bc 0f02 	cmp.w	ip, #2
   d698a:	d904      	bls.n	d6996 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
   d698c:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   d6990:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   d6994:	d902      	bls.n	d699c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12c>
   d6996:	42b2      	cmp	r2, r6
   d6998:	d10e      	bne.n	d69b8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x148>
   d699a:	e049      	b.n	d6a30 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d699c:	42b2      	cmp	r2, r6
   d699e:	d047      	beq.n	d6a30 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
   d69a0:	4575      	cmp	r5, lr
   d69a2:	d821      	bhi.n	d69e8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
   d69a4:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   d69a8:	f1bc 0f19 	cmp.w	ip, #25
   d69ac:	d808      	bhi.n	d69c0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x150>
        c += 'A' - 'a';
   d69ae:	3b20      	subs	r3, #32
   d69b0:	b2db      	uxtb	r3, r3
        lc |= bit;
   d69b2:	ea49 0707 	orr.w	r7, r9, r7
   d69b6:	e00a      	b.n	d69ce <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15e>
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d69b8:	4575      	cmp	r5, lr
   d69ba:	d815      	bhi.n	d69e8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
   d69bc:	2400      	movs	r4, #0
      c = '_';
   d69be:	235f      	movs	r3, #95	; 0x5f
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
   d69c0:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   d69c4:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   d69c8:	bf98      	it	ls
   d69ca:	ea49 0a0a 	orrls.w	sl, r9, sl
      }
      fname->sfn[i++] = c;
   d69ce:	f105 0c01 	add.w	ip, r5, #1
   d69d2:	fa5f fc8c 	uxtb.w	ip, ip
   d69d6:	440d      	add	r5, r1
      if (i < 7) {
   d69d8:	f1bc 0f06 	cmp.w	ip, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
   d69dc:	736b      	strb	r3, [r5, #13]
      if (i < 7) {
   d69de:	d801      	bhi.n	d69e4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x174>
        fname->seqPos = i;
   d69e0:	f881 c00c 	strb.w	ip, [r1, #12]
   d69e4:	4665      	mov	r5, ip
   d69e6:	e7b3      	b.n	d6950 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d69e8:	f1be 0f0a 	cmp.w	lr, #10
   d69ec:	d117      	bne.n	d6a1e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ae>
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
   d69ee:	2400      	movs	r4, #0
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
   d69f0:	7b4b      	ldrb	r3, [r1, #13]
   d69f2:	2b20      	cmp	r3, #32
   d69f4:	f43f af53 	beq.w	d689e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
    return false;
  }

  if (is83) {
   d69f8:	b13c      	cbz	r4, d6a0a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x19a>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   d69fa:	ea1a 0f07 	tst.w	sl, r7
   d69fe:	bf18      	it	ne
   d6a00:	2702      	movne	r7, #2
   d6a02:	700f      	strb	r7, [r1, #0]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
   d6a04:	2001      	movs	r0, #1
   d6a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
   d6a0a:	7b0b      	ldrb	r3, [r1, #12]
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
   d6a0c:	2001      	movs	r0, #1
   d6a0e:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   d6a10:	4419      	add	r1, r3
   d6a12:	237e      	movs	r3, #126	; 0x7e
   d6a14:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   d6a16:	2331      	movs	r3, #49	; 0x31
   d6a18:	738b      	strb	r3, [r1, #14]
   d6a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
   d6a1e:	42b2      	cmp	r2, r6
   d6a20:	dce5      	bgt.n	d69ee <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d6a22:	4632      	mov	r2, r6
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d6a24:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d6a28:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d6a2a:	f04f 0910 	mov.w	r9, #16
   d6a2e:	e78e      	b.n	d694e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d6a30:	f1be 0f0a 	cmp.w	lr, #10
   d6a34:	d0db      	beq.n	d69ee <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d6a36:	4632      	mov	r2, r6
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d6a38:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d6a3c:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d6a3e:	f04f 0910 	mov.w	r9, #16
   d6a42:	e785      	b.n	d6950 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
   d6a44:	31000101 	.word	0x31000101

000d6a48 <_ZN7FatFile6removeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
   d6a48:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6a4a:	b08b      	sub	sp, #44	; 0x2c
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d6a4c:	2300      	movs	r3, #0
   d6a4e:	f88d 3004 	strb.w	r3, [sp, #4]
   d6a52:	f88d 3005 	strb.w	r3, [sp, #5]
  FatFile dirFile;
  dir_t* dir;
  ldir_t* ldir;

  // Cant' remove not open for write.
  if (!isFile() || !(m_flags & F_WRITE)) {
   d6a56:	7803      	ldrb	r3, [r0, #0]
   d6a58:	0719      	lsls	r1, r3, #28

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
   d6a5a:	4604      	mov	r4, r0
  FatFile dirFile;
  dir_t* dir;
  ldir_t* ldir;

  // Cant' remove not open for write.
  if (!isFile() || !(m_flags & F_WRITE)) {
   d6a5c:	d508      	bpl.n	d6a70 <_ZN7FatFile6removeEv+0x28>
   d6a5e:	7883      	ldrb	r3, [r0, #2]
   d6a60:	079a      	lsls	r2, r3, #30
   d6a62:	d505      	bpl.n	d6a70 <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
   d6a64:	6a01      	ldr	r1, [r0, #32]
   d6a66:	b129      	cbz	r1, d6a74 <_ZN7FatFile6removeEv+0x2c>
   d6a68:	68a0      	ldr	r0, [r4, #8]
   d6a6a:	f7ff f8f2 	bl	d5c52 <_ZN9FatVolume9freeChainEm>
   d6a6e:	b908      	cbnz	r0, d6a74 <_ZN7FatFile6removeEv+0x2c>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
   d6a70:	2000      	movs	r0, #0
   d6a72:	e049      	b.n	d6b08 <_ZN7FatFile6removeEv+0xc0>
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d6a74:	2101      	movs	r1, #1
   d6a76:	4620      	mov	r0, r4
   d6a78:	f7ff f9ea 	bl	d5e50 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   d6a7c:	4605      	mov	r5, r0
   d6a7e:	2800      	cmp	r0, #0
   d6a80:	d0f6      	beq.n	d6a70 <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  chksum = lfnChecksum(dir->name);
   d6a82:	f7ff fe56 	bl	d6732 <_ZN7FatFile11lfnChecksumEPh>

  // Mark entry deleted.
  dir->name[0] = DIR_NAME_DELETED;
   d6a86:	26e5      	movs	r6, #229	; 0xe5
   d6a88:	702e      	strb	r6, [r5, #0]

  // Set this file closed.
  m_attr = FILE_ATTR_CLOSED;
   d6a8a:	2300      	movs	r3, #0
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  chksum = lfnChecksum(dir->name);
   d6a8c:	4607      	mov	r7, r0

  // Mark entry deleted.
  dir->name[0] = DIR_NAME_DELETED;

  // Set this file closed.
  m_attr = FILE_ATTR_CLOSED;
   d6a8e:	7023      	strb	r3, [r4, #0]

  // Write entry to device.
  if (!m_vol->cacheSync()) {
   d6a90:	68a0      	ldr	r0, [r4, #8]
   d6a92:	f7ff f82b 	bl	d5aec <_ZN9FatVolume9cacheSyncEv>
   d6a96:	2800      	cmp	r0, #0
   d6a98:	d0ea      	beq.n	d6a70 <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
   d6a9a:	78e3      	ldrb	r3, [r4, #3]
   d6a9c:	2b00      	cmp	r3, #0
   d6a9e:	d033      	beq.n	d6b08 <_ZN7FatFile6removeEv+0xc0>
    // Done, no LFN entries.
    return true;
  }
  if (!dirFile.openCluster(this)) {
   d6aa0:	4621      	mov	r1, r4
   d6aa2:	a801      	add	r0, sp, #4
   d6aa4:	f7ff fe54 	bl	d6750 <_ZN7FatFile11openClusterEPS_>
   d6aa8:	2800      	cmp	r0, #0
   d6aaa:	d0e1      	beq.n	d6a70 <_ZN7FatFile6removeEv+0x28>
   d6aac:	2501      	movs	r5, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (ord = 1; ord <= m_lfnOrd; ord++) {
   d6aae:	78e3      	ldrb	r3, [r4, #3]
   d6ab0:	42ab      	cmp	r3, r5
   d6ab2:	d3dd      	bcc.n	d6a70 <_ZN7FatFile6removeEv+0x28>
    if (!dirFile.seekSet(32UL*(m_dirIndex - ord))) {
   d6ab4:	88a1      	ldrh	r1, [r4, #4]
   d6ab6:	1b49      	subs	r1, r1, r5
   d6ab8:	0149      	lsls	r1, r1, #5
   d6aba:	a801      	add	r0, sp, #4
   d6abc:	f7ff fae9 	bl	d6092 <_ZN7FatFile7seekSetEm>
   d6ac0:	2800      	cmp	r0, #0
   d6ac2:	d0d5      	beq.n	d6a70 <_ZN7FatFile6removeEv+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
   d6ac4:	2100      	movs	r1, #0
   d6ac6:	a801      	add	r0, sp, #4
   d6ac8:	f7ff fac6 	bl	d6058 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d6acc:	2800      	cmp	r0, #0
   d6ace:	d0cf      	beq.n	d6a70 <_ZN7FatFile6removeEv+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   d6ad0:	7ac3      	ldrb	r3, [r0, #11]
   d6ad2:	2b0f      	cmp	r3, #15
   d6ad4:	d1cc      	bne.n	d6a70 <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
   d6ad6:	7802      	ldrb	r2, [r0, #0]
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   d6ad8:	f002 031f 	and.w	r3, r2, #31
   d6adc:	429d      	cmp	r5, r3
   d6ade:	d1c7      	bne.n	d6a70 <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
   d6ae0:	7b43      	ldrb	r3, [r0, #13]
   d6ae2:	42bb      	cmp	r3, r7
   d6ae4:	d1c4      	bne.n	d6a70 <_ZN7FatFile6removeEv+0x28>
        chksum != ldir->chksum) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    last = ldir->ord & LDIR_ORD_LAST_LONG_ENTRY;
    ldir->ord = DIR_NAME_DELETED;
   d6ae6:	7006      	strb	r6, [r0, #0]
    m_vol->cacheDirty();
   d6ae8:	68a1      	ldr	r1, [r4, #8]
  cache_t* block() {
    return &m_block;
  }
  /** Set current block dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
   d6aea:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
   d6aee:	f043 0301 	orr.w	r3, r3, #1
   d6af2:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
    if (last) {
   d6af6:	0653      	lsls	r3, r2, #25
   d6af8:	d503      	bpl.n	d6b02 <_ZN7FatFile6removeEv+0xba>
      if (!m_vol->cacheSync()) {
   d6afa:	68a0      	ldr	r0, [r4, #8]
   d6afc:	f7fe fff6 	bl	d5aec <_ZN9FatVolume9cacheSyncEv>
   d6b00:	e002      	b.n	d6b08 <_ZN7FatFile6removeEv+0xc0>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (ord = 1; ord <= m_lfnOrd; ord++) {
   d6b02:	3501      	adds	r5, #1
   d6b04:	b2ed      	uxtb	r5, r5
   d6b06:	e7d2      	b.n	d6aae <_ZN7FatFile6removeEv+0x66>
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
}
   d6b08:	b00b      	add	sp, #44	; 0x2c
   d6b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6b0c <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d6b0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d6b10:	f891 900c 	ldrb.w	r9, [r1, #12]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d6b14:	4606      	mov	r6, r0
   d6b16:	460d      	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d6b18:	2402      	movs	r4, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d6b1a:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d6b1c:	f101 080d 	add.w	r8, r1, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   d6b20:	6869      	ldr	r1, [r5, #4]
   d6b22:	68aa      	ldr	r2, [r5, #8]
   d6b24:	1863      	adds	r3, r4, r1
   d6b26:	b29b      	uxth	r3, r3
   d6b28:	4411      	add	r1, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
   d6b2a:	4291      	cmp	r1, r2
   d6b2c:	d006      	beq.n	d6b3c <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
   d6b2e:	f812 0b01 	ldrb.w	r0, [r2], #1
   d6b32:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   d6b36:	4043      	eors	r3, r0
   d6b38:	b29b      	uxth	r3, r3
   d6b3a:	e7f6      	b.n	d6b2a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
   d6b3c:	f1b9 0f03 	cmp.w	r9, #3
   d6b40:	bf28      	it	cs
   d6b42:	f04f 0903 	movcs.w	r9, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d6b46:	f109 0204 	add.w	r2, r9, #4
   d6b4a:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   d6b4c:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d6b50:	18a8      	adds	r0, r5, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d6b52:	3a01      	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d6b54:	2909      	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d6b56:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d6b58:	bf94      	ite	ls
   d6b5a:	3130      	addls	r1, #48	; 0x30
   d6b5c:	3137      	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d6b5e:	4591      	cmp	r9, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d6b60:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   d6b62:	ea4f 1313 	mov.w	r3, r3, lsr #4
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d6b66:	d3f1      	bcc.n	d6b4c <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d6b68:	eb05 0309 	add.w	r3, r5, r9
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
   d6b6c:	2100      	movs	r1, #0
   d6b6e:	735f      	strb	r7, [r3, #13]
   d6b70:	4630      	mov	r0, r6
   d6b72:	f7ff fa8e 	bl	d6092 <_ZN7FatFile7seekSetEm>
    rewind();
    while (1) {
      dir = readDirCache(true);
   d6b76:	2101      	movs	r1, #1
   d6b78:	4630      	mov	r0, r6
   d6b7a:	f7ff fa6d 	bl	d6058 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   d6b7e:	4601      	mov	r1, r0
   d6b80:	b928      	cbnz	r0, d6b8e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   d6b82:	7870      	ldrb	r0, [r6, #1]
   d6b84:	fab0 f080 	clz	r0, r0
   d6b88:	0940      	lsrs	r0, r0, #5
   d6b8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d6b8e:	7803      	ldrb	r3, [r0, #0]
   d6b90:	b14b      	cbz	r3, d6ba6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x9a>
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d6b92:	7ac3      	ldrb	r3, [r0, #11]
   d6b94:	071b      	lsls	r3, r3, #28
   d6b96:	d4ee      	bmi.n	d6b76 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d6b98:	220b      	movs	r2, #11
   d6b9a:	4640      	mov	r0, r8
   d6b9c:	f004 fc18 	bl	db3d0 <memcmp>
   d6ba0:	2800      	cmp	r0, #0
   d6ba2:	d1e8      	bne.n	d6b76 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d6ba4:	e002      	b.n	d6bac <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa0>

fail:
  return false;

done:
  return true;
   d6ba6:	2001      	movs	r0, #1
   d6ba8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d6bac:	3401      	adds	r4, #1
   d6bae:	b2a4      	uxth	r4, r4
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
   d6bb0:	2c64      	cmp	r4, #100	; 0x64
   d6bb2:	d1b5      	bne.n	d6b20 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
fail:
  return false;

done:
  return true;
}
   d6bb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d6bb8 <_ZN7FatFile4openEPS_P7fname_ti>:
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d6bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6bbc:	469b      	mov	fp, r3
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d6bbe:	780b      	ldrb	r3, [r1, #0]
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d6bc0:	b089      	sub	sp, #36	; 0x24
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d6bc2:	f013 0f70 	tst.w	r3, #112	; 0x70
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d6bc6:	9005      	str	r0, [sp, #20]
   d6bc8:	460e      	mov	r6, r1
   d6bca:	4691      	mov	r9, r2
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d6bcc:	d101      	bne.n	d6bd2 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
   d6bce:	2000      	movs	r0, #0
   d6bd0:	e1a0      	b.n	d6f14 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d6bd2:	9b05      	ldr	r3, [sp, #20]
   d6bd4:	781b      	ldrb	r3, [r3, #0]
   d6bd6:	2b00      	cmp	r3, #0
   d6bd8:	d1f9      	bne.n	d6bce <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;
   d6bda:	6853      	ldr	r3, [r2, #4]
   d6bdc:	9302      	str	r3, [sp, #8]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d6bde:	7813      	ldrb	r3, [r2, #0]
   d6be0:	079b      	lsls	r3, r3, #30
   d6be2:	f000 818d 	beq.w	d6f00 <_ZN7FatFile4openEPS_P7fname_ti+0x348>
   d6be6:	9b02      	ldr	r3, [sp, #8]
   d6be8:	270d      	movs	r7, #13
   d6bea:	330c      	adds	r3, #12
   d6bec:	fbb3 f7f7 	udiv	r7, r3, r7
   d6bf0:	3701      	adds	r7, #1
   d6bf2:	b2ff      	uxtb	r7, r7
   d6bf4:	2100      	movs	r1, #0
   d6bf6:	4630      	mov	r0, r6
   d6bf8:	f7ff fa4b 	bl	d6092 <_ZN7FatFile7seekSetEm>
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
   d6bfc:	f04f 0800 	mov.w	r8, #0
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d6c00:	f109 020d 	add.w	r2, r9, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
   d6c04:	f8cd 800c 	str.w	r8, [sp, #12]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
   d6c08:	4643      	mov	r3, r8
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
   d6c0a:	4644      	mov	r4, r8
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
   d6c0c:	4645      	mov	r5, r8
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
   d6c0e:	f8cd 8010 	str.w	r8, [sp, #16]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d6c12:	9206      	str	r2, [sp, #24]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d6c14:	6972      	ldr	r2, [r6, #20]
   d6c16:	9307      	str	r3, [sp, #28]
    dir = dirFile->readDirCache(true);
   d6c18:	2101      	movs	r1, #1
   d6c1a:	4630      	mov	r0, r6
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d6c1c:	f3c2 1a4f 	ubfx	sl, r2, #5, #16
    dir = dirFile->readDirCache(true);
   d6c20:	f7ff fa1a 	bl	d6058 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d6c24:	9b07      	ldr	r3, [sp, #28]
   d6c26:	b920      	cbnz	r0, d6c32 <_ZN7FatFile4openEPS_P7fname_ti+0x7a>
      if (dirFile->getError()) {
   d6c28:	7873      	ldrb	r3, [r6, #1]
   d6c2a:	2b00      	cmp	r3, #0
   d6c2c:	f000 8090 	beq.w	d6d50 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
   d6c30:	e7cd      	b.n	d6bce <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   d6c32:	7802      	ldrb	r2, [r0, #0]
   d6c34:	2ae5      	cmp	r2, #229	; 0xe5
   d6c36:	d000      	beq.n	d6c3a <_ZN7FatFile4openEPS_P7fname_ti+0x82>
   d6c38:	b942      	cbnz	r2, d6c4c <_ZN7FatFile4openEPS_P7fname_ti+0x94>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d6c3a:	2c00      	cmp	r4, #0
   d6c3c:	bf08      	it	eq
   d6c3e:	46d0      	moveq	r8, sl
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
   d6c40:	42bc      	cmp	r4, r7
        freeFound++;
   d6c42:	bf3c      	itt	cc
   d6c44:	3401      	addcc	r4, #1
   d6c46:	b2e4      	uxtbcc	r4, r4
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d6c48:	b922      	cbnz	r2, d6c54 <_ZN7FatFile4openEPS_P7fname_ti+0x9c>
   d6c4a:	e081      	b.n	d6d50 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
   d6c4c:	42bc      	cmp	r4, r7
   d6c4e:	bf38      	it	cc
   d6c50:	2400      	movcc	r4, #0
   d6c52:	e003      	b.n	d6c5c <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d6c54:	2ae5      	cmp	r2, #229	; 0xe5
   d6c56:	d101      	bne.n	d6c5c <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
   d6c58:	2500      	movs	r5, #0
   d6c5a:	e7db      	b.n	d6c14 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d6c5c:	2a2e      	cmp	r2, #46	; 0x2e
   d6c5e:	d0fb      	beq.n	d6c58 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d6c60:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_LONG_NAME(dir)) {
   d6c62:	290f      	cmp	r1, #15
   d6c64:	d152      	bne.n	d6d0c <_ZN7FatFile4openEPS_P7fname_ti+0x154>
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
   d6c66:	b93d      	cbnz	r5, d6c78 <_ZN7FatFile4openEPS_P7fname_ti+0xc0>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   d6c68:	0651      	lsls	r1, r2, #25
   d6c6a:	d5d3      	bpl.n	d6c14 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
        chksum = ldir->chksum;
   d6c6c:	7b43      	ldrb	r3, [r0, #13]
   d6c6e:	9303      	str	r3, [sp, #12]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
   d6c70:	f002 051f 	and.w	r5, r2, #31
   d6c74:	462b      	mov	r3, r5
   d6c76:	e007      	b.n	d6c88 <_ZN7FatFile4openEPS_P7fname_ti+0xd0>
        chksum = ldir->chksum;
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   d6c78:	3b01      	subs	r3, #1
   d6c7a:	b2db      	uxtb	r3, r3
   d6c7c:	429a      	cmp	r2, r3
   d6c7e:	d1eb      	bne.n	d6c58 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d6c80:	7b42      	ldrb	r2, [r0, #13]
   d6c82:	9903      	ldr	r1, [sp, #12]
   d6c84:	4291      	cmp	r1, r2
   d6c86:	d1e7      	bne.n	d6c58 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(ord - 1);
   d6c88:	1e5a      	subs	r2, r3, #1
   d6c8a:	f04f 0c0d 	mov.w	ip, #13
   d6c8e:	fb0c fc02 	mul.w	ip, ip, r2
      if (k >= len) {
   d6c92:	9a02      	ldr	r2, [sp, #8]
   d6c94:	4562      	cmp	r2, ip
   d6c96:	d9df      	bls.n	d6c58 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d6c98:	f04f 0e00 	mov.w	lr, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   d6c9c:	f1be 0f04 	cmp.w	lr, #4
   d6ca0:	fa5f f28e 	uxtb.w	r2, lr
   d6ca4:	d804      	bhi.n	d6cb0 <_ZN7FatFile4openEPS_P7fname_ti+0xf8>
    return ldir->name1[i];
   d6ca6:	eb00 024e 	add.w	r2, r0, lr, lsl #1
   d6caa:	f8b2 2001 	ldrh.w	r2, [r2, #1]
   d6cae:	e00c      	b.n	d6cca <_ZN7FatFile4openEPS_P7fname_ti+0x112>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d6cb0:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   d6cb2:	bf95      	itete	ls
   d6cb4:	f10e 32ff 	addls.w	r2, lr, #4294967295
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d6cb8:	f10e 0201 	addhi.w	r2, lr, #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d6cbc:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d6cc0:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d6cc4:	bf94      	ite	ls
   d6cc6:	88d2      	ldrhls	r2, [r2, #6]
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d6cc8:	8892      	ldrhhi	r2, [r2, #4]
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
   d6cca:	9902      	ldr	r1, [sp, #8]
   d6ccc:	4561      	cmp	r1, ip
   d6cce:	d103      	bne.n	d6cd8 <_ZN7FatFile4openEPS_P7fname_ti+0x120>
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
   d6cd0:	2a00      	cmp	r2, #0
   d6cd2:	bf18      	it	ne
   d6cd4:	2500      	movne	r5, #0
   d6cd6:	e79d      	b.n	d6c14 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d6cd8:	2aff      	cmp	r2, #255	; 0xff
   d6cda:	d8bd      	bhi.n	d6c58 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d6cdc:	b2d2      	uxtb	r2, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d6cde:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   d6ce2:	2919      	cmp	r1, #25
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d6ce4:	f8d9 1008 	ldr.w	r1, [r9, #8]
   d6ce8:	f811 100c 	ldrb.w	r1, [r1, ip]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d6cec:	bf98      	it	ls
   d6cee:	3220      	addls	r2, #32
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d6cf0:	f10c 0a01 	add.w	sl, ip, #1
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d6cf4:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   d6cf8:	bf98      	it	ls
   d6cfa:	b2d2      	uxtbls	r2, r2
   d6cfc:	f1bc 0f19 	cmp.w	ip, #25
   d6d00:	bf9c      	itt	ls
   d6d02:	3120      	addls	r1, #32
   d6d04:	b2c9      	uxtbls	r1, r1
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d6d06:	4291      	cmp	r1, r2
   d6d08:	d1a6      	bne.n	d6c58 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d6d0a:	e0fb      	b.n	d6f04 <_ZN7FatFile4openEPS_P7fname_ti+0x34c>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   d6d0c:	0709      	lsls	r1, r1, #28
   d6d0e:	d4a3      	bmi.n	d6c58 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
      if (lfnOrd) {
   d6d10:	b14d      	cbz	r5, d6d26 <_ZN7FatFile4openEPS_P7fname_ti+0x16e>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   d6d12:	2b01      	cmp	r3, #1
   d6d14:	f47f af5b 	bne.w	d6bce <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d6d18:	f7ff fd0b 	bl	d6732 <_ZN7FatFile11lfnChecksumEPh>
   d6d1c:	9b03      	ldr	r3, [sp, #12]
   d6d1e:	4283      	cmp	r3, r0
   d6d20:	f47f af55 	bne.w	d6bce <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d6d24:	e00f      	b.n	d6d46 <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d6d26:	220b      	movs	r2, #11
   d6d28:	9906      	ldr	r1, [sp, #24]
   d6d2a:	9307      	str	r3, [sp, #28]
   d6d2c:	f004 fb50 	bl	db3d0 <memcmp>
   d6d30:	9b07      	ldr	r3, [sp, #28]
   d6d32:	2800      	cmp	r0, #0
   d6d34:	f47f af6e 	bne.w	d6c14 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   d6d38:	f899 2000 	ldrb.w	r2, [r9]
   d6d3c:	07d2      	lsls	r2, r2, #31
   d6d3e:	d502      	bpl.n	d6d46 <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        fnameFound = true;
   d6d40:	2201      	movs	r2, #1
   d6d42:	9204      	str	r2, [sp, #16]
   d6d44:	e766      	b.n	d6c14 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
   d6d46:	f41b 6f00 	tst.w	fp, #2048	; 0x800
   d6d4a:	f000 80d1 	beq.w	d6ef0 <_ZN7FatFile4openEPS_P7fname_ti+0x338>
   d6d4e:	e73e      	b.n	d6bce <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode.
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   d6d50:	f41b 7f00 	tst.w	fp, #512	; 0x200
   d6d54:	f43f af3b 	beq.w	d6bce <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d6d58:	f00b 0303 	and.w	r3, fp, #3
   d6d5c:	3b01      	subs	r3, #1
   d6d5e:	2b01      	cmp	r3, #1
   d6d60:	f63f af35 	bhi.w	d6bce <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
   d6d64:	2c00      	cmp	r4, #0
   d6d66:	bf08      	it	eq
   d6d68:	46d0      	moveq	r8, sl
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d6d6a:	42bc      	cmp	r4, r7
   d6d6c:	d302      	bcc.n	d6d74 <_ZN7FatFile4openEPS_P7fname_ti+0x1bc>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
   d6d6e:	9b04      	ldr	r3, [sp, #16]
   d6d70:	b9cb      	cbnz	r3, d6da6 <_ZN7FatFile4openEPS_P7fname_ti+0x1ee>
   d6d72:	e01f      	b.n	d6db4 <_ZN7FatFile4openEPS_P7fname_ti+0x1fc>
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
   d6d74:	2100      	movs	r1, #0
   d6d76:	4630      	mov	r0, r6
   d6d78:	f7ff f96e 	bl	d6058 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d6d7c:	b910      	cbnz	r0, d6d84 <_ZN7FatFile4openEPS_P7fname_ti+0x1cc>
      if (dirFile->getError()) {
   d6d7e:	7873      	ldrb	r3, [r6, #1]
   d6d80:	b15b      	cbz	r3, d6d9a <_ZN7FatFile4openEPS_P7fname_ti+0x1e2>
   d6d82:	e724      	b.n	d6bce <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
   d6d84:	3401      	adds	r4, #1
   d6d86:	b2e4      	uxtb	r4, r4
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d6d88:	e7ef      	b.n	d6d6a <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   d6d8a:	68b3      	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one block per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   d6d8c:	791b      	ldrb	r3, [r3, #4]
   d6d8e:	2b01      	cmp	r3, #1
   d6d90:	d8ed      	bhi.n	d6d6e <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
      break;
    }
    freeFound += 16;
   d6d92:	3410      	adds	r4, #16
   d6d94:	b2e4      	uxtb	r4, r4
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
   d6d96:	42a7      	cmp	r7, r4
   d6d98:	d9e9      	bls.n	d6d6e <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
   d6d9a:	4630      	mov	r0, r6
   d6d9c:	f7ff f818 	bl	d5dd0 <_ZN7FatFile13addDirClusterEv>
   d6da0:	2800      	cmp	r0, #0
   d6da2:	d1f2      	bne.n	d6d8a <_ZN7FatFile4openEPS_P7fname_ti+0x1d2>
   d6da4:	e713      	b.n	d6bce <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    if (!dirFile->lfnUniqueSfn(fname)) {
   d6da6:	4649      	mov	r1, r9
   d6da8:	4630      	mov	r0, r6
   d6daa:	f7ff feaf 	bl	d6b0c <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   d6dae:	2800      	cmp	r0, #0
   d6db0:	f43f af0d 	beq.w	d6bce <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
   d6db4:	ea4f 1148 	mov.w	r1, r8, lsl #5
   d6db8:	4630      	mov	r0, r6
   d6dba:	f7ff f96a 	bl	d6092 <_ZN7FatFile7seekSetEm>
   d6dbe:	2800      	cmp	r0, #0
   d6dc0:	f43f af05 	beq.w	d6bce <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
   d6dc4:	1e7d      	subs	r5, r7, #1
   d6dc6:	b2ed      	uxtb	r5, r5
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d6dc8:	462c      	mov	r4, r5
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d6dca:	f04f 0a00 	mov.w	sl, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
   d6dce:	f04f 080f 	mov.w	r8, #15
   d6dd2:	e041      	b.n	d6e58 <_ZN7FatFile4openEPS_P7fname_ti+0x2a0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d6dd4:	2100      	movs	r1, #0
   d6dd6:	4630      	mov	r0, r6
   d6dd8:	f7ff f93e 	bl	d6058 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d6ddc:	4607      	mov	r7, r0
   d6dde:	2800      	cmp	r0, #0
   d6de0:	f43f aef5 	beq.w	d6bce <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
   d6de4:	68b2      	ldr	r2, [r6, #8]
   d6de6:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d6dea:	42ac      	cmp	r4, r5
   d6dec:	f043 0301 	orr.w	r3, r3, #1
   d6df0:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   d6df4:	bf0c      	ite	eq
   d6df6:	f044 0240 	orreq.w	r2, r4, #64	; 0x40
   d6dfa:	4622      	movne	r2, r4
   d6dfc:	7002      	strb	r2, [r0, #0]
    ldir->attr = DIR_ATT_LONG_NAME;
   d6dfe:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   d6e02:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   d6e06:	f109 000d 	add.w	r0, r9, #13
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d6e0a:	9203      	str	r2, [sp, #12]
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d6e0c:	f7ff fc91 	bl	d6732 <_ZN7FatFile11lfnChecksumEPh>
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d6e10:	9a03      	ldr	r2, [sp, #12]
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d6e12:	7378      	strb	r0, [r7, #13]
    ldir->mustBeZero = 0;
   d6e14:	f887 a01a 	strb.w	sl, [r7, #26]
   d6e18:	f887 a01b 	strb.w	sl, [r7, #27]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d6e1c:	f002 021f 	and.w	r2, r2, #31
   d6e20:	230d      	movs	r3, #13
   d6e22:	3a01      	subs	r2, #1
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
   d6e24:	f8d9 e008 	ldr.w	lr, [r9, #8]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d6e28:	435a      	muls	r2, r3
   d6e2a:	2300      	movs	r3, #0
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d6e2c:	9902      	ldr	r1, [sp, #8]
   d6e2e:	4291      	cmp	r1, r2
   d6e30:	d915      	bls.n	d6e5e <_ZN7FatFile4openEPS_P7fname_ti+0x2a6>
   d6e32:	f81e 1002 	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
   d6e36:	2b04      	cmp	r3, #4
   d6e38:	fa5f fc83 	uxtb.w	ip, r3
   d6e3c:	f103 0001 	add.w	r0, r3, #1
   d6e40:	d813      	bhi.n	d6e6a <_ZN7FatFile4openEPS_P7fname_ti+0x2b2>
    ldir->name1[i] = c;
   d6e42:	eb07 0343 	add.w	r3, r7, r3, lsl #1
   d6e46:	f8a3 1001 	strh.w	r1, [r3, #1]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
   d6e4a:	280d      	cmp	r0, #13
   d6e4c:	f102 0201 	add.w	r2, r2, #1
   d6e50:	4603      	mov	r3, r0
   d6e52:	d1eb      	bne.n	d6e2c <_ZN7FatFile4openEPS_P7fname_ti+0x274>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d6e54:	3c01      	subs	r4, #1
   d6e56:	b2e4      	uxtb	r4, r4
   d6e58:	2c00      	cmp	r4, #0
   d6e5a:	d1bb      	bne.n	d6dd4 <_ZN7FatFile4openEPS_P7fname_ti+0x21c>
   d6e5c:	e00e      	b.n	d6e7c <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d6e5e:	bf14      	ite	ne
   d6e60:	f04f 31ff 	movne.w	r1, #4294967295
   d6e64:	2100      	moveq	r1, #0
   d6e66:	b289      	uxth	r1, r1
   d6e68:	e7e5      	b.n	d6e36 <_ZN7FatFile4openEPS_P7fname_ti+0x27e>
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
    ldir->name1[i] = c;
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d6e6a:	f1bc 0f0a 	cmp.w	ip, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   d6e6e:	bf94      	ite	ls
   d6e70:	eb07 0343 	addls.w	r3, r7, r3, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   d6e74:	eb07 0340 	addhi.w	r3, r7, r0, lsl #1
   d6e78:	8099      	strh	r1, [r3, #4]
   d6e7a:	e7e6      	b.n	d6e4a <_ZN7FatFile4openEPS_P7fname_ti+0x292>
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d6e7c:	6973      	ldr	r3, [r6, #20]
  dir = dirFile->readDirCache();
   d6e7e:	4621      	mov	r1, r4
   d6e80:	4630      	mov	r0, r6
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d6e82:	f3c3 1a4f 	ubfx	sl, r3, #5, #16
  dir = dirFile->readDirCache();
   d6e86:	f7ff f8e7 	bl	d6058 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   d6e8a:	4607      	mov	r7, r0
   d6e8c:	2800      	cmp	r0, #0
   d6e8e:	f43f ae9e 	beq.w	d6bce <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(dir_t));
   d6e92:	2220      	movs	r2, #32
   d6e94:	4621      	mov	r1, r4
   d6e96:	f004 fab5 	bl	db404 <memset>
  memcpy(dir->name, fname->sfn, 11);
   d6e9a:	464b      	mov	r3, r9
   d6e9c:	f853 2f0d 	ldr.w	r2, [r3, #13]!
   d6ea0:	603a      	str	r2, [r7, #0]
   d6ea2:	685a      	ldr	r2, [r3, #4]
   d6ea4:	607a      	str	r2, [r7, #4]
   d6ea6:	891a      	ldrh	r2, [r3, #8]
   d6ea8:	813a      	strh	r2, [r7, #8]
   d6eaa:	7a9b      	ldrb	r3, [r3, #10]
   d6eac:	72bb      	strb	r3, [r7, #10]

  // Set base-name and extension lower case bits.
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   d6eae:	f899 3000 	ldrb.w	r3, [r9]
   d6eb2:	f003 0318 	and.w	r3, r3, #24
   d6eb6:	733b      	strb	r3, [r7, #12]

  // set timestamps
  if (m_dateTime) {
   d6eb8:	4b18      	ldr	r3, [pc, #96]	; (d6f1c <_ZN7FatFile4openEPS_P7fname_ti+0x364>)
   d6eba:	681b      	ldr	r3, [r3, #0]
   d6ebc:	b12b      	cbz	r3, d6eca <_ZN7FatFile4openEPS_P7fname_ti+0x312>
    // call user date/time function
    m_dateTime(&dir->creationDate, &dir->creationTime);
   d6ebe:	f107 010e 	add.w	r1, r7, #14
   d6ec2:	f107 0010 	add.w	r0, r7, #16
   d6ec6:	4798      	blx	r3
   d6ec8:	e006      	b.n	d6ed8 <_ZN7FatFile4openEPS_P7fname_ti+0x320>
  } else {
    // use default date/time
    dir->creationDate = FAT_DEFAULT_DATE;
   d6eca:	2321      	movs	r3, #33	; 0x21
   d6ecc:	743b      	strb	r3, [r7, #16]
   d6ece:	2328      	movs	r3, #40	; 0x28
   d6ed0:	747b      	strb	r3, [r7, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   d6ed2:	2308      	movs	r3, #8
   d6ed4:	73bc      	strb	r4, [r7, #14]
   d6ed6:	73fb      	strb	r3, [r7, #15]
  }
  dir->lastAccessDate = dir->creationDate;
   d6ed8:	8a3b      	ldrh	r3, [r7, #16]
   d6eda:	827b      	strh	r3, [r7, #18]
  dir->lastWriteDate = dir->creationDate;
   d6edc:	833b      	strh	r3, [r7, #24]
  dir->lastWriteTime = dir->creationTime;
   d6ede:	89fb      	ldrh	r3, [r7, #14]
   d6ee0:	82fb      	strh	r3, [r7, #22]

  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
   d6ee2:	68b2      	ldr	r2, [r6, #8]
   d6ee4:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   d6ee8:	f043 0301 	orr.w	r3, r3, #1
   d6eec:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   d6ef0:	9500      	str	r5, [sp, #0]
   d6ef2:	465b      	mov	r3, fp
   d6ef4:	4652      	mov	r2, sl
   d6ef6:	4631      	mov	r1, r6
   d6ef8:	9805      	ldr	r0, [sp, #20]
   d6efa:	f7ff f913 	bl	d6124 <_ZN7FatFile15openCachedEntryEPS_tih>
   d6efe:	e009      	b.n	d6f14 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d6f00:	2701      	movs	r7, #1
   d6f02:	e677      	b.n	d6bf4 <_ZN7FatFile4openEPS_P7fname_ti+0x3c>
   d6f04:	f10e 0e01 	add.w	lr, lr, #1
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
   d6f08:	f1be 0f0d 	cmp.w	lr, #13
   d6f0c:	f43f ae82 	beq.w	d6c14 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d6f10:	46d4      	mov	ip, sl
   d6f12:	e6c3      	b.n	d6c9c <_ZN7FatFile4openEPS_P7fname_ti+0xe4>
  }
  return true;

fail:
  return false;
}
   d6f14:	b009      	add	sp, #36	; 0x24
   d6f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6f1a:	bf00      	nop
   d6f1c:	2003e318 	.word	0x2003e318

000d6f20 <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
   d6f20:	f000 be0a 	b.w	d7b38 <HAL_Pin_Map>

000d6f24 <_GLOBAL__sub_I__ZN7istream3getEv>:
   d6f24:	f000 be08 	b.w	d7b38 <HAL_Pin_Map>

000d6f28 <_ZL9date2daysthh>:

const uint8_t daysInMonth [] PROGMEM = { 31,28,31,30,31,30,31,31,30,31,30,31 };

// number of days since 2000/01/01, valid for 2001..2099
static uint16_t date2days(uint16_t y, uint8_t m, uint8_t d) {
    if (y >= 2000)
   d6f28:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
// utility code, some of this could be exposed in the DateTime API if needed

const uint8_t daysInMonth [] PROGMEM = { 31,28,31,30,31,30,31,31,30,31,30,31 };

// number of days since 2000/01/01, valid for 2001..2099
static uint16_t date2days(uint16_t y, uint8_t m, uint8_t d) {
   d6f2c:	b530      	push	{r4, r5, lr}
    if (y >= 2000)
        y -= 2000;
   d6f2e:	bf28      	it	cs
   d6f30:	f5a0 60fa 	subcs.w	r0, r0, #2000	; 0x7d0
    uint16_t days = d;
    for (uint8_t i = 1; i < m; ++i)
        days += pgm_read_byte(daysInMonth + i - 1);
   d6f34:	4d10      	ldr	r5, [pc, #64]	; (d6f78 <_ZL9date2daysthh+0x50>)
const uint8_t daysInMonth [] PROGMEM = { 31,28,31,30,31,30,31,31,30,31,30,31 };

// number of days since 2000/01/01, valid for 2001..2099
static uint16_t date2days(uint16_t y, uint8_t m, uint8_t d) {
    if (y >= 2000)
        y -= 2000;
   d6f36:	bf28      	it	cs
   d6f38:	b280      	uxthcs	r0, r0
    uint16_t days = d;
   d6f3a:	b292      	uxth	r2, r2
   d6f3c:	2300      	movs	r3, #0
   d6f3e:	3301      	adds	r3, #1
    for (uint8_t i = 1; i < m; ++i)
   d6f40:	b2dc      	uxtb	r4, r3
   d6f42:	42a1      	cmp	r1, r4
   d6f44:	d905      	bls.n	d6f52 <_ZL9date2daysthh+0x2a>
        days += pgm_read_byte(daysInMonth + i - 1);
   d6f46:	18ec      	adds	r4, r5, r3
   d6f48:	f814 4c01 	ldrb.w	r4, [r4, #-1]
   d6f4c:	4422      	add	r2, r4
   d6f4e:	b292      	uxth	r2, r2
// number of days since 2000/01/01, valid for 2001..2099
static uint16_t date2days(uint16_t y, uint8_t m, uint8_t d) {
    if (y >= 2000)
        y -= 2000;
    uint16_t days = d;
    for (uint8_t i = 1; i < m; ++i)
   d6f50:	e7f5      	b.n	d6f3e <_ZL9date2daysthh+0x16>
        days += pgm_read_byte(daysInMonth + i - 1);
    if (m > 2 && y % 4 == 0)
   d6f52:	2902      	cmp	r1, #2
   d6f54:	d903      	bls.n	d6f5e <_ZL9date2daysthh+0x36>
   d6f56:	0783      	lsls	r3, r0, #30
        ++days;
   d6f58:	bf04      	itt	eq
   d6f5a:	3201      	addeq	r2, #1
   d6f5c:	b292      	uxtheq	r2, r2
    return days + 365 * y + (y + 3) / 4 - 1;
   d6f5e:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
   d6f62:	1cc1      	adds	r1, r0, #3
   d6f64:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   d6f68:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   d6f6c:	1e43      	subs	r3, r0, #1
   d6f6e:	eb03 00a1 	add.w	r0, r3, r1, asr #2
   d6f72:	4410      	add	r0, r2
}
   d6f74:	b280      	uxth	r0, r0
   d6f76:	bd30      	pop	{r4, r5, pc}
   d6f78:	000dc91b 	.word	0x000dc91b

000d6f7c <_ZN8DateTimeC1Ethhhhh>:
    }
    d = days + 1;
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
   d6f7c:	f5b1 6ffa 	cmp.w	r1, #2000	; 0x7d0
        year -= 2000;
    yOff = year;
    m = month;
    d = day;
   d6f80:	7083      	strb	r3, [r0, #2]
    hh = hour;
   d6f82:	f89d 3000 	ldrb.w	r3, [sp]
   d6f86:	70c3      	strb	r3, [r0, #3]
    d = days + 1;
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
        year -= 2000;
   d6f88:	bf28      	it	cs
   d6f8a:	f5a1 61fa 	subcs.w	r1, r1, #2000	; 0x7d0
    yOff = year;
    m = month;
    d = day;
    hh = hour;
    mm = min;
   d6f8e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d6f92:	7103      	strb	r3, [r0, #4]
    d = days + 1;
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
        year -= 2000;
   d6f94:	bf28      	it	cs
   d6f96:	b289      	uxthcs	r1, r1
    yOff = year;
    m = month;
    d = day;
    hh = hour;
    mm = min;
    ss = sec;
   d6f98:	f89d 3008 	ldrb.w	r3, [sp, #8]
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
        year -= 2000;
    yOff = year;
   d6f9c:	7001      	strb	r1, [r0, #0]
    m = month;
   d6f9e:	7042      	strb	r2, [r0, #1]
    d = day;
    hh = hour;
    mm = min;
    ss = sec;
   d6fa0:	7143      	strb	r3, [r0, #5]
}
   d6fa2:	4770      	bx	lr

000d6fa4 <_ZNK8DateTime8unixtimeEv>:
uint8_t DateTime::dayOfTheWeek() const {    
    uint16_t day = date2days(yOff, m, d);
    return (day + 6) % 7; // Jan 1, 2000 is a Saturday, i.e. returns 6
}

uint32_t DateTime::unixtime(void) const {
   d6fa4:	b510      	push	{r4, lr}
   d6fa6:	4604      	mov	r4, r0
  uint32_t t;
  uint16_t days = date2days(yOff, m, d);
   d6fa8:	7882      	ldrb	r2, [r0, #2]
   d6faa:	7841      	ldrb	r1, [r0, #1]
   d6fac:	7800      	ldrb	r0, [r0, #0]
   d6fae:	f7ff ffbb 	bl	d6f28 <_ZL9date2daysthh>
  t = time2long(days, hh, mm, ss);
   d6fb2:	78e2      	ldrb	r2, [r4, #3]
   d6fb4:	2318      	movs	r3, #24
   d6fb6:	fb03 2000 	mla	r0, r3, r0, r2
   d6fba:	7923      	ldrb	r3, [r4, #4]
   d6fbc:	223c      	movs	r2, #60	; 0x3c
   d6fbe:	fb02 3000 	mla	r0, r2, r0, r3
   d6fc2:	7963      	ldrb	r3, [r4, #5]
   d6fc4:	fb02 3300 	mla	r3, r2, r0, r3
  t += SECONDS_FROM_1970_TO_2000;  // seconds from 1970 to 2000

  return t;
}
   d6fc8:	4801      	ldr	r0, [pc, #4]	; (d6fd0 <_ZNK8DateTime8unixtimeEv+0x2c>)
   d6fca:	4418      	add	r0, r3
   d6fcc:	bd10      	pop	{r4, pc}
   d6fce:	bf00      	nop
   d6fd0:	386d4380 	.word	0x386d4380

000d6fd4 <_ZN11RTC_PCF852311initializedEv>:
boolean RTC_PCF8523::begin(void) {
  Wire.begin();
  return true;
}

boolean RTC_PCF8523::initialized(void) {
   d6fd4:	b508      	push	{r3, lr}
  Wire.beginTransmission(PCF8523_ADDRESS);
   d6fd6:	f002 fecd 	bl	d9d74 <_Z19__fetch_global_Wirev>
   d6fda:	2168      	movs	r1, #104	; 0x68
   d6fdc:	f001 f9e5 	bl	d83aa <_ZN7TwoWire17beginTransmissionEi>
  Wire._I2C_WRITE((byte)PCF8523_CONTROL_3);
   d6fe0:	f002 fec8 	bl	d9d74 <_Z19__fetch_global_Wirev>
   d6fe4:	6803      	ldr	r3, [r0, #0]
   d6fe6:	2102      	movs	r1, #2
   d6fe8:	689b      	ldr	r3, [r3, #8]
   d6fea:	4798      	blx	r3
  Wire.endTransmission();
   d6fec:	f002 fec2 	bl	d9d74 <_Z19__fetch_global_Wirev>
   d6ff0:	f001 f9e2 	bl	d83b8 <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(PCF8523_ADDRESS, 1);
   d6ff4:	f002 febe 	bl	d9d74 <_Z19__fetch_global_Wirev>
   d6ff8:	2201      	movs	r2, #1
   d6ffa:	2168      	movs	r1, #104	; 0x68
   d6ffc:	f001 f9c7 	bl	d838e <_ZN7TwoWire11requestFromEii>
  uint8_t ss = Wire._I2C_READ();
   d7000:	f002 feb8 	bl	d9d74 <_Z19__fetch_global_Wirev>
   d7004:	6803      	ldr	r3, [r0, #0]
   d7006:	695b      	ldr	r3, [r3, #20]
   d7008:	4798      	blx	r3
  return ((ss & 0xE0) != 0xE0);
   d700a:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
}
   d700e:	38e0      	subs	r0, #224	; 0xe0
   d7010:	bf18      	it	ne
   d7012:	2001      	movne	r0, #1
   d7014:	bd08      	pop	{r3, pc}

000d7016 <_ZN11RTC_PCF85236adjustERK8DateTime>:

void RTC_PCF8523::adjust(const DateTime& dt) {
   d7016:	b538      	push	{r3, r4, r5, lr}
   d7018:	460d      	mov	r5, r1
  Wire.beginTransmission(PCF8523_ADDRESS);
   d701a:	f002 feab 	bl	d9d74 <_Z19__fetch_global_Wirev>
   d701e:	2168      	movs	r1, #104	; 0x68
   d7020:	f001 f9c3 	bl	d83aa <_ZN7TwoWire17beginTransmissionEi>
  Wire._I2C_WRITE((byte)3); // start at location 3
   d7024:	f002 fea6 	bl	d9d74 <_Z19__fetch_global_Wirev>
   d7028:	6803      	ldr	r3, [r0, #0]
   d702a:	2103      	movs	r1, #3
   d702c:	689b      	ldr	r3, [r3, #8]
   d702e:	4798      	blx	r3
  Wire._I2C_WRITE(bin2bcd(dt.second()));
   d7030:	f002 fea0 	bl	d9d74 <_Z19__fetch_global_Wirev>
   d7034:	796b      	ldrb	r3, [r5, #5]
   d7036:	240a      	movs	r4, #10
   d7038:	fbb3 f1f4 	udiv	r1, r3, r4
   d703c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   d7040:	eb03 0141 	add.w	r1, r3, r1, lsl #1
   d7044:	6803      	ldr	r3, [r0, #0]
   d7046:	b2c9      	uxtb	r1, r1
   d7048:	689b      	ldr	r3, [r3, #8]
   d704a:	4798      	blx	r3
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
   d704c:	f002 fe92 	bl	d9d74 <_Z19__fetch_global_Wirev>
   d7050:	792b      	ldrb	r3, [r5, #4]
   d7052:	fbb3 f1f4 	udiv	r1, r3, r4
   d7056:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   d705a:	eb03 0141 	add.w	r1, r3, r1, lsl #1
   d705e:	6803      	ldr	r3, [r0, #0]
   d7060:	b2c9      	uxtb	r1, r1
   d7062:	689b      	ldr	r3, [r3, #8]
   d7064:	4798      	blx	r3
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
   d7066:	f002 fe85 	bl	d9d74 <_Z19__fetch_global_Wirev>
   d706a:	78eb      	ldrb	r3, [r5, #3]
   d706c:	fbb3 f1f4 	udiv	r1, r3, r4
   d7070:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   d7074:	eb03 0141 	add.w	r1, r3, r1, lsl #1
   d7078:	6803      	ldr	r3, [r0, #0]
   d707a:	b2c9      	uxtb	r1, r1
   d707c:	689b      	ldr	r3, [r3, #8]
   d707e:	4798      	blx	r3
  Wire._I2C_WRITE(bin2bcd(dt.day()));
   d7080:	f002 fe78 	bl	d9d74 <_Z19__fetch_global_Wirev>
   d7084:	78ab      	ldrb	r3, [r5, #2]
   d7086:	fbb3 f1f4 	udiv	r1, r3, r4
   d708a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   d708e:	eb03 0141 	add.w	r1, r3, r1, lsl #1
   d7092:	6803      	ldr	r3, [r0, #0]
   d7094:	b2c9      	uxtb	r1, r1
   d7096:	689b      	ldr	r3, [r3, #8]
   d7098:	4798      	blx	r3
  Wire._I2C_WRITE(bin2bcd(0)); // skip weekdays
   d709a:	f002 fe6b 	bl	d9d74 <_Z19__fetch_global_Wirev>
   d709e:	6803      	ldr	r3, [r0, #0]
   d70a0:	2100      	movs	r1, #0
   d70a2:	689b      	ldr	r3, [r3, #8]
   d70a4:	4798      	blx	r3
  Wire._I2C_WRITE(bin2bcd(dt.month()));
   d70a6:	f002 fe65 	bl	d9d74 <_Z19__fetch_global_Wirev>
   d70aa:	786b      	ldrb	r3, [r5, #1]
   d70ac:	fbb3 f1f4 	udiv	r1, r3, r4
   d70b0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   d70b4:	eb03 0141 	add.w	r1, r3, r1, lsl #1
   d70b8:	6803      	ldr	r3, [r0, #0]
   d70ba:	b2c9      	uxtb	r1, r1
   d70bc:	689b      	ldr	r3, [r3, #8]
   d70be:	4798      	blx	r3
  Wire._I2C_WRITE(bin2bcd(dt.year() - 2000));
   d70c0:	f002 fe58 	bl	d9d74 <_Z19__fetch_global_Wirev>
   d70c4:	7829      	ldrb	r1, [r5, #0]
   d70c6:	6803      	ldr	r3, [r0, #0]
   d70c8:	fbb1 f4f4 	udiv	r4, r1, r4
   d70cc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   d70d0:	eb01 0144 	add.w	r1, r1, r4, lsl #1
   d70d4:	689b      	ldr	r3, [r3, #8]
   d70d6:	b2c9      	uxtb	r1, r1
   d70d8:	4798      	blx	r3
  Wire.endTransmission();
   d70da:	f002 fe4b 	bl	d9d74 <_Z19__fetch_global_Wirev>
   d70de:	f001 f96b 	bl	d83b8 <_ZN7TwoWire15endTransmissionEv>

  // set to battery switchover mode
  Wire.beginTransmission(PCF8523_ADDRESS);
   d70e2:	f002 fe47 	bl	d9d74 <_Z19__fetch_global_Wirev>
   d70e6:	2168      	movs	r1, #104	; 0x68
   d70e8:	f001 f95f 	bl	d83aa <_ZN7TwoWire17beginTransmissionEi>
  Wire._I2C_WRITE((byte)PCF8523_CONTROL_3);
   d70ec:	f002 fe42 	bl	d9d74 <_Z19__fetch_global_Wirev>
   d70f0:	6803      	ldr	r3, [r0, #0]
   d70f2:	2102      	movs	r1, #2
   d70f4:	689b      	ldr	r3, [r3, #8]
   d70f6:	4798      	blx	r3
  Wire._I2C_WRITE((byte)0x00);
   d70f8:	f002 fe3c 	bl	d9d74 <_Z19__fetch_global_Wirev>
   d70fc:	6803      	ldr	r3, [r0, #0]
   d70fe:	2100      	movs	r1, #0
   d7100:	689b      	ldr	r3, [r3, #8]
   d7102:	4798      	blx	r3
  Wire.endTransmission();
   d7104:	f002 fe36 	bl	d9d74 <_Z19__fetch_global_Wirev>
}
   d7108:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  // set to battery switchover mode
  Wire.beginTransmission(PCF8523_ADDRESS);
  Wire._I2C_WRITE((byte)PCF8523_CONTROL_3);
  Wire._I2C_WRITE((byte)0x00);
  Wire.endTransmission();
   d710c:	f001 b954 	b.w	d83b8 <_ZN7TwoWire15endTransmissionEv>

000d7110 <_ZN11RTC_PCF85233nowEv>:
}

DateTime RTC_PCF8523::now() {
   d7110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d7114:	4604      	mov	r4, r0
  Wire.beginTransmission(PCF8523_ADDRESS);
   d7116:	f002 fe2d 	bl	d9d74 <_Z19__fetch_global_Wirev>
   d711a:	2168      	movs	r1, #104	; 0x68
   d711c:	f001 f945 	bl	d83aa <_ZN7TwoWire17beginTransmissionEi>
  Wire._I2C_WRITE((byte)3);	
   d7120:	f002 fe28 	bl	d9d74 <_Z19__fetch_global_Wirev>
   d7124:	6803      	ldr	r3, [r0, #0]
   d7126:	2103      	movs	r1, #3
   d7128:	689b      	ldr	r3, [r3, #8]
   d712a:	4798      	blx	r3
  Wire.endTransmission();
   d712c:	f002 fe22 	bl	d9d74 <_Z19__fetch_global_Wirev>
   d7130:	f001 f942 	bl	d83b8 <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(PCF8523_ADDRESS, 7);
   d7134:	f002 fe1e 	bl	d9d74 <_Z19__fetch_global_Wirev>
   d7138:	2207      	movs	r2, #7
   d713a:	2168      	movs	r1, #104	; 0x68
   d713c:	f001 f927 	bl	d838e <_ZN7TwoWire11requestFromEii>
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
   d7140:	f002 fe18 	bl	d9d74 <_Z19__fetch_global_Wirev>
   d7144:	6803      	ldr	r3, [r0, #0]
   d7146:	695b      	ldr	r3, [r3, #20]
   d7148:	4798      	blx	r3
   d714a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   d714e:	1105      	asrs	r5, r0, #4
   d7150:	eba5 0585 	sub.w	r5, r5, r5, lsl #2
   d7154:	eb00 0045 	add.w	r0, r0, r5, lsl #1
   d7158:	b2c5      	uxtb	r5, r0
  Wire._I2C_WRITE((byte)3);	
  Wire.endTransmission();

  Wire.requestFrom(PCF8523_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
   d715a:	f002 fe0b 	bl	d9d74 <_Z19__fetch_global_Wirev>
   d715e:	6803      	ldr	r3, [r0, #0]
   d7160:	695b      	ldr	r3, [r3, #20]
   d7162:	4798      	blx	r3
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   d7164:	f3c0 1603 	ubfx	r6, r0, #4, #4
   d7168:	eba6 0686 	sub.w	r6, r6, r6, lsl #2
   d716c:	eb00 0046 	add.w	r0, r0, r6, lsl #1
   d7170:	b2c6      	uxtb	r6, r0
  Wire.endTransmission();

  Wire.requestFrom(PCF8523_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
   d7172:	f002 fdff 	bl	d9d74 <_Z19__fetch_global_Wirev>
   d7176:	6803      	ldr	r3, [r0, #0]
   d7178:	695b      	ldr	r3, [r3, #20]
   d717a:	4798      	blx	r3
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   d717c:	f3c0 1703 	ubfx	r7, r0, #4, #4
   d7180:	eba7 0787 	sub.w	r7, r7, r7, lsl #2
   d7184:	eb00 0047 	add.w	r0, r0, r7, lsl #1
   d7188:	b2c7      	uxtb	r7, r0

  Wire.requestFrom(PCF8523_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  uint8_t d = bcd2bin(Wire._I2C_READ());
   d718a:	f002 fdf3 	bl	d9d74 <_Z19__fetch_global_Wirev>
   d718e:	6803      	ldr	r3, [r0, #0]
   d7190:	695b      	ldr	r3, [r3, #20]
   d7192:	4798      	blx	r3
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   d7194:	f3c0 1803 	ubfx	r8, r0, #4, #4
   d7198:	eba8 0888 	sub.w	r8, r8, r8, lsl #2
   d719c:	eb00 0048 	add.w	r0, r0, r8, lsl #1
   d71a0:	fa5f f880 	uxtb.w	r8, r0
  Wire.requestFrom(PCF8523_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  uint8_t d = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();  // skip 'weekdays'
   d71a4:	f002 fde6 	bl	d9d74 <_Z19__fetch_global_Wirev>
   d71a8:	6803      	ldr	r3, [r0, #0]
   d71aa:	695b      	ldr	r3, [r3, #20]
   d71ac:	4798      	blx	r3
  uint8_t m = bcd2bin(Wire._I2C_READ());
   d71ae:	f002 fde1 	bl	d9d74 <_Z19__fetch_global_Wirev>
   d71b2:	6803      	ldr	r3, [r0, #0]
   d71b4:	695b      	ldr	r3, [r3, #20]
   d71b6:	4798      	blx	r3
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   d71b8:	f3c0 1903 	ubfx	r9, r0, #4, #4
   d71bc:	eba9 0989 	sub.w	r9, r9, r9, lsl #2
   d71c0:	eb00 0049 	add.w	r0, r0, r9, lsl #1
   d71c4:	fa5f f980 	uxtb.w	r9, r0
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  uint8_t d = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();  // skip 'weekdays'
  uint8_t m = bcd2bin(Wire._I2C_READ());
  uint16_t y = bcd2bin(Wire._I2C_READ()) + 2000;
   d71c8:	f002 fdd4 	bl	d9d74 <_Z19__fetch_global_Wirev>
   d71cc:	6803      	ldr	r3, [r0, #0]
   d71ce:	695b      	ldr	r3, [r3, #20]
   d71d0:	4798      	blx	r3
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
        year -= 2000;
    yOff = year;
   d71d2:	f3c0 1303 	ubfx	r3, r0, #4, #4
   d71d6:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
   d71da:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   d71de:	7020      	strb	r0, [r4, #0]
    m = month;
   d71e0:	f884 9001 	strb.w	r9, [r4, #1]
    d = day;
   d71e4:	f884 8002 	strb.w	r8, [r4, #2]
    hh = hour;
   d71e8:	70e7      	strb	r7, [r4, #3]
    mm = min;
   d71ea:	7126      	strb	r6, [r4, #4]
    ss = sec;
   d71ec:	7165      	strb	r5, [r4, #5]
  Wire._I2C_READ();  // skip 'weekdays'
  uint8_t m = bcd2bin(Wire._I2C_READ());
  uint16_t y = bcd2bin(Wire._I2C_READ()) + 2000;
  
  return DateTime (y, m, d, hh, mm, ss);
}
   d71ee:	4620      	mov	r0, r4
   d71f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d71f4 <_ZN10RTC_DS32315beginEv>:


////////////////////////////////////////////////////////////////////////////////
// RTC_DS3231 implementation

boolean RTC_DS3231::begin(void) {
   d71f4:	b508      	push	{r3, lr}
  Wire.begin();
   d71f6:	f002 fdbd 	bl	d9d74 <_Z19__fetch_global_Wirev>
   d71fa:	f001 f8b9 	bl	d8370 <_ZN7TwoWire5beginEv>
  return true;
}
   d71fe:	2001      	movs	r0, #1
   d7200:	bd08      	pop	{r3, pc}

000d7202 <_ZN11RTC_PCF85235beginEv>:
   d7202:	f7ff bff7 	b.w	d71f4 <_ZN10RTC_DS32315beginEv>

000d7206 <_GLOBAL__sub_I__ZN8DateTimeC2Em>:
   d7206:	f000 bc97 	b.w	d7b38 <HAL_Pin_Map>

000d720a <_ZN18SdCardPrintHandler16dateTimeCallbackEPtS0_>:
	// Start over at beginning of buffer
	bufOffset = 0;
}

// [static]
void SdCardPrintHandler::dateTimeCallback(uint16_t* date, uint16_t* time) {
   d720a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d720c:	460e      	mov	r6, r1
   d720e:	4607      	mov	r7, r0
	*date = FAT_DATE(Time.year(), Time.month(), Time.day());
   d7210:	f002 f920 	bl	d9454 <_ZN9TimeClass4yearEv>
   d7214:	4605      	mov	r5, r0
   d7216:	f002 f915 	bl	d9444 <_ZN9TimeClass5monthEv>
   d721a:	4604      	mov	r4, r0
   d721c:	f002 f908 	bl	d9430 <_ZN9TimeClass3dayEv>
   d7220:	0164      	lsls	r4, r4, #5
   d7222:	b2c0      	uxtb	r0, r0
   d7224:	b2ad      	uxth	r5, r5
   d7226:	f404 54ff 	and.w	r4, r4, #8160	; 0x1fe0
   d722a:	f2a5 75bc 	subw	r5, r5, #1980	; 0x7bc
   d722e:	4304      	orrs	r4, r0
   d7230:	ea44 2445 	orr.w	r4, r4, r5, lsl #9
   d7234:	803c      	strh	r4, [r7, #0]
	*time = FAT_TIME(Time.hour(), Time.minute(), Time.second());
   d7236:	f002 f8dd 	bl	d93f4 <_ZN9TimeClass4hourEv>
   d723a:	4605      	mov	r5, r0
   d723c:	f002 f8e4 	bl	d9408 <_ZN9TimeClass6minuteEv>
   d7240:	4604      	mov	r4, r0
   d7242:	f002 f8eb 	bl	d941c <_ZN9TimeClass6secondEv>
   d7246:	02ed      	lsls	r5, r5, #11
   d7248:	0164      	lsls	r4, r4, #5
   d724a:	f405 25ff 	and.w	r5, r5, #522240	; 0x7f800
   d724e:	f404 54ff 	and.w	r4, r4, #8160	; 0x1fe0
   d7252:	432c      	orrs	r4, r5
   d7254:	f3c0 0046 	ubfx	r0, r0, #1, #7
   d7258:	4304      	orrs	r4, r0
   d725a:	8034      	strh	r4, [r6, #0]
   d725c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d7260 <_ZN5SdFat5beginEhN8particle13__SPISettingsE>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   d7260:	b530      	push	{r4, r5, lr}
   d7262:	b085      	sub	sp, #20
   d7264:	4b1c      	ldr	r3, [pc, #112]	; (d72d8 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x78>)
   d7266:	9300      	str	r3, [sp, #0]
   d7268:	7913      	ldrb	r3, [r2, #4]
   d726a:	f88d 3004 	strb.w	r3, [sp, #4]
   d726e:	6893      	ldr	r3, [r2, #8]
   d7270:	9302      	str	r3, [sp, #8]
   d7272:	7b13      	ldrb	r3, [r2, #12]
   d7274:	f88d 300c 	strb.w	r3, [sp, #12]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d7278:	f500 658c 	add.w	r5, r0, #1120	; 0x460
   d727c:	7b53      	ldrb	r3, [r2, #13]
   d727e:	f88d 300d 	strb.w	r3, [sp, #13]
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   d7282:	4604      	mov	r4, r0
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d7284:	460a      	mov	r2, r1
   d7286:	466b      	mov	r3, sp
   d7288:	f200 416c 	addw	r1, r0, #1132	; 0x46c
   d728c:	4628      	mov	r0, r5
   d728e:	f7fe fa11 	bl	d56b4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>
   d7292:	b1f0      	cbz	r0, d72d2 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x72>
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   d7294:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   d7296:	f204 453c 	addw	r5, r4, #1084	; 0x43c
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
   d729a:	4628      	mov	r0, r5
   d729c:	f7ff f826 	bl	d62ec <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   d72a0:	2101      	movs	r1, #1
   d72a2:	4620      	mov	r0, r4
   d72a4:	f7fe fcf3 	bl	d5c8e <_ZN9FatVolume4initEh>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   d72a8:	4601      	mov	r1, r0
   d72aa:	b168      	cbz	r0, d72c8 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x68>
   d72ac:	4621      	mov	r1, r4
   d72ae:	4628      	mov	r0, r5
   d72b0:	f7fe fe07 	bl	d5ec2 <_ZN7FatFile8openRootEP9FatVolume>
   d72b4:	b168      	cbz	r0, d72d2 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x72>
   * \param[in] dir New current working directory.
   *
   * \return true for success else false.
   */
  static bool setCwd(FatFile* dir) {
    if (!dir->isDir()) {
   d72b6:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   d72ba:	f013 0370 	ands.w	r3, r3, #112	; 0x70
      return false;
    }
    m_cwd = dir;
   d72be:	bf16      	itet	ne
   d72c0:	4b06      	ldrne	r3, [pc, #24]	; (d72dc <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x7c>)
   d72c2:	4618      	moveq	r0, r3
   d72c4:	601d      	strne	r5, [r3, #0]
   d72c6:	e005      	b.n	d72d4 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x74>
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
    return (part ? init(part) : init(1) || init(0))
   d72c8:	4620      	mov	r0, r4
   d72ca:	f7fe fce0 	bl	d5c8e <_ZN9FatVolume4initEh>
   d72ce:	2800      	cmp	r0, #0
   d72d0:	d1ec      	bne.n	d72ac <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x4c>
   d72d2:	2000      	movs	r0, #0
           SdFileSystem::begin();
  }
   d72d4:	b005      	add	sp, #20
   d72d6:	bd30      	pop	{r4, r5, pc}
   d72d8:	000dc7c4 	.word	0x000dc7c4
   d72dc:	2003e314 	.word	0x2003e314

000d72e0 <_ZN18SdCardPrintHandlerC1ER5SdFathN8particle13__SPISettingsE>:
}

//
//
//
SdCardPrintHandler::SdCardPrintHandler(SdFat &sd, uint8_t csPin, SPISettings spiSettings) : sd(sd), csPin(csPin), spiSettings(spiSettings){
   d72e0:	b570      	push	{r4, r5, r6, lr}
   d72e2:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d72e4:	2500      	movs	r5, #0
   d72e6:	6045      	str	r5, [r0, #4]
   d72e8:	7322      	strb	r2, [r4, #12]
   d72ea:	481d      	ldr	r0, [pc, #116]	; (d7360 <_ZN18SdCardPrintHandlerC1ER5SdFathN8particle13__SPISettingsE+0x80>)
   d72ec:	4a1d      	ldr	r2, [pc, #116]	; (d7364 <_ZN18SdCardPrintHandlerC1ER5SdFathN8particle13__SPISettingsE+0x84>)
   d72ee:	6020      	str	r0, [r4, #0]
   d72f0:	60a1      	str	r1, [r4, #8]
   d72f2:	6122      	str	r2, [r4, #16]
   d72f4:	791a      	ldrb	r2, [r3, #4]
   d72f6:	7522      	strb	r2, [r4, #20]
   d72f8:	689a      	ldr	r2, [r3, #8]
   d72fa:	61a2      	str	r2, [r4, #24]
   d72fc:	7b1a      	ldrb	r2, [r3, #12]
   d72fe:	7722      	strb	r2, [r4, #28]
   d7300:	7b5b      	ldrb	r3, [r3, #13]
   d7302:	7763      	strb	r3, [r4, #29]
   d7304:	4b18      	ldr	r3, [pc, #96]	; (d7368 <_ZN18SdCardPrintHandlerC1ER5SdFathN8particle13__SPISettingsE+0x88>)
   d7306:	6223      	str	r3, [r4, #32]
   d7308:	4b18      	ldr	r3, [pc, #96]	; (d736c <_ZN18SdCardPrintHandlerC1ER5SdFathN8particle13__SPISettingsE+0x8c>)
   d730a:	6263      	str	r3, [r4, #36]	; 0x24
   d730c:	230a      	movs	r3, #10
   d730e:	62a3      	str	r3, [r4, #40]	; 0x28
   d7310:	f242 7310 	movw	r3, #10000	; 0x2710
	  _Rb_tree_node_base 	_M_header;
	  size_type 		_M_node_count; // Keeps track of size of tree.

	  _Rb_tree_impl()
	  : _Node_allocator(), _M_key_compare(), _M_header(),
	    _M_node_count(0)
   d7314:	f504 768e 	add.w	r6, r4, #284	; 0x11c
   d7318:	62e3      	str	r3, [r4, #44]	; 0x2c
   d731a:	2301      	movs	r3, #1
   d731c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
   d7320:	6365      	str	r5, [r4, #52]	; 0x34
   d7322:	63a5      	str	r5, [r4, #56]	; 0x38
   d7324:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
   d7328:	f884 50c9 	strb.w	r5, [r4, #201]	; 0xc9
   d732c:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d7330:	f884 50d0 	strb.w	r5, [r4, #208]	; 0xd0
   d7334:	f884 50d1 	strb.w	r5, [r4, #209]	; 0xd1
   d7338:	f884 50f4 	strb.w	r5, [r4, #244]	; 0xf4
   d733c:	f884 50f5 	strb.w	r5, [r4, #245]	; 0xf5
   d7340:	2210      	movs	r2, #16
   d7342:	4629      	mov	r1, r5
   d7344:	4630      	mov	r0, r6
   d7346:	f004 f85d 	bl	db404 <memset>
   d734a:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
	  void
	  _M_initialize()
	  {
	    this->_M_header._M_color = _S_red;
	    this->_M_header._M_parent = 0;
	    this->_M_header._M_left = &this->_M_header;
   d734e:	f8c4 6124 	str.w	r6, [r4, #292]	; 0x124
	    this->_M_header._M_right = &this->_M_header;
   d7352:	f8c4 6128 	str.w	r6, [r4, #296]	; 0x128
   d7356:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
}
   d735a:	4620      	mov	r0, r4
   d735c:	bd70      	pop	{r4, r5, r6, pc}
   d735e:	bf00      	nop
   d7360:	000dc9c4 	.word	0x000dc9c4
   d7364:	000dc7c4 	.word	0x000dc7c4
   d7368:	000dc927 	.word	0x000dc927
   d736c:	000f4240 	.word	0x000f4240

000d7370 <_ZN18SdCardPrintHandler7getNameEi>:
		needsScanCard = true;
		lastCardCheck = millis();
	}
}

const char *SdCardPrintHandler::getName(int num) {
   d7370:	b510      	push	{r4, lr}
	snprintf(nameBuf, sizeof(nameBuf), "%06u.txt", num);
   d7372:	f100 04bc 	add.w	r4, r0, #188	; 0xbc
   d7376:	460b      	mov	r3, r1
   d7378:	4a03      	ldr	r2, [pc, #12]	; (d7388 <_ZN18SdCardPrintHandler7getNameEi+0x18>)
   d737a:	210c      	movs	r1, #12
   d737c:	4620      	mov	r0, r4
   d737e:	f000 fd59 	bl	d7e34 <snprintf>
	return nameBuf;
}
   d7382:	4620      	mov	r0, r4
   d7384:	bd10      	pop	{r4, pc}
   d7386:	bf00      	nop
   d7388:	000dc92c 	.word	0x000dc92c

000d738c <_ZN18SdCardPrintHandler13checkMaxFilesEv>:
		return false;
	}
}


void SdCardPrintHandler::checkMaxFiles() {
   d738c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d738e:	f8d0 5124 	ldr.w	r5, [r0, #292]	; 0x124
   d7392:	4604      	mov	r4, r0
	auto it = fileNums.begin();

	while(fileNums.size() > maxFilesToKeep) {
		const char *name = getName(*it);
		DEBUG_NORMAL(("removing old log file %s", name));
		FatFile::remove(&logsDir, name);
   d7394:	f100 07d0 	add.w	r7, r0, #208	; 0xd0


void SdCardPrintHandler::checkMaxFiles() {
	auto it = fileNums.begin();

	while(fileNums.size() > maxFilesToKeep) {
   d7398:	f8d4 212c 	ldr.w	r2, [r4, #300]	; 0x12c
   d739c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d739e:	429a      	cmp	r2, r3
   d73a0:	d921      	bls.n	d73e6 <_ZN18SdCardPrintHandler13checkMaxFilesEv+0x5a>
		const char *name = getName(*it);
   d73a2:	6929      	ldr	r1, [r5, #16]
   d73a4:	4620      	mov	r0, r4
   d73a6:	f7ff ffe3 	bl	d7370 <_ZN18SdCardPrintHandler7getNameEi>
   d73aa:	4606      	mov	r6, r0
		DEBUG_NORMAL(("removing old log file %s", name));
   d73ac:	f001 f886 	bl	d84bc <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d73b0:	4633      	mov	r3, r6
   d73b2:	4a0d      	ldr	r2, [pc, #52]	; (d73e8 <_ZN18SdCardPrintHandler13checkMaxFilesEv+0x5c>)
   d73b4:	2101      	movs	r1, #1
   d73b6:	f002 f8c1 	bl	d953c <_ZN5Print11printf_implEbPKcz>
		FatFile::remove(&logsDir, name);
   d73ba:	4631      	mov	r1, r6
   d73bc:	4638      	mov	r0, r7
   d73be:	f7fe ffeb 	bl	d6398 <_ZN7FatFile6removeEPS_PKc>
      { return static_cast<_Link_type>(_M_node)->_M_valptr(); }

      _Self&
      operator++() _GLIBCXX_NOEXCEPT
      {
	_M_node = _Rb_tree_increment(_M_node);
   d73c2:	4628      	mov	r0, r5
   d73c4:	f002 fe0c 	bl	d9fe0 <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base>
    _M_erase_aux(const_iterator __position)
    {
      _Link_type __y =
	static_cast<_Link_type>(_Rb_tree_rebalance_for_erase
				(const_cast<_Base_ptr>(__position._M_node),
				 this->_M_impl._M_header));
   d73c8:	f504 718e 	add.w	r1, r4, #284	; 0x11c
      { return static_cast<_Link_type>(_M_node)->_M_valptr(); }

      _Self&
      operator++() _GLIBCXX_NOEXCEPT
      {
	_M_node = _Rb_tree_increment(_M_node);
   d73cc:	4606      	mov	r6, r0
    _M_erase_aux(const_iterator __position)
    {
      _Link_type __y =
	static_cast<_Link_type>(_Rb_tree_rebalance_for_erase
				(const_cast<_Base_ptr>(__position._M_node),
				 this->_M_impl._M_header));
   d73ce:	4628      	mov	r0, r5
   d73d0:	f002 fe7e 	bl	da0d0 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d73d4:	f7fc fe63 	bl	d409e <_ZdlPv>
      _M_drop_node(__y);
      --_M_impl._M_node_count;
   d73d8:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
   d73dc:	3b01      	subs	r3, #1
   d73de:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
		it = fileNums.erase(it);
   d73e2:	4635      	mov	r5, r6


void SdCardPrintHandler::checkMaxFiles() {
	auto it = fileNums.begin();

	while(fileNums.size() > maxFilesToKeep) {
   d73e4:	e7d8      	b.n	d7398 <_ZN18SdCardPrintHandler13checkMaxFilesEv+0xc>
   d73e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d73e8:	000dc935 	.word	0x000dc935

000d73ec <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiE>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d73ec:	b570      	push	{r4, r5, r6, lr}
   d73ee:	4606      	mov	r6, r0
   d73f0:	460c      	mov	r4, r1
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
   d73f2:	b14c      	cbz	r4, d7408 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiE+0x1c>
	{
	  _M_erase(_S_right(__x));
   d73f4:	68e1      	ldr	r1, [r4, #12]
   d73f6:	4630      	mov	r0, r6
   d73f8:	f7ff fff8 	bl	d73ec <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiE>
   d73fc:	68a5      	ldr	r5, [r4, #8]
   d73fe:	4620      	mov	r0, r4
   d7400:	f7fc fe4d 	bl	d409e <_ZdlPv>
	  _Link_type __y = _S_left(__x);
	  _M_drop_node(__x);
	  __x = __y;
   d7404:	462c      	mov	r4, r5
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
   d7406:	e7f4      	b.n	d73f2 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiE+0x6>
   d7408:	bd70      	pop	{r4, r5, r6, pc}
	...

000d740c <_ZN18SdCardPrintHandlerD1Ev>:
//
//
SdCardPrintHandler::SdCardPrintHandler(SdFat &sd, uint8_t csPin, SPISettings spiSettings) : sd(sd), csPin(csPin), spiSettings(spiSettings){
}

SdCardPrintHandler::~SdCardPrintHandler() {
   d740c:	b510      	push	{r4, lr}
   d740e:	4b05      	ldr	r3, [pc, #20]	; (d7424 <_ZN18SdCardPrintHandlerD1Ev+0x18>)

      _Rb_tree(_Rb_tree&& __x, _Node_allocator&& __a);
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
      { _M_erase(_M_begin()); }
   d7410:	f8d0 1120 	ldr.w	r1, [r0, #288]	; 0x120
   d7414:	6003      	str	r3, [r0, #0]
   d7416:	4604      	mov	r4, r0
   d7418:	f500 708c 	add.w	r0, r0, #280	; 0x118
   d741c:	f7ff ffe6 	bl	d73ec <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiE>

}
   d7420:	4620      	mov	r0, r4
   d7422:	bd10      	pop	{r4, pc}
   d7424:	000dc9c4 	.word	0x000dc9c4

000d7428 <_ZN18SdCardPrintHandlerD0Ev>:
//
//
SdCardPrintHandler::SdCardPrintHandler(SdFat &sd, uint8_t csPin, SPISettings spiSettings) : sd(sd), csPin(csPin), spiSettings(spiSettings){
}

SdCardPrintHandler::~SdCardPrintHandler() {
   d7428:	b510      	push	{r4, lr}
   d742a:	4604      	mov	r4, r0

}
   d742c:	f7ff ffee 	bl	d740c <_ZN18SdCardPrintHandlerD1Ev>
   d7430:	4620      	mov	r0, r4
   d7432:	f44f 719a 	mov.w	r1, #308	; 0x134
   d7436:	f002 fd90 	bl	d9f5a <_ZdlPvj>
   d743a:	4620      	mov	r0, r4
   d743c:	bd10      	pop	{r4, pc}

000d743e <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_>:
#if __cplusplus >= 201103L
    template<typename _Arg>
#endif
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::iterator, bool>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d743e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7442:	460e      	mov	r6, r1
	  (this->_M_impl._M_header._M_parent);
      }

      _Link_type
      _M_end() _GLIBCXX_NOEXCEPT
      { return reinterpret_cast<_Link_type>(&this->_M_impl._M_header); }
   d7444:	f106 0a04 	add.w	sl, r6, #4
   d7448:	6889      	ldr	r1, [r1, #8]
#if __cplusplus >= 201103L
    template<typename _Arg>
#endif
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::iterator, bool>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d744a:	4605      	mov	r5, r0
   d744c:	4617      	mov	r7, r2
	  (this->_M_impl._M_header._M_parent);
      }

      _Link_type
      _M_end() _GLIBCXX_NOEXCEPT
      { return reinterpret_cast<_Link_type>(&this->_M_impl._M_header); }
   d744e:	4654      	mov	r4, sl
    _M_get_insert_unique_pos(const key_type& __k)
    {
      typedef pair<_Base_ptr, _Base_ptr> _Res;
      _Link_type __x = _M_begin();
      _Link_type __y = _M_end();
      bool __comp = true;
   d7450:	2301      	movs	r3, #1
      while (__x != 0)
   d7452:	b159      	cbz	r1, d746c <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_+0x2e>
   d7454:	683a      	ldr	r2, [r7, #0]
   d7456:	690b      	ldr	r3, [r1, #16]
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x < __y; }
   d7458:	429a      	cmp	r2, r3
   d745a:	bfb4      	ite	lt
   d745c:	688a      	ldrlt	r2, [r1, #8]
   d745e:	68ca      	ldrge	r2, [r1, #12]
#if __cplusplus >= 201103L
    template<typename _Arg>
#endif
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::iterator, bool>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d7460:	460c      	mov	r4, r1
   d7462:	bfb4      	ite	lt
   d7464:	2301      	movlt	r3, #1
   d7466:	2300      	movge	r3, #0
   d7468:	4611      	mov	r1, r2
   d746a:	e7f2      	b.n	d7452 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_+0x14>
	  __y = __x;
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
	  __x = __comp ? _S_left(__x) : _S_right(__x);
	}
      iterator __j = iterator(__y);
      if (__comp)
   d746c:	b133      	cbz	r3, d747c <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_+0x3e>
	{
	  if (__j == begin())
   d746e:	68f3      	ldr	r3, [r6, #12]
   d7470:	429c      	cmp	r4, r3
   d7472:	d00e      	beq.n	d7492 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_+0x54>
      }

      _Self&
      operator--() _GLIBCXX_NOEXCEPT
      {
	_M_node = _Rb_tree_decrement(_M_node);
   d7474:	4620      	mov	r0, r4
   d7476:	f002 fdc6 	bl	da006 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
   d747a:	e000      	b.n	d747e <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_+0x40>
	  __y = __x;
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
	  __x = __comp ? _S_left(__x) : _S_right(__x);
	}
      iterator __j = iterator(__y);
      if (__comp)
   d747c:	4620      	mov	r0, r4
	  if (__j == begin())
	    return _Res(__x, __y);
	  else
	    --__j;
	}
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
   d747e:	6902      	ldr	r2, [r0, #16]
   d7480:	683b      	ldr	r3, [r7, #0]
   d7482:	429a      	cmp	r2, r3
   d7484:	db05      	blt.n	d7492 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_+0x54>

      template<class _U1, class _U2, class = typename
	       enable_if<__and_<is_convertible<_U1, _T1>,
				is_convertible<_U2, _T2>>::value>::type>
	constexpr pair(_U1&& __x, _U2&& __y)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   d7486:	6028      	str	r0, [r5, #0]
   d7488:	2300      	movs	r3, #0
   d748a:	712b      	strb	r3, [r5, #4]
				 _GLIBCXX_FORWARD(_Arg, __v), __an),
		      true);
	}

      return _Res(iterator(static_cast<_Link_type>(__res.first)), false);
    }
   d748c:	4628      	mov	r0, r5
   d748e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
		 _NodeGen& __node_gen)
      {
	bool __insert_left = (__x != 0 || __p == _M_end()
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
							_S_key(__p)));
   d7492:	45a2      	cmp	sl, r4
   d7494:	d008      	beq.n	d74a8 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_+0x6a>
   d7496:	683a      	ldr	r2, [r7, #0]
   d7498:	6923      	ldr	r3, [r4, #16]
   d749a:	429a      	cmp	r2, r3
   d749c:	bfac      	ite	ge
   d749e:	f04f 0900 	movge.w	r9, #0
   d74a2:	f04f 0901 	movlt.w	r9, #1
   d74a6:	e001      	b.n	d74ac <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_+0x6e>
   d74a8:	f04f 0901 	mov.w	r9, #1
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d74ac:	2014      	movs	r0, #20
   d74ae:	f7fc fdf4 	bl	d409a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d74b2:	683b      	ldr	r3, [r7, #0]
   d74b4:	f110 0f10 	cmn.w	r0, #16
   d74b8:	bf18      	it	ne
   d74ba:	6103      	strne	r3, [r0, #16]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d74bc:	4680      	mov	r8, r0

	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));

	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
   d74be:	4653      	mov	r3, sl
   d74c0:	4601      	mov	r1, r0
   d74c2:	4622      	mov	r2, r4
   d74c4:	4648      	mov	r0, r9
   d74c6:	f002 fda0 	bl	da00a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
				      this->_M_impl._M_header);
	++_M_impl._M_node_count;
   d74ca:	6973      	ldr	r3, [r6, #20]
   d74cc:	f8c5 8000 	str.w	r8, [r5]
   d74d0:	3301      	adds	r3, #1
   d74d2:	6173      	str	r3, [r6, #20]
   d74d4:	2301      	movs	r3, #1
   d74d6:	e7d8      	b.n	d748a <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_+0x4c>

000d74d8 <_ZN18SdCardPrintHandler11openLogFileEv>:
const char *SdCardPrintHandler::getName(int num) {
	snprintf(nameBuf, sizeof(nameBuf), "%06u.txt", num);
	return nameBuf;
}

bool SdCardPrintHandler::openLogFile() {
   d74d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	const char *name = getName(lastFileNum);
   d74da:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
const char *SdCardPrintHandler::getName(int num) {
	snprintf(nameBuf, sizeof(nameBuf), "%06u.txt", num);
	return nameBuf;
}

bool SdCardPrintHandler::openLogFile() {
   d74de:	4604      	mov	r4, r0
	const char *name = getName(lastFileNum);
   d74e0:	f7ff ff46 	bl	d7370 <_ZN18SdCardPrintHandler7getNameEi>
	if (curLogFile.open(&logsDir, name, O_RDWR | O_APPEND | O_CREAT)) {
   d74e4:	f240 230a 	movw	r3, #522	; 0x20a
   d74e8:	4602      	mov	r2, r0
   d74ea:	f104 01d0 	add.w	r1, r4, #208	; 0xd0
   d74ee:	f104 00f4 	add.w	r0, r4, #244	; 0xf4
   d74f2:	f7fe ff02 	bl	d62fa <_ZN7FatFile4openEPS_PKci>
   d74f6:	4605      	mov	r5, r0
   d74f8:	b130      	cbz	r0, d7508 <_ZN18SdCardPrintHandler11openLogFileEv+0x30>
       */
      std::pair<iterator, bool>
      insert(const value_type& __x)
      {
	std::pair<typename _Rep_type::iterator, bool> __p =
	  _M_t._M_insert_unique(__x);
   d74fa:	f104 02cc 	add.w	r2, r4, #204	; 0xcc
   d74fe:	f504 718c 	add.w	r1, r4, #280	; 0x118
   d7502:	4668      	mov	r0, sp
   d7504:	f7ff ff9b 	bl	d743e <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_>
	}
	else {
		DEBUG_HIGH(("failed to open log file %s", name));
		return false;
	}
}
   d7508:	4628      	mov	r0, r5
   d750a:	b003      	add	sp, #12
   d750c:	bd30      	pop	{r4, r5, pc}
	...

000d7510 <_ZN18SdCardPrintHandler8scanCardEv>:
	}

	return 1;
}

void SdCardPrintHandler::scanCard() {
   d7510:	b530      	push	{r4, r5, lr}
	DEBUG_HIGH(("scanCard"));
	needsScanCard = false;
   d7512:	2300      	movs	r3, #0
   d7514:	f880 30c8 	strb.w	r3, [r0, #200]	; 0xc8

	if (!lastBeginResult) {
   d7518:	f890 30c9 	ldrb.w	r3, [r0, #201]	; 0xc9
	}

	return 1;
}

void SdCardPrintHandler::scanCard() {
   d751c:	b09d      	sub	sp, #116	; 0x74
   d751e:	4604      	mov	r4, r0
	DEBUG_HIGH(("scanCard"));
	needsScanCard = false;

	if (!lastBeginResult) {
   d7520:	b9e3      	cbnz	r3, d755c <_ZN18SdCardPrintHandler8scanCardEv+0x4c>
   *
   * See the timestamp() function.
   */
  static void dateTimeCallback(
    void (*dateTime)(uint16_t* date, uint16_t* time)) {
    m_dateTime = dateTime;
   d7522:	4b49      	ldr	r3, [pc, #292]	; (d7648 <_ZN18SdCardPrintHandler8scanCardEv+0x138>)
   d7524:	4a49      	ldr	r2, [pc, #292]	; (d764c <_ZN18SdCardPrintHandler8scanCardEv+0x13c>)
		// Set the date time callback
		SdFile::dateTimeCallback(dateTimeCallback);

		pinMode(csPin, OUTPUT);
   d7526:	7b00      	ldrb	r0, [r0, #12]
   d7528:	601a      	str	r2, [r3, #0]
   d752a:	2101      	movs	r1, #1
   d752c:	f002 fcbc 	bl	d9ea8 <pinMode>
   d7530:	4b47      	ldr	r3, [pc, #284]	; (d7650 <_ZN18SdCardPrintHandler8scanCardEv+0x140>)
   d7532:	930c      	str	r3, [sp, #48]	; 0x30
   d7534:	7d23      	ldrb	r3, [r4, #20]
   d7536:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   d753a:	69a3      	ldr	r3, [r4, #24]
   d753c:	930e      	str	r3, [sp, #56]	; 0x38
   d753e:	7f23      	ldrb	r3, [r4, #28]
   d7540:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
		lastBeginResult = sd.begin(csPin, spiSettings);
   d7544:	7b21      	ldrb	r1, [r4, #12]
   d7546:	7f63      	ldrb	r3, [r4, #29]
   d7548:	68a0      	ldr	r0, [r4, #8]
   d754a:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
   d754e:	aa0c      	add	r2, sp, #48	; 0x30
   d7550:	f7ff fe86 	bl	d7260 <_ZN5SdFat5beginEhN8particle13__SPISettingsE>
   d7554:	f884 00c9 	strb.w	r0, [r4, #201]	; 0xc9
		if (!lastBeginResult) {
   d7558:	2800      	cmp	r0, #0
   d755a:	d06b      	beq.n	d7634 <_ZN18SdCardPrintHandler8scanCardEv+0x124>
			lastCardCheck = millis();
			return;
		}
	}

	if (logsDirName != NULL && !sd.exists(logsDirName)) {
   d755c:	6a22      	ldr	r2, [r4, #32]
   d755e:	b332      	cbz	r2, d75ae <_ZN18SdCardPrintHandler8scanCardEv+0x9e>
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   d7560:	68a1      	ldr	r1, [r4, #8]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d7562:	2300      	movs	r3, #0
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile file;
    return file.open(this, path, O_RDONLY);
   d7564:	f201 413c 	addw	r1, r1, #1084	; 0x43c
   d7568:	a80c      	add	r0, sp, #48	; 0x30
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d756a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
   d756e:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile file;
    return file.open(this, path, O_RDONLY);
   d7572:	f7fe fec2 	bl	d62fa <_ZN7FatFile4openEPS_PKci>
   d7576:	4605      	mov	r5, r0
   d7578:	b9c8      	cbnz	r0, d75ae <_ZN18SdCardPrintHandler8scanCardEv+0x9e>
		DEBUG_NORMAL(("creating logs dir %s", logsDirName));
   d757a:	f000 ff9f 	bl	d84bc <_Z16_fetch_usbserialv>
   d757e:	6a23      	ldr	r3, [r4, #32]
   d7580:	4a34      	ldr	r2, [pc, #208]	; (d7654 <_ZN18SdCardPrintHandler8scanCardEv+0x144>)
   d7582:	2101      	movs	r1, #1
   d7584:	f001 ffda 	bl	d953c <_ZN5Print11printf_implEbPKcz>
		if (!sd.mkdir(logsDirName)) {
   d7588:	68a1      	ldr	r1, [r4, #8]
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
   d758a:	6a22      	ldr	r2, [r4, #32]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d758c:	f88d 5030 	strb.w	r5, [sp, #48]	; 0x30
   d7590:	2301      	movs	r3, #1
   d7592:	f201 413c 	addw	r1, r1, #1084	; 0x43c
   d7596:	a80c      	add	r0, sp, #48	; 0x30
   d7598:	f88d 5031 	strb.w	r5, [sp, #49]	; 0x31
   d759c:	f7fe ff8d 	bl	d64ba <_ZN7FatFile5mkdirEPS_PKcb>
   d75a0:	b928      	cbnz	r0, d75ae <_ZN18SdCardPrintHandler8scanCardEv+0x9e>
			DEBUG_NORMAL(("mkdir failed"));
   d75a2:	f000 ff8b 	bl	d84bc <_Z16_fetch_usbserialv>
   d75a6:	4a2c      	ldr	r2, [pc, #176]	; (d7658 <_ZN18SdCardPrintHandler8scanCardEv+0x148>)
   d75a8:	2101      	movs	r1, #1
   d75aa:	f001 ffc7 	bl	d953c <_ZN5Print11printf_implEbPKcz>
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   d75ae:	68a1      	ldr	r1, [r4, #8]
		}
	}

	if (logsDir.open(sd.vwd(), logsDirName, O_READ)) {
   d75b0:	6a22      	ldr	r2, [r4, #32]
   d75b2:	f104 05d0 	add.w	r5, r4, #208	; 0xd0
   d75b6:	2300      	movs	r3, #0
   d75b8:	f201 413c 	addw	r1, r1, #1084	; 0x43c
   d75bc:	4628      	mov	r0, r5
   d75be:	f7fe fe9c 	bl	d62fa <_ZN7FatFile4openEPS_PKci>
   d75c2:	b388      	cbz	r0, d7628 <_ZN18SdCardPrintHandler8scanCardEv+0x118>
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
   d75c4:	2100      	movs	r1, #0
   d75c6:	4628      	mov	r0, r5
   d75c8:	f7fe fd63 	bl	d6092 <_ZN7FatFile7seekSetEm>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d75cc:	2300      	movs	r3, #0
   d75ce:	f88d 300c 	strb.w	r3, [sp, #12]
   d75d2:	f88d 300d 	strb.w	r3, [sp, #13]

		logsDir.rewind();

		FatFile tempFile;

		while (tempFile.openNext(&logsDir, O_READ)) {
   d75d6:	2200      	movs	r2, #0
   d75d8:	4629      	mov	r1, r5
   d75da:	a803      	add	r0, sp, #12
   d75dc:	f7fe fe10 	bl	d6200 <_ZN7FatFile8openNextEPS_i>
   d75e0:	b1d0      	cbz	r0, d7618 <_ZN18SdCardPrintHandler8scanCardEv+0x108>
			char name[64];
			tempFile.getName(name, sizeof(name));
   d75e2:	2240      	movs	r2, #64	; 0x40
   d75e4:	a90c      	add	r1, sp, #48	; 0x30
   d75e6:	a803      	add	r0, sp, #12
   d75e8:	f7ff f8c9 	bl	d677e <_ZN7FatFile7getNameEPcj>
			DEBUG_HIGH(("logs dir file %s", name));

			int num = atoi(name);
   d75ec:	a80c      	add	r0, sp, #48	; 0x30
   d75ee:	f003 fde1 	bl	db1b4 <atoi>
   d75f2:	9000      	str	r0, [sp, #0]
			if (num != 0) {
   d75f4:	b160      	cbz	r0, d7610 <_ZN18SdCardPrintHandler8scanCardEv+0x100>
   d75f6:	466a      	mov	r2, sp
   d75f8:	f504 718c 	add.w	r1, r4, #280	; 0x118
   d75fc:	a801      	add	r0, sp, #4
   d75fe:	f7ff ff1e 	bl	d743e <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_>
				fileNums.insert(num);
				if (num > lastFileNum) {
   d7602:	9b00      	ldr	r3, [sp, #0]
   d7604:	f8d4 20cc 	ldr.w	r2, [r4, #204]	; 0xcc
   d7608:	429a      	cmp	r2, r3
					lastFileNum = num;
   d760a:	bfb8      	it	lt
   d760c:	f8c4 30cc 	strlt.w	r3, [r4, #204]	; 0xcc
				}
			}
			tempFile.close();
   d7610:	a803      	add	r0, sp, #12
   d7612:	f7fe fe6b 	bl	d62ec <_ZN7FatFile5closeEv>

		logsDir.rewind();

		FatFile tempFile;

		while (tempFile.openNext(&logsDir, O_READ)) {
   d7616:	e7de      	b.n	d75d6 <_ZN18SdCardPrintHandler8scanCardEv+0xc6>
					lastFileNum = num;
				}
			}
			tempFile.close();
		}
		checkMaxFiles();
   d7618:	4620      	mov	r0, r4
   d761a:	f7ff feb7 	bl	d738c <_ZN18SdCardPrintHandler13checkMaxFilesEv>

		if (!openLogFile()) {
   d761e:	4620      	mov	r0, r4
   d7620:	f7ff ff5a 	bl	d74d8 <_ZN18SdCardPrintHandler11openLogFileEv>
   d7624:	b968      	cbnz	r0, d7642 <_ZN18SdCardPrintHandler8scanCardEv+0x132>
   d7626:	e005      	b.n	d7634 <_ZN18SdCardPrintHandler8scanCardEv+0x124>
			needsScanCard = true;
			lastCardCheck = millis();
		}
	}
	else {
		DEBUG_NORMAL(("failed to open logs dir"));
   d7628:	f000 ff48 	bl	d84bc <_Z16_fetch_usbserialv>
   d762c:	4a0b      	ldr	r2, [pc, #44]	; (d765c <_ZN18SdCardPrintHandler8scanCardEv+0x14c>)
   d762e:	2101      	movs	r1, #1
   d7630:	f001 ff84 	bl	d953c <_ZN5Print11printf_implEbPKcz>
		needsScanCard = true;
   d7634:	2301      	movs	r3, #1
   d7636:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
   d763a:	f000 fa05 	bl	d7a48 <HAL_Timer_Get_Milli_Seconds>
		lastCardCheck = millis();
   d763e:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
	}
}
   d7642:	b01d      	add	sp, #116	; 0x74
   d7644:	bd30      	pop	{r4, r5, pc}
   d7646:	bf00      	nop
   d7648:	2003e318 	.word	0x2003e318
   d764c:	000d720b 	.word	0x000d720b
   d7650:	000dc7c4 	.word	0x000dc7c4
   d7654:	000dc973 	.word	0x000dc973
   d7658:	000dc94e 	.word	0x000dc94e
   d765c:	000dc95b 	.word	0x000dc95b

000d7660 <_ZN18SdCardPrintHandler8writeBufEv>:
		it = fileNums.erase(it);
	}
}


void SdCardPrintHandler::writeBuf() {
   d7660:	b538      	push	{r3, r4, r5, lr}
   d7662:	4604      	mov	r4, r0

	if (writeToStream) {
   d7664:	6b40      	ldr	r0, [r0, #52]	; 0x34
   d7666:	b128      	cbz	r0, d7674 <_ZN18SdCardPrintHandler8writeBufEv+0x14>
		writeToStream->write(buf, bufOffset);
   d7668:	6803      	ldr	r3, [r0, #0]
   d766a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   d766c:	68db      	ldr	r3, [r3, #12]
   d766e:	f104 013c 	add.w	r1, r4, #60	; 0x3c
   d7672:	4798      	blx	r3
	}

	if (needsScanCard) {
   d7674:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
   d7678:	b15b      	cbz	r3, d7692 <_ZN18SdCardPrintHandler8writeBufEv+0x32>
		if (lastCardCheck == 0 || millis() - lastCardCheck >= cardCheckPeriod) {
   d767a:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
   d767e:	2b00      	cmp	r3, #0
   d7680:	d053      	beq.n	d772a <_ZN18SdCardPrintHandler8writeBufEv+0xca>
   d7682:	f000 f9e1 	bl	d7a48 <HAL_Timer_Get_Milli_Seconds>
   d7686:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
   d768a:	1ac0      	subs	r0, r0, r3
   d768c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d768e:	4298      	cmp	r0, r3
   d7690:	d24b      	bcs.n	d772a <_ZN18SdCardPrintHandler8writeBufEv+0xca>
			scanCard();
		}
	}

	if (lastBeginResult) {
   d7692:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
   d7696:	2b00      	cmp	r3, #0
   d7698:	d044      	beq.n	d7724 <_ZN18SdCardPrintHandler8writeBufEv+0xc4>
		if (curLogFile.isOpen()) {
   d769a:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   d769e:	2b00      	cmp	r3, #0
   d76a0:	d040      	beq.n	d7724 <_ZN18SdCardPrintHandler8writeBufEv+0xc4>
			if (curLogFile.write(buf, bufOffset) > 0) {
   d76a2:	f104 05f4 	add.w	r5, r4, #244	; 0xf4
   d76a6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   d76a8:	f104 013c 	add.w	r1, r4, #60	; 0x3c
   d76ac:	4628      	mov	r0, r5
   d76ae:	f7fe ff55 	bl	d655c <_ZN7FatFile5writeEPKvj>
   d76b2:	2800      	cmp	r0, #0
   d76b4:	dd21      	ble.n	d76fa <_ZN18SdCardPrintHandler8writeBufEv+0x9a>
				if (syncEveryEntry) {
   d76b6:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   d76ba:	b113      	cbz	r3, d76c2 <_ZN18SdCardPrintHandler8writeBufEv+0x62>
					curLogFile.sync();
   d76bc:	4628      	mov	r0, r5
   d76be:	f7fe fddf 	bl	d6280 <_ZN7FatFile4syncEv>
				}

				if (curLogFile.fileSize() > desiredFileSize) {
   d76c2:	6a62      	ldr	r2, [r4, #36]	; 0x24
   d76c4:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   d76c8:	429a      	cmp	r2, r3
   d76ca:	d22b      	bcs.n	d7724 <_ZN18SdCardPrintHandler8writeBufEv+0xc4>
					// File is too large now. Make a new one.
					curLogFile.close();
   d76cc:	4628      	mov	r0, r5
   d76ce:	f7fe fe0d 	bl	d62ec <_ZN7FatFile5closeEv>
					lastFileNum++;
   d76d2:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   d76d6:	3301      	adds	r3, #1
   d76d8:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
					DEBUG_NORMAL(("creating new log file %04d", lastFileNum));
   d76dc:	f000 feee 	bl	d84bc <_Z16_fetch_usbserialv>
   d76e0:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   d76e4:	4a13      	ldr	r2, [pc, #76]	; (d7734 <_ZN18SdCardPrintHandler8writeBufEv+0xd4>)
   d76e6:	2101      	movs	r1, #1
   d76e8:	f001 ff28 	bl	d953c <_ZN5Print11printf_implEbPKcz>
					openLogFile();
   d76ec:	4620      	mov	r0, r4
   d76ee:	f7ff fef3 	bl	d74d8 <_ZN18SdCardPrintHandler11openLogFileEv>

					// Are there too many old files?
					checkMaxFiles();
   d76f2:	4620      	mov	r0, r4
   d76f4:	f7ff fe4a 	bl	d738c <_ZN18SdCardPrintHandler13checkMaxFilesEv>
   d76f8:	e014      	b.n	d7724 <_ZN18SdCardPrintHandler8writeBufEv+0xc4>
				}
			}
			else {
				// Write failed
				DEBUG_NORMAL(("write to sd card failed"));
   d76fa:	f000 fedf 	bl	d84bc <_Z16_fetch_usbserialv>
   d76fe:	4a0e      	ldr	r2, [pc, #56]	; (d7738 <_ZN18SdCardPrintHandler8writeBufEv+0xd8>)
   d7700:	2101      	movs	r1, #1
   d7702:	f001 ff1b 	bl	d953c <_ZN5Print11printf_implEbPKcz>
				curLogFile.close();
   d7706:	4628      	mov	r0, r5
   d7708:	f7fe fdf0 	bl	d62ec <_ZN7FatFile5closeEv>
				logsDir.close();
   d770c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
   d7710:	f7fe fdec 	bl	d62ec <_ZN7FatFile5closeEv>
				needsScanCard = true;
   d7714:	2301      	movs	r3, #1
   d7716:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
				lastBeginResult = false;
   d771a:	2300      	movs	r3, #0
   d771c:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
				lastCardCheck = 0;
   d7720:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
			}
		}
	}

	// Start over at beginning of buffer
	bufOffset = 0;
   d7724:	2300      	movs	r3, #0
   d7726:	63a3      	str	r3, [r4, #56]	; 0x38
}
   d7728:	bd38      	pop	{r3, r4, r5, pc}
		writeToStream->write(buf, bufOffset);
	}

	if (needsScanCard) {
		if (lastCardCheck == 0 || millis() - lastCardCheck >= cardCheckPeriod) {
			scanCard();
   d772a:	4620      	mov	r0, r4
   d772c:	f7ff fef0 	bl	d7510 <_ZN18SdCardPrintHandler8scanCardEv>
   d7730:	e7af      	b.n	d7692 <_ZN18SdCardPrintHandler8writeBufEv+0x32>
   d7732:	bf00      	nop
   d7734:	000dc988 	.word	0x000dc988
   d7738:	000dc9a3 	.word	0x000dc9a3

000d773c <_ZN18SdCardPrintHandler5writeEh>:
SdCardPrintHandler::~SdCardPrintHandler() {

}


size_t SdCardPrintHandler::write(uint8_t c) {
   d773c:	b508      	push	{r3, lr}

	buf[bufOffset++] = c;
   d773e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   d7740:	1c5a      	adds	r2, r3, #1
   d7742:	4403      	add	r3, r0
	if (bufOffset >= BUF_SIZE || c == '\n') {
   d7744:	2a7f      	cmp	r2, #127	; 0x7f
}


size_t SdCardPrintHandler::write(uint8_t c) {

	buf[bufOffset++] = c;
   d7746:	6382      	str	r2, [r0, #56]	; 0x38
   d7748:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
	if (bufOffset >= BUF_SIZE || c == '\n') {
   d774c:	d801      	bhi.n	d7752 <_ZN18SdCardPrintHandler5writeEh+0x16>
   d774e:	290a      	cmp	r1, #10
   d7750:	d101      	bne.n	d7756 <_ZN18SdCardPrintHandler5writeEh+0x1a>
		// Buffer is full or have the LF in CRLF, write it out
		writeBuf();
   d7752:	f7ff ff85 	bl	d7660 <_ZN18SdCardPrintHandler8writeBufEv>
	}

	return 1;
}
   d7756:	2001      	movs	r0, #1
   d7758:	bd08      	pop	{r3, pc}

000d775a <_GLOBAL__sub_I__ZN22SdCardLogHandlerBufferC2EPhjR5SdFathN8particle13__SPISettingsE8LogLevelN5spark6VectorINS6_17LogCategoryFilterENS6_16DefaultAllocatorEEE>:
   d775a:	f000 b9ed 	b.w	d7b38 <HAL_Pin_Map>
	...

000d7760 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d7760:	b508      	push	{r3, lr}
   d7762:	4b02      	ldr	r3, [pc, #8]	; (d776c <HAL_USB_USART_Init+0xc>)
   d7764:	681b      	ldr	r3, [r3, #0]
   d7766:	681b      	ldr	r3, [r3, #0]
   d7768:	9301      	str	r3, [sp, #4]
   d776a:	bd08      	pop	{r3, pc}
   d776c:	0003024c 	.word	0x0003024c

000d7770 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d7770:	b508      	push	{r3, lr}
   d7772:	4b02      	ldr	r3, [pc, #8]	; (d777c <HAL_USB_USART_Begin+0xc>)
   d7774:	681b      	ldr	r3, [r3, #0]
   d7776:	685b      	ldr	r3, [r3, #4]
   d7778:	9301      	str	r3, [sp, #4]
   d777a:	bd08      	pop	{r3, pc}
   d777c:	0003024c 	.word	0x0003024c

000d7780 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d7780:	b508      	push	{r3, lr}
   d7782:	4b02      	ldr	r3, [pc, #8]	; (d778c <HAL_USB_USART_Available_Data+0xc>)
   d7784:	681b      	ldr	r3, [r3, #0]
   d7786:	691b      	ldr	r3, [r3, #16]
   d7788:	9301      	str	r3, [sp, #4]
   d778a:	bd08      	pop	{r3, pc}
   d778c:	0003024c 	.word	0x0003024c

000d7790 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d7790:	b508      	push	{r3, lr}
   d7792:	4b02      	ldr	r3, [pc, #8]	; (d779c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d7794:	681b      	ldr	r3, [r3, #0]
   d7796:	695b      	ldr	r3, [r3, #20]
   d7798:	9301      	str	r3, [sp, #4]
   d779a:	bd08      	pop	{r3, pc}
   d779c:	0003024c 	.word	0x0003024c

000d77a0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d77a0:	b508      	push	{r3, lr}
   d77a2:	4b02      	ldr	r3, [pc, #8]	; (d77ac <HAL_USB_USART_Receive_Data+0xc>)
   d77a4:	681b      	ldr	r3, [r3, #0]
   d77a6:	699b      	ldr	r3, [r3, #24]
   d77a8:	9301      	str	r3, [sp, #4]
   d77aa:	bd08      	pop	{r3, pc}
   d77ac:	0003024c 	.word	0x0003024c

000d77b0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d77b0:	b508      	push	{r3, lr}
   d77b2:	4b02      	ldr	r3, [pc, #8]	; (d77bc <HAL_USB_USART_Send_Data+0xc>)
   d77b4:	681b      	ldr	r3, [r3, #0]
   d77b6:	69db      	ldr	r3, [r3, #28]
   d77b8:	9301      	str	r3, [sp, #4]
   d77ba:	bd08      	pop	{r3, pc}
   d77bc:	0003024c 	.word	0x0003024c

000d77c0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d77c0:	b508      	push	{r3, lr}
   d77c2:	4b02      	ldr	r3, [pc, #8]	; (d77cc <HAL_USB_USART_Flush_Data+0xc>)
   d77c4:	681b      	ldr	r3, [r3, #0]
   d77c6:	6a1b      	ldr	r3, [r3, #32]
   d77c8:	9301      	str	r3, [sp, #4]
   d77ca:	bd08      	pop	{r3, pc}
   d77cc:	0003024c 	.word	0x0003024c

000d77d0 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d77d0:	b508      	push	{r3, lr}
   d77d2:	4b02      	ldr	r3, [pc, #8]	; (d77dc <HAL_I2C_Begin+0xc>)
   d77d4:	681b      	ldr	r3, [r3, #0]
   d77d6:	68db      	ldr	r3, [r3, #12]
   d77d8:	9301      	str	r3, [sp, #4]
   d77da:	bd08      	pop	{r3, pc}
   d77dc:	00030228 	.word	0x00030228

000d77e0 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
   d77e0:	b508      	push	{r3, lr}
   d77e2:	4b02      	ldr	r3, [pc, #8]	; (d77ec <HAL_I2C_Request_Data+0xc>)
   d77e4:	681b      	ldr	r3, [r3, #0]
   d77e6:	695b      	ldr	r3, [r3, #20]
   d77e8:	9301      	str	r3, [sp, #4]
   d77ea:	bd08      	pop	{r3, pc}
   d77ec:	00030228 	.word	0x00030228

000d77f0 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
   d77f0:	b508      	push	{r3, lr}
   d77f2:	4b02      	ldr	r3, [pc, #8]	; (d77fc <HAL_I2C_Begin_Transmission+0xc>)
   d77f4:	681b      	ldr	r3, [r3, #0]
   d77f6:	699b      	ldr	r3, [r3, #24]
   d77f8:	9301      	str	r3, [sp, #4]
   d77fa:	bd08      	pop	{r3, pc}
   d77fc:	00030228 	.word	0x00030228

000d7800 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d7800:	b508      	push	{r3, lr}
   d7802:	4b02      	ldr	r3, [pc, #8]	; (d780c <HAL_I2C_End_Transmission+0xc>)
   d7804:	681b      	ldr	r3, [r3, #0]
   d7806:	69db      	ldr	r3, [r3, #28]
   d7808:	9301      	str	r3, [sp, #4]
   d780a:	bd08      	pop	{r3, pc}
   d780c:	00030228 	.word	0x00030228

000d7810 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d7810:	b508      	push	{r3, lr}
   d7812:	4b02      	ldr	r3, [pc, #8]	; (d781c <HAL_I2C_Write_Data+0xc>)
   d7814:	681b      	ldr	r3, [r3, #0]
   d7816:	6a1b      	ldr	r3, [r3, #32]
   d7818:	9301      	str	r3, [sp, #4]
   d781a:	bd08      	pop	{r3, pc}
   d781c:	00030228 	.word	0x00030228

000d7820 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d7820:	b508      	push	{r3, lr}
   d7822:	4b02      	ldr	r3, [pc, #8]	; (d782c <HAL_I2C_Available_Data+0xc>)
   d7824:	681b      	ldr	r3, [r3, #0]
   d7826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7828:	9301      	str	r3, [sp, #4]
   d782a:	bd08      	pop	{r3, pc}
   d782c:	00030228 	.word	0x00030228

000d7830 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d7830:	b508      	push	{r3, lr}
   d7832:	4b02      	ldr	r3, [pc, #8]	; (d783c <HAL_I2C_Read_Data+0xc>)
   d7834:	681b      	ldr	r3, [r3, #0]
   d7836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7838:	9301      	str	r3, [sp, #4]
   d783a:	bd08      	pop	{r3, pc}
   d783c:	00030228 	.word	0x00030228

000d7840 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d7840:	b508      	push	{r3, lr}
   d7842:	4b02      	ldr	r3, [pc, #8]	; (d784c <HAL_I2C_Peek_Data+0xc>)
   d7844:	681b      	ldr	r3, [r3, #0]
   d7846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7848:	9301      	str	r3, [sp, #4]
   d784a:	bd08      	pop	{r3, pc}
   d784c:	00030228 	.word	0x00030228

000d7850 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d7850:	b508      	push	{r3, lr}
   d7852:	4b02      	ldr	r3, [pc, #8]	; (d785c <HAL_I2C_Flush_Data+0xc>)
   d7854:	681b      	ldr	r3, [r3, #0]
   d7856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7858:	9301      	str	r3, [sp, #4]
   d785a:	bd08      	pop	{r3, pc}
   d785c:	00030228 	.word	0x00030228

000d7860 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d7860:	b508      	push	{r3, lr}
   d7862:	4b02      	ldr	r3, [pc, #8]	; (d786c <HAL_I2C_Is_Enabled+0xc>)
   d7864:	681b      	ldr	r3, [r3, #0]
   d7866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7868:	9301      	str	r3, [sp, #4]
   d786a:	bd08      	pop	{r3, pc}
   d786c:	00030228 	.word	0x00030228

000d7870 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d7870:	b508      	push	{r3, lr}
   d7872:	4b02      	ldr	r3, [pc, #8]	; (d787c <HAL_I2C_Init+0xc>)
   d7874:	681b      	ldr	r3, [r3, #0]
   d7876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7878:	9301      	str	r3, [sp, #4]
   d787a:	bd08      	pop	{r3, pc}
   d787c:	00030228 	.word	0x00030228

000d7880 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
   d7880:	b508      	push	{r3, lr}
   d7882:	4b02      	ldr	r3, [pc, #8]	; (d788c <HAL_I2C_Acquire+0xc>)
   d7884:	681b      	ldr	r3, [r3, #0]
   d7886:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7888:	9301      	str	r3, [sp, #4]
   d788a:	bd08      	pop	{r3, pc}
   d788c:	00030228 	.word	0x00030228

000d7890 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
   d7890:	b508      	push	{r3, lr}
   d7892:	4b02      	ldr	r3, [pc, #8]	; (d789c <HAL_I2C_Release+0xc>)
   d7894:	681b      	ldr	r3, [r3, #0]
   d7896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d7898:	9301      	str	r3, [sp, #4]
   d789a:	bd08      	pop	{r3, pc}
   d789c:	00030228 	.word	0x00030228

000d78a0 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d78a0:	b508      	push	{r3, lr}
   d78a2:	4b02      	ldr	r3, [pc, #8]	; (d78ac <HAL_USART_Init+0xc>)
   d78a4:	681b      	ldr	r3, [r3, #0]
   d78a6:	681b      	ldr	r3, [r3, #0]
   d78a8:	9301      	str	r3, [sp, #4]
   d78aa:	bd08      	pop	{r3, pc}
   d78ac:	0003023c 	.word	0x0003023c

000d78b0 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d78b0:	b508      	push	{r3, lr}
   d78b2:	4b02      	ldr	r3, [pc, #8]	; (d78bc <HAL_USART_Write_Data+0xc>)
   d78b4:	681b      	ldr	r3, [r3, #0]
   d78b6:	68db      	ldr	r3, [r3, #12]
   d78b8:	9301      	str	r3, [sp, #4]
   d78ba:	bd08      	pop	{r3, pc}
   d78bc:	0003023c 	.word	0x0003023c

000d78c0 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d78c0:	b508      	push	{r3, lr}
   d78c2:	4b02      	ldr	r3, [pc, #8]	; (d78cc <HAL_USART_Available_Data+0xc>)
   d78c4:	681b      	ldr	r3, [r3, #0]
   d78c6:	691b      	ldr	r3, [r3, #16]
   d78c8:	9301      	str	r3, [sp, #4]
   d78ca:	bd08      	pop	{r3, pc}
   d78cc:	0003023c 	.word	0x0003023c

000d78d0 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d78d0:	b508      	push	{r3, lr}
   d78d2:	4b02      	ldr	r3, [pc, #8]	; (d78dc <HAL_USART_Read_Data+0xc>)
   d78d4:	681b      	ldr	r3, [r3, #0]
   d78d6:	695b      	ldr	r3, [r3, #20]
   d78d8:	9301      	str	r3, [sp, #4]
   d78da:	bd08      	pop	{r3, pc}
   d78dc:	0003023c 	.word	0x0003023c

000d78e0 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d78e0:	b508      	push	{r3, lr}
   d78e2:	4b02      	ldr	r3, [pc, #8]	; (d78ec <HAL_USART_Peek_Data+0xc>)
   d78e4:	681b      	ldr	r3, [r3, #0]
   d78e6:	699b      	ldr	r3, [r3, #24]
   d78e8:	9301      	str	r3, [sp, #4]
   d78ea:	bd08      	pop	{r3, pc}
   d78ec:	0003023c 	.word	0x0003023c

000d78f0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d78f0:	b508      	push	{r3, lr}
   d78f2:	4b02      	ldr	r3, [pc, #8]	; (d78fc <HAL_USART_Flush_Data+0xc>)
   d78f4:	681b      	ldr	r3, [r3, #0]
   d78f6:	69db      	ldr	r3, [r3, #28]
   d78f8:	9301      	str	r3, [sp, #4]
   d78fa:	bd08      	pop	{r3, pc}
   d78fc:	0003023c 	.word	0x0003023c

000d7900 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d7900:	b508      	push	{r3, lr}
   d7902:	4b02      	ldr	r3, [pc, #8]	; (d790c <HAL_USART_Is_Enabled+0xc>)
   d7904:	681b      	ldr	r3, [r3, #0]
   d7906:	6a1b      	ldr	r3, [r3, #32]
   d7908:	9301      	str	r3, [sp, #4]
   d790a:	bd08      	pop	{r3, pc}
   d790c:	0003023c 	.word	0x0003023c

000d7910 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d7910:	b508      	push	{r3, lr}
   d7912:	4b02      	ldr	r3, [pc, #8]	; (d791c <HAL_USART_Available_Data_For_Write+0xc>)
   d7914:	681b      	ldr	r3, [r3, #0]
   d7916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7918:	9301      	str	r3, [sp, #4]
   d791a:	bd08      	pop	{r3, pc}
   d791c:	0003023c 	.word	0x0003023c

000d7920 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d7920:	b508      	push	{r3, lr}
   d7922:	4b02      	ldr	r3, [pc, #8]	; (d792c <inet_inet_ntop+0xc>)
   d7924:	681b      	ldr	r3, [r3, #0]
   d7926:	695b      	ldr	r3, [r3, #20]
   d7928:	9301      	str	r3, [sp, #4]
   d792a:	bd08      	pop	{r3, pc}
   d792c:	00030264 	.word	0x00030264

000d7930 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d7930:	b508      	push	{r3, lr}
   d7932:	4b02      	ldr	r3, [pc, #8]	; (d793c <os_thread_is_current+0xc>)
   d7934:	681b      	ldr	r3, [r3, #0]
   d7936:	689b      	ldr	r3, [r3, #8]
   d7938:	9301      	str	r3, [sp, #4]
   d793a:	bd08      	pop	{r3, pc}
   d793c:	00030248 	.word	0x00030248

000d7940 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d7940:	b508      	push	{r3, lr}
   d7942:	4b02      	ldr	r3, [pc, #8]	; (d794c <os_thread_join+0xc>)
   d7944:	681b      	ldr	r3, [r3, #0]
   d7946:	691b      	ldr	r3, [r3, #16]
   d7948:	9301      	str	r3, [sp, #4]
   d794a:	bd08      	pop	{r3, pc}
   d794c:	00030248 	.word	0x00030248

000d7950 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d7950:	b508      	push	{r3, lr}
   d7952:	4b02      	ldr	r3, [pc, #8]	; (d795c <os_thread_cleanup+0xc>)
   d7954:	681b      	ldr	r3, [r3, #0]
   d7956:	695b      	ldr	r3, [r3, #20]
   d7958:	9301      	str	r3, [sp, #4]
   d795a:	bd08      	pop	{r3, pc}
   d795c:	00030248 	.word	0x00030248

000d7960 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d7960:	b508      	push	{r3, lr}
   d7962:	4b02      	ldr	r3, [pc, #8]	; (d796c <os_mutex_create+0xc>)
   d7964:	681b      	ldr	r3, [r3, #0]
   d7966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7968:	9301      	str	r3, [sp, #4]
   d796a:	bd08      	pop	{r3, pc}
   d796c:	00030248 	.word	0x00030248

000d7970 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   d7970:	b508      	push	{r3, lr}
   d7972:	4b02      	ldr	r3, [pc, #8]	; (d797c <os_mutex_lock+0xc>)
   d7974:	681b      	ldr	r3, [r3, #0]
   d7976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d7978:	9301      	str	r3, [sp, #4]
   d797a:	bd08      	pop	{r3, pc}
   d797c:	00030248 	.word	0x00030248

000d7980 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   d7980:	b508      	push	{r3, lr}
   d7982:	4b02      	ldr	r3, [pc, #8]	; (d798c <os_mutex_unlock+0xc>)
   d7984:	681b      	ldr	r3, [r3, #0]
   d7986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7988:	9301      	str	r3, [sp, #4]
   d798a:	bd08      	pop	{r3, pc}
   d798c:	00030248 	.word	0x00030248

000d7990 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d7990:	b508      	push	{r3, lr}
   d7992:	4b02      	ldr	r3, [pc, #8]	; (d799c <os_mutex_recursive_create+0xc>)
   d7994:	681b      	ldr	r3, [r3, #0]
   d7996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7998:	9301      	str	r3, [sp, #4]
   d799a:	bd08      	pop	{r3, pc}
   d799c:	00030248 	.word	0x00030248

000d79a0 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d79a0:	b508      	push	{r3, lr}
   d79a2:	4b02      	ldr	r3, [pc, #8]	; (d79ac <os_mutex_recursive_lock+0xc>)
   d79a4:	681b      	ldr	r3, [r3, #0]
   d79a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d79a8:	9301      	str	r3, [sp, #4]
   d79aa:	bd08      	pop	{r3, pc}
   d79ac:	00030248 	.word	0x00030248

000d79b0 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d79b0:	b508      	push	{r3, lr}
   d79b2:	4b02      	ldr	r3, [pc, #8]	; (d79bc <os_mutex_recursive_unlock+0xc>)
   d79b4:	681b      	ldr	r3, [r3, #0]
   d79b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d79b8:	9301      	str	r3, [sp, #4]
   d79ba:	bd08      	pop	{r3, pc}
   d79bc:	00030248 	.word	0x00030248

000d79c0 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d79c0:	b508      	push	{r3, lr}
   d79c2:	4b02      	ldr	r3, [pc, #8]	; (d79cc <hal_ble_stack_init+0xc>)
   d79c4:	681b      	ldr	r3, [r3, #0]
   d79c6:	689b      	ldr	r3, [r3, #8]
   d79c8:	9301      	str	r3, [sp, #4]
   d79ca:	bd08      	pop	{r3, pc}
   d79cc:	00030278 	.word	0x00030278

000d79d0 <hal_ble_stack_deinit>:
DYNALIB_FN(3, hal_ble, hal_ble_stack_deinit, int(void*))
   d79d0:	b508      	push	{r3, lr}
   d79d2:	4b02      	ldr	r3, [pc, #8]	; (d79dc <hal_ble_stack_deinit+0xc>)
   d79d4:	681b      	ldr	r3, [r3, #0]
   d79d6:	68db      	ldr	r3, [r3, #12]
   d79d8:	9301      	str	r3, [sp, #4]
   d79da:	bd08      	pop	{r3, pc}
   d79dc:	00030278 	.word	0x00030278

000d79e0 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d79e0:	b508      	push	{r3, lr}
   d79e2:	4b03      	ldr	r3, [pc, #12]	; (d79f0 <hal_ble_gap_disconnect+0x10>)
   d79e4:	681b      	ldr	r3, [r3, #0]
   d79e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d79ea:	9301      	str	r3, [sp, #4]
   d79ec:	bd08      	pop	{r3, pc}
   d79ee:	0000      	.short	0x0000
   d79f0:	00030278 	.word	0x00030278

000d79f4 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d79f4:	b508      	push	{r3, lr}
   d79f6:	4b03      	ldr	r3, [pc, #12]	; (d7a04 <hal_ble_set_callback_on_periph_link_events+0x10>)
   d79f8:	681b      	ldr	r3, [r3, #0]
   d79fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d79fe:	9301      	str	r3, [sp, #4]
   d7a00:	bd08      	pop	{r3, pc}
   d7a02:	0000      	.short	0x0000
   d7a04:	00030278 	.word	0x00030278

000d7a08 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
   d7a08:	b508      	push	{r3, lr}
   d7a0a:	4b02      	ldr	r3, [pc, #8]	; (d7a14 <HAL_Core_Get_Last_Reset_Info+0xc>)
   d7a0c:	681b      	ldr	r3, [r3, #0]
   d7a0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d7a10:	9301      	str	r3, [sp, #4]
   d7a12:	bd08      	pop	{r3, pc}
   d7a14:	00030234 	.word	0x00030234

000d7a18 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d7a18:	b508      	push	{r3, lr}
   d7a1a:	4b02      	ldr	r3, [pc, #8]	; (d7a24 <HAL_RNG_GetRandomNumber+0xc>)
   d7a1c:	681b      	ldr	r3, [r3, #0]
   d7a1e:	685b      	ldr	r3, [r3, #4]
   d7a20:	9301      	str	r3, [sp, #4]
   d7a22:	bd08      	pop	{r3, pc}
   d7a24:	00030218 	.word	0x00030218

000d7a28 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d7a28:	b508      	push	{r3, lr}
   d7a2a:	4b02      	ldr	r3, [pc, #8]	; (d7a34 <HAL_Delay_Microseconds+0xc>)
   d7a2c:	681b      	ldr	r3, [r3, #0]
   d7a2e:	68db      	ldr	r3, [r3, #12]
   d7a30:	9301      	str	r3, [sp, #4]
   d7a32:	bd08      	pop	{r3, pc}
   d7a34:	00030218 	.word	0x00030218

000d7a38 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d7a38:	b508      	push	{r3, lr}
   d7a3a:	4b02      	ldr	r3, [pc, #8]	; (d7a44 <HAL_Timer_Get_Micro_Seconds+0xc>)
   d7a3c:	681b      	ldr	r3, [r3, #0]
   d7a3e:	691b      	ldr	r3, [r3, #16]
   d7a40:	9301      	str	r3, [sp, #4]
   d7a42:	bd08      	pop	{r3, pc}
   d7a44:	00030218 	.word	0x00030218

000d7a48 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d7a48:	b508      	push	{r3, lr}
   d7a4a:	4b02      	ldr	r3, [pc, #8]	; (d7a54 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d7a4c:	681b      	ldr	r3, [r3, #0]
   d7a4e:	695b      	ldr	r3, [r3, #20]
   d7a50:	9301      	str	r3, [sp, #4]
   d7a52:	bd08      	pop	{r3, pc}
   d7a54:	00030218 	.word	0x00030218

000d7a58 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d7a58:	b508      	push	{r3, lr}
   d7a5a:	4b02      	ldr	r3, [pc, #8]	; (d7a64 <HAL_RTC_Get_UnixTime+0xc>)
   d7a5c:	681b      	ldr	r3, [r3, #0]
   d7a5e:	69db      	ldr	r3, [r3, #28]
   d7a60:	9301      	str	r3, [sp, #4]
   d7a62:	bd08      	pop	{r3, pc}
   d7a64:	00030218 	.word	0x00030218

000d7a68 <HAL_RTC_Set_UnixTime>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
   d7a68:	b508      	push	{r3, lr}
   d7a6a:	4b02      	ldr	r3, [pc, #8]	; (d7a74 <HAL_RTC_Set_UnixTime+0xc>)
   d7a6c:	681b      	ldr	r3, [r3, #0]
   d7a6e:	6a1b      	ldr	r3, [r3, #32]
   d7a70:	9301      	str	r3, [sp, #4]
   d7a72:	bd08      	pop	{r3, pc}
   d7a74:	00030218 	.word	0x00030218

000d7a78 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d7a78:	b508      	push	{r3, lr}
   d7a7a:	4b02      	ldr	r3, [pc, #8]	; (d7a84 <HAL_EEPROM_Init+0xc>)
   d7a7c:	681b      	ldr	r3, [r3, #0]
   d7a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7a80:	9301      	str	r3, [sp, #4]
   d7a82:	bd08      	pop	{r3, pc}
   d7a84:	00030218 	.word	0x00030218

000d7a88 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, HAL_RTC_Cancel_UnixAlarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   d7a88:	b508      	push	{r3, lr}
   d7a8a:	4b02      	ldr	r3, [pc, #8]	; (d7a94 <HAL_EEPROM_Get+0xc>)
   d7a8c:	681b      	ldr	r3, [r3, #0]
   d7a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7a90:	9301      	str	r3, [sp, #4]
   d7a92:	bd08      	pop	{r3, pc}
   d7a94:	00030218 	.word	0x00030218

000d7a98 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   d7a98:	b508      	push	{r3, lr}
   d7a9a:	4b02      	ldr	r3, [pc, #8]	; (d7aa4 <HAL_EEPROM_Put+0xc>)
   d7a9c:	681b      	ldr	r3, [r3, #0]
   d7a9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7aa0:	9301      	str	r3, [sp, #4]
   d7aa2:	bd08      	pop	{r3, pc}
   d7aa4:	00030218 	.word	0x00030218

000d7aa8 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d7aa8:	b508      	push	{r3, lr}
   d7aaa:	4b02      	ldr	r3, [pc, #8]	; (d7ab4 <HAL_RTC_Time_Is_Valid+0xc>)
   d7aac:	681b      	ldr	r3, [r3, #0]
   d7aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d7ab0:	9301      	str	r3, [sp, #4]
   d7ab2:	bd08      	pop	{r3, pc}
   d7ab4:	00030218 	.word	0x00030218

000d7ab8 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d7ab8:	b508      	push	{r3, lr}
   d7aba:	4b02      	ldr	r3, [pc, #8]	; (d7ac4 <HAL_SPI_Begin+0xc>)
   d7abc:	681b      	ldr	r3, [r3, #0]
   d7abe:	681b      	ldr	r3, [r3, #0]
   d7ac0:	9301      	str	r3, [sp, #4]
   d7ac2:	bd08      	pop	{r3, pc}
   d7ac4:	00030230 	.word	0x00030230

000d7ac8 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d7ac8:	b508      	push	{r3, lr}
   d7aca:	4b02      	ldr	r3, [pc, #8]	; (d7ad4 <HAL_SPI_Send_Receive_Data+0xc>)
   d7acc:	681b      	ldr	r3, [r3, #0]
   d7ace:	695b      	ldr	r3, [r3, #20]
   d7ad0:	9301      	str	r3, [sp, #4]
   d7ad2:	bd08      	pop	{r3, pc}
   d7ad4:	00030230 	.word	0x00030230

000d7ad8 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d7ad8:	b508      	push	{r3, lr}
   d7ada:	4b02      	ldr	r3, [pc, #8]	; (d7ae4 <HAL_SPI_Init+0xc>)
   d7adc:	681b      	ldr	r3, [r3, #0]
   d7ade:	69db      	ldr	r3, [r3, #28]
   d7ae0:	9301      	str	r3, [sp, #4]
   d7ae2:	bd08      	pop	{r3, pc}
   d7ae4:	00030230 	.word	0x00030230

000d7ae8 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d7ae8:	b508      	push	{r3, lr}
   d7aea:	4b02      	ldr	r3, [pc, #8]	; (d7af4 <HAL_SPI_Is_Enabled+0xc>)
   d7aec:	681b      	ldr	r3, [r3, #0]
   d7aee:	6a1b      	ldr	r3, [r3, #32]
   d7af0:	9301      	str	r3, [sp, #4]
   d7af2:	bd08      	pop	{r3, pc}
   d7af4:	00030230 	.word	0x00030230

000d7af8 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d7af8:	b508      	push	{r3, lr}
   d7afa:	4b02      	ldr	r3, [pc, #8]	; (d7b04 <HAL_SPI_Info+0xc>)
   d7afc:	681b      	ldr	r3, [r3, #0]
   d7afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7b00:	9301      	str	r3, [sp, #4]
   d7b02:	bd08      	pop	{r3, pc}
   d7b04:	00030230 	.word	0x00030230

000d7b08 <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
   d7b08:	b508      	push	{r3, lr}
   d7b0a:	4b02      	ldr	r3, [pc, #8]	; (d7b14 <HAL_SPI_DMA_Transfer+0xc>)
   d7b0c:	681b      	ldr	r3, [r3, #0]
   d7b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7b10:	9301      	str	r3, [sp, #4]
   d7b12:	bd08      	pop	{r3, pc}
   d7b14:	00030230 	.word	0x00030230

000d7b18 <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
   d7b18:	b508      	push	{r3, lr}
   d7b1a:	4b02      	ldr	r3, [pc, #8]	; (d7b24 <HAL_SPI_DMA_Transfer_Status+0xc>)
   d7b1c:	681b      	ldr	r3, [r3, #0]
   d7b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d7b20:	9301      	str	r3, [sp, #4]
   d7b22:	bd08      	pop	{r3, pc}
   d7b24:	00030230 	.word	0x00030230

000d7b28 <HAL_SPI_Set_Settings>:
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d7b28:	b508      	push	{r3, lr}
   d7b2a:	4b02      	ldr	r3, [pc, #8]	; (d7b34 <HAL_SPI_Set_Settings+0xc>)
   d7b2c:	681b      	ldr	r3, [r3, #0]
   d7b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7b30:	9301      	str	r3, [sp, #4]
   d7b32:	bd08      	pop	{r3, pc}
   d7b34:	00030230 	.word	0x00030230

000d7b38 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d7b38:	b508      	push	{r3, lr}
   d7b3a:	4b02      	ldr	r3, [pc, #8]	; (d7b44 <HAL_Pin_Map+0xc>)
   d7b3c:	681b      	ldr	r3, [r3, #0]
   d7b3e:	681b      	ldr	r3, [r3, #0]
   d7b40:	9301      	str	r3, [sp, #4]
   d7b42:	bd08      	pop	{r3, pc}
   d7b44:	0003022c 	.word	0x0003022c

000d7b48 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d7b48:	b508      	push	{r3, lr}
   d7b4a:	4b02      	ldr	r3, [pc, #8]	; (d7b54 <HAL_Validate_Pin_Function+0xc>)
   d7b4c:	681b      	ldr	r3, [r3, #0]
   d7b4e:	685b      	ldr	r3, [r3, #4]
   d7b50:	9301      	str	r3, [sp, #4]
   d7b52:	bd08      	pop	{r3, pc}
   d7b54:	0003022c 	.word	0x0003022c

000d7b58 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d7b58:	b508      	push	{r3, lr}
   d7b5a:	4b02      	ldr	r3, [pc, #8]	; (d7b64 <HAL_Pin_Mode+0xc>)
   d7b5c:	681b      	ldr	r3, [r3, #0]
   d7b5e:	689b      	ldr	r3, [r3, #8]
   d7b60:	9301      	str	r3, [sp, #4]
   d7b62:	bd08      	pop	{r3, pc}
   d7b64:	0003022c 	.word	0x0003022c

000d7b68 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d7b68:	b508      	push	{r3, lr}
   d7b6a:	4b02      	ldr	r3, [pc, #8]	; (d7b74 <HAL_Get_Pin_Mode+0xc>)
   d7b6c:	681b      	ldr	r3, [r3, #0]
   d7b6e:	68db      	ldr	r3, [r3, #12]
   d7b70:	9301      	str	r3, [sp, #4]
   d7b72:	bd08      	pop	{r3, pc}
   d7b74:	0003022c 	.word	0x0003022c

000d7b78 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d7b78:	b508      	push	{r3, lr}
   d7b7a:	4b02      	ldr	r3, [pc, #8]	; (d7b84 <HAL_GPIO_Write+0xc>)
   d7b7c:	681b      	ldr	r3, [r3, #0]
   d7b7e:	691b      	ldr	r3, [r3, #16]
   d7b80:	9301      	str	r3, [sp, #4]
   d7b82:	bd08      	pop	{r3, pc}
   d7b84:	0003022c 	.word	0x0003022c

000d7b88 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d7b88:	b508      	push	{r3, lr}
   d7b8a:	4b02      	ldr	r3, [pc, #8]	; (d7b94 <HAL_GPIO_Read+0xc>)
   d7b8c:	681b      	ldr	r3, [r3, #0]
   d7b8e:	695b      	ldr	r3, [r3, #20]
   d7b90:	9301      	str	r3, [sp, #4]
   d7b92:	bd08      	pop	{r3, pc}
   d7b94:	0003022c 	.word	0x0003022c

000d7b98 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d7b98:	b508      	push	{r3, lr}
   d7b9a:	4b02      	ldr	r3, [pc, #8]	; (d7ba4 <HAL_Interrupts_Attach+0xc>)
   d7b9c:	681b      	ldr	r3, [r3, #0]
   d7b9e:	699b      	ldr	r3, [r3, #24]
   d7ba0:	9301      	str	r3, [sp, #4]
   d7ba2:	bd08      	pop	{r3, pc}
   d7ba4:	0003022c 	.word	0x0003022c

000d7ba8 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d7ba8:	b508      	push	{r3, lr}
   d7baa:	4b02      	ldr	r3, [pc, #8]	; (d7bb4 <HAL_Interrupts_Detach+0xc>)
   d7bac:	681b      	ldr	r3, [r3, #0]
   d7bae:	69db      	ldr	r3, [r3, #28]
   d7bb0:	9301      	str	r3, [sp, #4]
   d7bb2:	bd08      	pop	{r3, pc}
   d7bb4:	0003022c 	.word	0x0003022c

000d7bb8 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d7bb8:	b508      	push	{r3, lr}
   d7bba:	4b02      	ldr	r3, [pc, #8]	; (d7bc4 <HAL_ADC_Read+0xc>)
   d7bbc:	681b      	ldr	r3, [r3, #0]
   d7bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7bc0:	9301      	str	r3, [sp, #4]
   d7bc2:	bd08      	pop	{r3, pc}
   d7bc4:	0003022c 	.word	0x0003022c

000d7bc8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d7bc8:	b508      	push	{r3, lr}
   d7bca:	4b02      	ldr	r3, [pc, #8]	; (d7bd4 <netdb_freeaddrinfo+0xc>)
   d7bcc:	681b      	ldr	r3, [r3, #0]
   d7bce:	689b      	ldr	r3, [r3, #8]
   d7bd0:	9301      	str	r3, [sp, #4]
   d7bd2:	bd08      	pop	{r3, pc}
   d7bd4:	00030268 	.word	0x00030268

000d7bd8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d7bd8:	b508      	push	{r3, lr}
   d7bda:	4b02      	ldr	r3, [pc, #8]	; (d7be4 <netdb_getaddrinfo+0xc>)
   d7bdc:	681b      	ldr	r3, [r3, #0]
   d7bde:	68db      	ldr	r3, [r3, #12]
   d7be0:	9301      	str	r3, [sp, #4]
   d7be2:	bd08      	pop	{r3, pc}
   d7be4:	00030268 	.word	0x00030268

000d7be8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d7be8:	b508      	push	{r3, lr}
   d7bea:	4b02      	ldr	r3, [pc, #8]	; (d7bf4 <panic_+0xc>)
   d7bec:	681b      	ldr	r3, [r3, #0]
   d7bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7bf0:	9301      	str	r3, [sp, #4]
   d7bf2:	bd08      	pop	{r3, pc}
   d7bf4:	00030260 	.word	0x00030260

000d7bf8 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d7bf8:	b508      	push	{r3, lr}
   d7bfa:	4b02      	ldr	r3, [pc, #8]	; (d7c04 <log_message+0xc>)
   d7bfc:	681b      	ldr	r3, [r3, #0]
   d7bfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d7c00:	9301      	str	r3, [sp, #4]
   d7c02:	bd08      	pop	{r3, pc}
   d7c04:	00030260 	.word	0x00030260

000d7c08 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d7c08:	b508      	push	{r3, lr}
   d7c0a:	4b02      	ldr	r3, [pc, #8]	; (d7c14 <log_message_v+0xc>)
   d7c0c:	681b      	ldr	r3, [r3, #0]
   d7c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d7c10:	9301      	str	r3, [sp, #4]
   d7c12:	bd08      	pop	{r3, pc}
   d7c14:	00030260 	.word	0x00030260

000d7c18 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d7c18:	b508      	push	{r3, lr}
   d7c1a:	4b02      	ldr	r3, [pc, #8]	; (d7c24 <spark_variable+0xc>)
   d7c1c:	681b      	ldr	r3, [r3, #0]
   d7c1e:	681b      	ldr	r3, [r3, #0]
   d7c20:	9301      	str	r3, [sp, #4]
   d7c22:	bd08      	pop	{r3, pc}
   d7c24:	00030244 	.word	0x00030244

000d7c28 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d7c28:	b508      	push	{r3, lr}
   d7c2a:	4b02      	ldr	r3, [pc, #8]	; (d7c34 <spark_function+0xc>)
   d7c2c:	681b      	ldr	r3, [r3, #0]
   d7c2e:	685b      	ldr	r3, [r3, #4]
   d7c30:	9301      	str	r3, [sp, #4]
   d7c32:	bd08      	pop	{r3, pc}
   d7c34:	00030244 	.word	0x00030244

000d7c38 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d7c38:	b508      	push	{r3, lr}
   d7c3a:	4b02      	ldr	r3, [pc, #8]	; (d7c44 <spark_process+0xc>)
   d7c3c:	681b      	ldr	r3, [r3, #0]
   d7c3e:	689b      	ldr	r3, [r3, #8]
   d7c40:	9301      	str	r3, [sp, #4]
   d7c42:	bd08      	pop	{r3, pc}
   d7c44:	00030244 	.word	0x00030244

000d7c48 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d7c48:	b508      	push	{r3, lr}
   d7c4a:	4b02      	ldr	r3, [pc, #8]	; (d7c54 <spark_cloud_flag_connected+0xc>)
   d7c4c:	681b      	ldr	r3, [r3, #0]
   d7c4e:	695b      	ldr	r3, [r3, #20]
   d7c50:	9301      	str	r3, [sp, #4]
   d7c52:	bd08      	pop	{r3, pc}
   d7c54:	00030244 	.word	0x00030244

000d7c58 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d7c58:	b508      	push	{r3, lr}
   d7c5a:	4b02      	ldr	r3, [pc, #8]	; (d7c64 <spark_send_event+0xc>)
   d7c5c:	681b      	ldr	r3, [r3, #0]
   d7c5e:	6a1b      	ldr	r3, [r3, #32]
   d7c60:	9301      	str	r3, [sp, #4]
   d7c62:	bd08      	pop	{r3, pc}
   d7c64:	00030244 	.word	0x00030244

000d7c68 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d7c68:	b508      	push	{r3, lr}
   d7c6a:	4b02      	ldr	r3, [pc, #8]	; (d7c74 <spark_sync_time_pending+0xc>)
   d7c6c:	681b      	ldr	r3, [r3, #0]
   d7c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7c70:	9301      	str	r3, [sp, #4]
   d7c72:	bd08      	pop	{r3, pc}
   d7c74:	00030244 	.word	0x00030244

000d7c78 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d7c78:	b508      	push	{r3, lr}
   d7c7a:	4b02      	ldr	r3, [pc, #8]	; (d7c84 <spark_set_random_seed_from_cloud_handler+0xc>)
   d7c7c:	681b      	ldr	r3, [r3, #0]
   d7c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7c80:	9301      	str	r3, [sp, #4]
   d7c82:	bd08      	pop	{r3, pc}
   d7c84:	00030244 	.word	0x00030244

000d7c88 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d7c88:	b508      	push	{r3, lr}
   d7c8a:	4b02      	ldr	r3, [pc, #8]	; (d7c94 <network_connect+0xc>)
   d7c8c:	681b      	ldr	r3, [r3, #0]
   d7c8e:	685b      	ldr	r3, [r3, #4]
   d7c90:	9301      	str	r3, [sp, #4]
   d7c92:	bd08      	pop	{r3, pc}
   d7c94:	00030240 	.word	0x00030240

000d7c98 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d7c98:	b508      	push	{r3, lr}
   d7c9a:	4b02      	ldr	r3, [pc, #8]	; (d7ca4 <network_connecting+0xc>)
   d7c9c:	681b      	ldr	r3, [r3, #0]
   d7c9e:	689b      	ldr	r3, [r3, #8]
   d7ca0:	9301      	str	r3, [sp, #4]
   d7ca2:	bd08      	pop	{r3, pc}
   d7ca4:	00030240 	.word	0x00030240

000d7ca8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d7ca8:	b508      	push	{r3, lr}
   d7caa:	4b02      	ldr	r3, [pc, #8]	; (d7cb4 <network_disconnect+0xc>)
   d7cac:	681b      	ldr	r3, [r3, #0]
   d7cae:	68db      	ldr	r3, [r3, #12]
   d7cb0:	9301      	str	r3, [sp, #4]
   d7cb2:	bd08      	pop	{r3, pc}
   d7cb4:	00030240 	.word	0x00030240

000d7cb8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d7cb8:	b508      	push	{r3, lr}
   d7cba:	4b02      	ldr	r3, [pc, #8]	; (d7cc4 <network_ready+0xc>)
   d7cbc:	681b      	ldr	r3, [r3, #0]
   d7cbe:	691b      	ldr	r3, [r3, #16]
   d7cc0:	9301      	str	r3, [sp, #4]
   d7cc2:	bd08      	pop	{r3, pc}
   d7cc4:	00030240 	.word	0x00030240

000d7cc8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d7cc8:	b508      	push	{r3, lr}
   d7cca:	4b02      	ldr	r3, [pc, #8]	; (d7cd4 <network_on+0xc>)
   d7ccc:	681b      	ldr	r3, [r3, #0]
   d7cce:	695b      	ldr	r3, [r3, #20]
   d7cd0:	9301      	str	r3, [sp, #4]
   d7cd2:	bd08      	pop	{r3, pc}
   d7cd4:	00030240 	.word	0x00030240

000d7cd8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d7cd8:	b508      	push	{r3, lr}
   d7cda:	4b02      	ldr	r3, [pc, #8]	; (d7ce4 <network_off+0xc>)
   d7cdc:	681b      	ldr	r3, [r3, #0]
   d7cde:	699b      	ldr	r3, [r3, #24]
   d7ce0:	9301      	str	r3, [sp, #4]
   d7ce2:	bd08      	pop	{r3, pc}
   d7ce4:	00030240 	.word	0x00030240

000d7ce8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d7ce8:	b508      	push	{r3, lr}
   d7cea:	4b02      	ldr	r3, [pc, #8]	; (d7cf4 <network_listen+0xc>)
   d7cec:	681b      	ldr	r3, [r3, #0]
   d7cee:	69db      	ldr	r3, [r3, #28]
   d7cf0:	9301      	str	r3, [sp, #4]
   d7cf2:	bd08      	pop	{r3, pc}
   d7cf4:	00030240 	.word	0x00030240

000d7cf8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d7cf8:	b508      	push	{r3, lr}
   d7cfa:	4b02      	ldr	r3, [pc, #8]	; (d7d04 <network_listening+0xc>)
   d7cfc:	681b      	ldr	r3, [r3, #0]
   d7cfe:	6a1b      	ldr	r3, [r3, #32]
   d7d00:	9301      	str	r3, [sp, #4]
   d7d02:	bd08      	pop	{r3, pc}
   d7d04:	00030240 	.word	0x00030240

000d7d08 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d7d08:	b508      	push	{r3, lr}
   d7d0a:	4b02      	ldr	r3, [pc, #8]	; (d7d14 <network_set_listen_timeout+0xc>)
   d7d0c:	681b      	ldr	r3, [r3, #0]
   d7d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7d10:	9301      	str	r3, [sp, #4]
   d7d12:	bd08      	pop	{r3, pc}
   d7d14:	00030240 	.word	0x00030240

000d7d18 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d7d18:	b508      	push	{r3, lr}
   d7d1a:	4b02      	ldr	r3, [pc, #8]	; (d7d24 <network_get_listen_timeout+0xc>)
   d7d1c:	681b      	ldr	r3, [r3, #0]
   d7d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7d20:	9301      	str	r3, [sp, #4]
   d7d22:	bd08      	pop	{r3, pc}
   d7d24:	00030240 	.word	0x00030240

000d7d28 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d7d28:	b508      	push	{r3, lr}
   d7d2a:	4b02      	ldr	r3, [pc, #8]	; (d7d34 <system_mode+0xc>)
   d7d2c:	681b      	ldr	r3, [r3, #0]
   d7d2e:	681b      	ldr	r3, [r3, #0]
   d7d30:	9301      	str	r3, [sp, #4]
   d7d32:	bd08      	pop	{r3, pc}
   d7d34:	00030220 	.word	0x00030220

000d7d38 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d7d38:	b508      	push	{r3, lr}
   d7d3a:	4b02      	ldr	r3, [pc, #8]	; (d7d44 <set_system_mode+0xc>)
   d7d3c:	681b      	ldr	r3, [r3, #0]
   d7d3e:	685b      	ldr	r3, [r3, #4]
   d7d40:	9301      	str	r3, [sp, #4]
   d7d42:	bd08      	pop	{r3, pc}
   d7d44:	00030220 	.word	0x00030220

000d7d48 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d7d48:	b508      	push	{r3, lr}
   d7d4a:	4b02      	ldr	r3, [pc, #8]	; (d7d54 <system_delay_ms+0xc>)
   d7d4c:	681b      	ldr	r3, [r3, #0]
   d7d4e:	695b      	ldr	r3, [r3, #20]
   d7d50:	9301      	str	r3, [sp, #4]
   d7d52:	bd08      	pop	{r3, pc}
   d7d54:	00030220 	.word	0x00030220

000d7d58 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d7d58:	b508      	push	{r3, lr}
   d7d5a:	4b02      	ldr	r3, [pc, #8]	; (d7d64 <application_thread_current+0xc>)
   d7d5c:	681b      	ldr	r3, [r3, #0]
   d7d5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d7d60:	9301      	str	r3, [sp, #4]
   d7d62:	bd08      	pop	{r3, pc}
   d7d64:	00030220 	.word	0x00030220

000d7d68 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d7d68:	b508      	push	{r3, lr}
   d7d6a:	4b02      	ldr	r3, [pc, #8]	; (d7d74 <application_thread_invoke+0xc>)
   d7d6c:	681b      	ldr	r3, [r3, #0]
   d7d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d7d70:	9301      	str	r3, [sp, #4]
   d7d72:	bd08      	pop	{r3, pc}
   d7d74:	00030220 	.word	0x00030220

000d7d78 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d7d78:	b508      	push	{r3, lr}
   d7d7a:	4b02      	ldr	r3, [pc, #8]	; (d7d84 <system_thread_get_state+0xc>)
   d7d7c:	681b      	ldr	r3, [r3, #0]
   d7d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d7d80:	9301      	str	r3, [sp, #4]
   d7d82:	bd08      	pop	{r3, pc}
   d7d84:	00030220 	.word	0x00030220

000d7d88 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   d7d88:	b508      	push	{r3, lr}
   d7d8a:	4b02      	ldr	r3, [pc, #8]	; (d7d94 <system_notify_time_changed+0xc>)
   d7d8c:	681b      	ldr	r3, [r3, #0]
   d7d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d7d90:	9301      	str	r3, [sp, #4]
   d7d92:	bd08      	pop	{r3, pc}
   d7d94:	00030220 	.word	0x00030220

000d7d98 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d7d98:	b508      	push	{r3, lr}
   d7d9a:	4b03      	ldr	r3, [pc, #12]	; (d7da8 <system_ctrl_set_app_request_handler+0x10>)
   d7d9c:	681b      	ldr	r3, [r3, #0]
   d7d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d7da2:	9301      	str	r3, [sp, #4]
   d7da4:	bd08      	pop	{r3, pc}
   d7da6:	0000      	.short	0x0000
   d7da8:	00030220 	.word	0x00030220

000d7dac <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d7dac:	b508      	push	{r3, lr}
   d7dae:	4b03      	ldr	r3, [pc, #12]	; (d7dbc <system_ctrl_set_result+0x10>)
   d7db0:	681b      	ldr	r3, [r3, #0]
   d7db2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d7db6:	9301      	str	r3, [sp, #4]
   d7db8:	bd08      	pop	{r3, pc}
   d7dba:	0000      	.short	0x0000
   d7dbc:	00030220 	.word	0x00030220

000d7dc0 <system_sleep_pins>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
   d7dc0:	b508      	push	{r3, lr}
   d7dc2:	4b03      	ldr	r3, [pc, #12]	; (d7dd0 <system_sleep_pins+0x10>)
   d7dc4:	681b      	ldr	r3, [r3, #0]
   d7dc6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   d7dca:	9301      	str	r3, [sp, #4]
   d7dcc:	bd08      	pop	{r3, pc}
   d7dce:	0000      	.short	0x0000
   d7dd0:	00030220 	.word	0x00030220

000d7dd4 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d7dd4:	b508      	push	{r3, lr}
   d7dd6:	4b02      	ldr	r3, [pc, #8]	; (d7de0 <malloc+0xc>)
   d7dd8:	681b      	ldr	r3, [r3, #0]
   d7dda:	681b      	ldr	r3, [r3, #0]
   d7ddc:	9301      	str	r3, [sp, #4]
   d7dde:	bd08      	pop	{r3, pc}
   d7de0:	0003021c 	.word	0x0003021c

000d7de4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d7de4:	b508      	push	{r3, lr}
   d7de6:	4b02      	ldr	r3, [pc, #8]	; (d7df0 <free+0xc>)
   d7de8:	681b      	ldr	r3, [r3, #0]
   d7dea:	685b      	ldr	r3, [r3, #4]
   d7dec:	9301      	str	r3, [sp, #4]
   d7dee:	bd08      	pop	{r3, pc}
   d7df0:	0003021c 	.word	0x0003021c

000d7df4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d7df4:	b508      	push	{r3, lr}
   d7df6:	4b02      	ldr	r3, [pc, #8]	; (d7e00 <realloc+0xc>)
   d7df8:	681b      	ldr	r3, [r3, #0]
   d7dfa:	689b      	ldr	r3, [r3, #8]
   d7dfc:	9301      	str	r3, [sp, #4]
   d7dfe:	bd08      	pop	{r3, pc}
   d7e00:	0003021c 	.word	0x0003021c

000d7e04 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d7e04:	b508      	push	{r3, lr}
   d7e06:	4b02      	ldr	r3, [pc, #8]	; (d7e10 <sprintf+0xc>)
   d7e08:	681b      	ldr	r3, [r3, #0]
   d7e0a:	68db      	ldr	r3, [r3, #12]
   d7e0c:	9301      	str	r3, [sp, #4]
   d7e0e:	bd08      	pop	{r3, pc}
   d7e10:	0003021c 	.word	0x0003021c

000d7e14 <siprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d7e14:	b508      	push	{r3, lr}
   d7e16:	4b02      	ldr	r3, [pc, #8]	; (d7e20 <siprintf+0xc>)
   d7e18:	681b      	ldr	r3, [r3, #0]
   d7e1a:	691b      	ldr	r3, [r3, #16]
   d7e1c:	9301      	str	r3, [sp, #4]
   d7e1e:	bd08      	pop	{r3, pc}
   d7e20:	0003021c 	.word	0x0003021c

000d7e24 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d7e24:	b508      	push	{r3, lr}
   d7e26:	4b02      	ldr	r3, [pc, #8]	; (d7e30 <siscanf+0xc>)
   d7e28:	681b      	ldr	r3, [r3, #0]
   d7e2a:	699b      	ldr	r3, [r3, #24]
   d7e2c:	9301      	str	r3, [sp, #4]
   d7e2e:	bd08      	pop	{r3, pc}
   d7e30:	0003021c 	.word	0x0003021c

000d7e34 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d7e34:	b508      	push	{r3, lr}
   d7e36:	4b02      	ldr	r3, [pc, #8]	; (d7e40 <snprintf+0xc>)
   d7e38:	681b      	ldr	r3, [r3, #0]
   d7e3a:	69db      	ldr	r3, [r3, #28]
   d7e3c:	9301      	str	r3, [sp, #4]
   d7e3e:	bd08      	pop	{r3, pc}
   d7e40:	0003021c 	.word	0x0003021c

000d7e44 <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
   d7e44:	b508      	push	{r3, lr}
   d7e46:	4b02      	ldr	r3, [pc, #8]	; (d7e50 <sniprintf+0xc>)
   d7e48:	681b      	ldr	r3, [r3, #0]
   d7e4a:	6a1b      	ldr	r3, [r3, #32]
   d7e4c:	9301      	str	r3, [sp, #4]
   d7e4e:	bd08      	pop	{r3, pc}
   d7e50:	0003021c 	.word	0x0003021c

000d7e54 <vsnprintf>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d7e54:	b508      	push	{r3, lr}
   d7e56:	4b02      	ldr	r3, [pc, #8]	; (d7e60 <vsnprintf+0xc>)
   d7e58:	681b      	ldr	r3, [r3, #0]
   d7e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7e5c:	9301      	str	r3, [sp, #4]
   d7e5e:	bd08      	pop	{r3, pc}
   d7e60:	0003021c 	.word	0x0003021c

000d7e64 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d7e64:	b508      	push	{r3, lr}
   d7e66:	4b02      	ldr	r3, [pc, #8]	; (d7e70 <abort+0xc>)
   d7e68:	681b      	ldr	r3, [r3, #0]
   d7e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7e6c:	9301      	str	r3, [sp, #4]
   d7e6e:	bd08      	pop	{r3, pc}
   d7e70:	0003021c 	.word	0x0003021c

000d7e74 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d7e74:	b508      	push	{r3, lr}
   d7e76:	4b02      	ldr	r3, [pc, #8]	; (d7e80 <_malloc_r+0xc>)
   d7e78:	681b      	ldr	r3, [r3, #0]
   d7e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7e7c:	9301      	str	r3, [sp, #4]
   d7e7e:	bd08      	pop	{r3, pc}
   d7e80:	0003021c 	.word	0x0003021c

000d7e84 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d7e84:	b508      	push	{r3, lr}
   d7e86:	4b02      	ldr	r3, [pc, #8]	; (d7e90 <__errno+0xc>)
   d7e88:	681b      	ldr	r3, [r3, #0]
   d7e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7e8c:	9301      	str	r3, [sp, #4]
   d7e8e:	bd08      	pop	{r3, pc}
   d7e90:	0003021c 	.word	0x0003021c

000d7e94 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7e94:	2300      	movs	r3, #0
   d7e96:	461a      	mov	r2, r3
   d7e98:	6840      	ldr	r0, [r0, #4]
   d7e9a:	f7ff bef5 	b.w	d7c88 <network_connect>

000d7e9e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d7e9e:	2200      	movs	r2, #0
   d7ea0:	2102      	movs	r1, #2
   d7ea2:	6840      	ldr	r0, [r0, #4]
   d7ea4:	f7ff bf00 	b.w	d7ca8 <network_disconnect>

000d7ea8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7ea8:	2200      	movs	r2, #0
   d7eaa:	4611      	mov	r1, r2
   d7eac:	6840      	ldr	r0, [r0, #4]
   d7eae:	f7ff bef3 	b.w	d7c98 <network_connecting>

000d7eb2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d7eb2:	2200      	movs	r2, #0
   d7eb4:	4611      	mov	r1, r2
   d7eb6:	6840      	ldr	r0, [r0, #4]
   d7eb8:	f7ff befe 	b.w	d7cb8 <network_ready>

000d7ebc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d7ebc:	2300      	movs	r3, #0
   d7ebe:	461a      	mov	r2, r3
   d7ec0:	4619      	mov	r1, r3
   d7ec2:	6840      	ldr	r0, [r0, #4]
   d7ec4:	f7ff bf00 	b.w	d7cc8 <network_on>

000d7ec8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d7ec8:	2300      	movs	r3, #0
   d7eca:	461a      	mov	r2, r3
   d7ecc:	4619      	mov	r1, r3
   d7ece:	6840      	ldr	r0, [r0, #4]
   d7ed0:	f7ff bf02 	b.w	d7cd8 <network_off>

000d7ed4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d7ed4:	2200      	movs	r2, #0
   d7ed6:	f081 0101 	eor.w	r1, r1, #1
   d7eda:	6840      	ldr	r0, [r0, #4]
   d7edc:	f7ff bf04 	b.w	d7ce8 <network_listen>

000d7ee0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7ee0:	2200      	movs	r2, #0
   d7ee2:	6840      	ldr	r0, [r0, #4]
   d7ee4:	f7ff bf10 	b.w	d7d08 <network_set_listen_timeout>

000d7ee8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d7ee8:	2200      	movs	r2, #0
   d7eea:	4611      	mov	r1, r2
   d7eec:	6840      	ldr	r0, [r0, #4]
   d7eee:	f7ff bf13 	b.w	d7d18 <network_get_listen_timeout>

000d7ef2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d7ef2:	2200      	movs	r2, #0
   d7ef4:	4611      	mov	r1, r2
   d7ef6:	6840      	ldr	r0, [r0, #4]
   d7ef8:	f7ff befe 	b.w	d7cf8 <network_listening>

000d7efc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d7efc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7f00:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d7f02:	b095      	sub	sp, #84	; 0x54
   d7f04:	4616      	mov	r6, r2
   d7f06:	460d      	mov	r5, r1
   d7f08:	4607      	mov	r7, r0
    IPAddress addr;
   d7f0a:	f000 fb37 	bl	d857c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d7f0e:	4621      	mov	r1, r4
   d7f10:	2220      	movs	r2, #32
   d7f12:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7f14:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d7f16:	f003 fa75 	bl	db404 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d7f1a:	2340      	movs	r3, #64	; 0x40
   d7f1c:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d7f1e:	4621      	mov	r1, r4
   d7f20:	466b      	mov	r3, sp
   d7f22:	aa0c      	add	r2, sp, #48	; 0x30
   d7f24:	4630      	mov	r0, r6
   d7f26:	f7ff fe57 	bl	d7bd8 <netdb_getaddrinfo>
    if (!r) {
   d7f2a:	4604      	mov	r4, r0
   d7f2c:	2800      	cmp	r0, #0
   d7f2e:	d144      	bne.n	d7fba <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7f30:	4602      	mov	r2, r0
   d7f32:	2101      	movs	r1, #1
   d7f34:	6868      	ldr	r0, [r5, #4]
   d7f36:	f7ff febf 	bl	d7cb8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7f3a:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7f3c:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7f3e:	4622      	mov	r2, r4
   d7f40:	6868      	ldr	r0, [r5, #4]
   d7f42:	f7ff feb9 	bl	d7cb8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7f46:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7f48:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d7f4a:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7f4c:	2e00      	cmp	r6, #0
   d7f4e:	d034      	beq.n	d7fba <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d7f50:	2900      	cmp	r1, #0
   d7f52:	d132      	bne.n	d7fba <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7f54:	6873      	ldr	r3, [r6, #4]
   d7f56:	2b02      	cmp	r3, #2
   d7f58:	d002      	beq.n	d7f60 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d7f5a:	2b0a      	cmp	r3, #10
   d7f5c:	d009      	beq.n	d7f72 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d7f5e:	e02a      	b.n	d7fb6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d7f60:	f1b8 0f00 	cmp.w	r8, #0
   d7f64:	d027      	beq.n	d7fb6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7f66:	6971      	ldr	r1, [r6, #20]
   d7f68:	4638      	mov	r0, r7
   d7f6a:	3104      	adds	r1, #4
   d7f6c:	f000 fb33 	bl	d85d6 <_ZN9IPAddressaSEPKh>
   d7f70:	e020      	b.n	d7fb4 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d7f72:	f1b9 0f00 	cmp.w	r9, #0
   d7f76:	d01e      	beq.n	d7fb6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d7f78:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d7f7a:	2211      	movs	r2, #17
   d7f7c:	a801      	add	r0, sp, #4
   d7f7e:	f003 fa41 	bl	db404 <memset>
                    a.v = 6;
   d7f82:	2306      	movs	r3, #6
   d7f84:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7f88:	ad01      	add	r5, sp, #4
   d7f8a:	f104 0308 	add.w	r3, r4, #8
   d7f8e:	3418      	adds	r4, #24
   d7f90:	6818      	ldr	r0, [r3, #0]
   d7f92:	6859      	ldr	r1, [r3, #4]
   d7f94:	462a      	mov	r2, r5
   d7f96:	c203      	stmia	r2!, {r0, r1}
   d7f98:	3308      	adds	r3, #8
   d7f9a:	42a3      	cmp	r3, r4
   d7f9c:	4615      	mov	r5, r2
   d7f9e:	d1f7      	bne.n	d7f90 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d7fa0:	a901      	add	r1, sp, #4
   d7fa2:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d7fa4:	ad07      	add	r5, sp, #28
   d7fa6:	f000 faf7 	bl	d8598 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7faa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7fac:	1d3c      	adds	r4, r7, #4
   d7fae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7fb0:	682b      	ldr	r3, [r5, #0]
   d7fb2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d7fb4:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7fb6:	69f6      	ldr	r6, [r6, #28]
   d7fb8:	e7c8      	b.n	d7f4c <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d7fba:	9800      	ldr	r0, [sp, #0]
   d7fbc:	f7ff fe04 	bl	d7bc8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d7fc0:	4638      	mov	r0, r7
   d7fc2:	b015      	add	sp, #84	; 0x54
   d7fc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d7fc8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d7fc8:	4b02      	ldr	r3, [pc, #8]	; (d7fd4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d7fca:	4a03      	ldr	r2, [pc, #12]	; (d7fd8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d7fcc:	601a      	str	r2, [r3, #0]
   d7fce:	2200      	movs	r2, #0
   d7fd0:	605a      	str	r2, [r3, #4]
   d7fd2:	4770      	bx	lr
   d7fd4:	2003e31c 	.word	0x2003e31c
   d7fd8:	000dc9dc 	.word	0x000dc9dc

000d7fdc <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7fdc:	2200      	movs	r2, #0
   d7fde:	4611      	mov	r1, r2
   d7fe0:	6840      	ldr	r0, [r0, #4]
   d7fe2:	f7ff be89 	b.w	d7cf8 <network_listening>

000d7fe6 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7fe6:	2200      	movs	r2, #0
   d7fe8:	4611      	mov	r1, r2
   d7fea:	6840      	ldr	r0, [r0, #4]
   d7fec:	f7ff be94 	b.w	d7d18 <network_get_listen_timeout>

000d7ff0 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7ff0:	2200      	movs	r2, #0
   d7ff2:	6840      	ldr	r0, [r0, #4]
   d7ff4:	f7ff be88 	b.w	d7d08 <network_set_listen_timeout>

000d7ff8 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7ff8:	2200      	movs	r2, #0
   d7ffa:	f081 0101 	eor.w	r1, r1, #1
   d7ffe:	6840      	ldr	r0, [r0, #4]
   d8000:	f7ff be72 	b.w	d7ce8 <network_listen>

000d8004 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d8004:	2300      	movs	r3, #0
   d8006:	461a      	mov	r2, r3
   d8008:	2101      	movs	r1, #1
   d800a:	6840      	ldr	r0, [r0, #4]
   d800c:	f7ff be64 	b.w	d7cd8 <network_off>

000d8010 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d8010:	2300      	movs	r3, #0
   d8012:	461a      	mov	r2, r3
   d8014:	4619      	mov	r1, r3
   d8016:	6840      	ldr	r0, [r0, #4]
   d8018:	f7ff be56 	b.w	d7cc8 <network_on>

000d801c <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d801c:	2200      	movs	r2, #0
   d801e:	4611      	mov	r1, r2
   d8020:	6840      	ldr	r0, [r0, #4]
   d8022:	f7ff be49 	b.w	d7cb8 <network_ready>

000d8026 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d8026:	2200      	movs	r2, #0
   d8028:	4611      	mov	r1, r2
   d802a:	6840      	ldr	r0, [r0, #4]
   d802c:	f7ff be34 	b.w	d7c98 <network_connecting>

000d8030 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8030:	2200      	movs	r2, #0
   d8032:	2102      	movs	r1, #2
   d8034:	6840      	ldr	r0, [r0, #4]
   d8036:	f7ff be37 	b.w	d7ca8 <network_disconnect>

000d803a <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d803a:	2300      	movs	r3, #0
   d803c:	461a      	mov	r2, r3
   d803e:	6840      	ldr	r0, [r0, #4]
   d8040:	f7ff be22 	b.w	d7c88 <network_connect>

000d8044 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d8044:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d8046:	4605      	mov	r5, r0
   d8048:	b188      	cbz	r0, d806e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d804a:	6804      	ldr	r4, [r0, #0]
   d804c:	b14c      	cbz	r4, d8062 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d804e:	68a3      	ldr	r3, [r4, #8]
   d8050:	b11b      	cbz	r3, d805a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d8052:	2203      	movs	r2, #3
   d8054:	4621      	mov	r1, r4
   d8056:	4620      	mov	r0, r4
   d8058:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d805a:	2110      	movs	r1, #16
   d805c:	4620      	mov	r0, r4
   d805e:	f001 ff7c 	bl	d9f5a <_ZdlPvj>
   d8062:	4628      	mov	r0, r5
   d8064:	2114      	movs	r1, #20
      }
   d8066:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d806a:	f001 bf76 	b.w	d9f5a <_ZdlPvj>
   d806e:	bd38      	pop	{r3, r4, r5, pc}

000d8070 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d8070:	b110      	cbz	r0, d8078 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d8072:	6803      	ldr	r3, [r0, #0]
   d8074:	685b      	ldr	r3, [r3, #4]
   d8076:	4718      	bx	r3
   d8078:	4770      	bx	lr

000d807a <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d807a:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d807c:	6803      	ldr	r3, [r0, #0]
   d807e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d8080:	b1bb      	cbz	r3, d80b2 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d8082:	6858      	ldr	r0, [r3, #4]
   d8084:	f7ff fc54 	bl	d7930 <os_thread_is_current>
   d8088:	b978      	cbnz	r0, d80aa <_ZN6ThreadD1Ev+0x30>
   d808a:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d808c:	7c5a      	ldrb	r2, [r3, #17]
   d808e:	b912      	cbnz	r2, d8096 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d8090:	6858      	ldr	r0, [r3, #4]
   d8092:	f7ff fc55 	bl	d7940 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d8096:	6823      	ldr	r3, [r4, #0]
   d8098:	6858      	ldr	r0, [r3, #4]
   d809a:	f7ff fc59 	bl	d7950 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d809e:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d80a0:	2300      	movs	r3, #0
   d80a2:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d80a4:	b128      	cbz	r0, d80b2 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d80a6:	f7ff ffcd 	bl	d8044 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d80aa:	6820      	ldr	r0, [r4, #0]
   d80ac:	b108      	cbz	r0, d80b2 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d80ae:	f7ff ffc9 	bl	d8044 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d80b2:	4620      	mov	r0, r4
   d80b4:	bd10      	pop	{r4, pc}
	...

000d80b8 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d80b8:	b538      	push	{r3, r4, r5, lr}
   d80ba:	4b0c      	ldr	r3, [pc, #48]	; (d80ec <_ZN5spark9MeshClassD1Ev+0x34>)
   d80bc:	6003      	str	r3, [r0, #0]
   d80be:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d80c0:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d80c4:	b108      	cbz	r0, d80ca <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d80c6:	f7fb ffec 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d80ca:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d80ce:	b135      	cbz	r5, d80de <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d80d0:	4628      	mov	r0, r5
   d80d2:	f7ff ffd2 	bl	d807a <_ZN6ThreadD1Ev>
   d80d6:	2104      	movs	r1, #4
   d80d8:	4628      	mov	r0, r5
   d80da:	f001 ff3e 	bl	d9f5a <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d80de:	68a0      	ldr	r0, [r4, #8]
   d80e0:	b108      	cbz	r0, d80e6 <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d80e2:	f7ff ffc5 	bl	d8070 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d80e6:	4620      	mov	r0, r4
   d80e8:	bd38      	pop	{r3, r4, r5, pc}
   d80ea:	bf00      	nop
   d80ec:	000dca10 	.word	0x000dca10

000d80f0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d80f0:	b538      	push	{r3, r4, r5, lr}
   d80f2:	4c0e      	ldr	r4, [pc, #56]	; (d812c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d80f4:	4b0e      	ldr	r3, [pc, #56]	; (d8130 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d80f6:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d80f8:	2500      	movs	r5, #0
   d80fa:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d80fc:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d8100:	6063      	str	r3, [r4, #4]
   d8102:	60a5      	str	r5, [r4, #8]
   d8104:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d8108:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d810c:	f7ff fc40 	bl	d7990 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d8110:	4b08      	ldr	r3, [pc, #32]	; (d8134 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d8112:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8116:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d811a:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d811c:	4620      	mov	r0, r4
   d811e:	4a06      	ldr	r2, [pc, #24]	; (d8138 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d8120:	4906      	ldr	r1, [pc, #24]	; (d813c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d8122:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d8126:	f001 bf13 	b.w	d9f50 <__aeabi_atexit>
   d812a:	bf00      	nop
   d812c:	2003e324 	.word	0x2003e324
   d8130:	000dc9dc 	.word	0x000dc9dc
   d8134:	000dca10 	.word	0x000dca10
   d8138:	2003dcc8 	.word	0x2003dcc8
   d813c:	000d80b9 	.word	0x000d80b9

000d8140 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d8140:	4770      	bx	lr

000d8142 <_ZN8SPIClassD0Ev>:
   d8142:	b510      	push	{r4, lr}
   d8144:	2110      	movs	r1, #16
   d8146:	4604      	mov	r4, r0
   d8148:	f001 ff07 	bl	d9f5a <_ZdlPvj>
   d814c:	4620      	mov	r0, r4
   d814e:	bd10      	pop	{r4, pc}

000d8150 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d8150:	b570      	push	{r4, r5, r6, lr}
   d8152:	4b08      	ldr	r3, [pc, #32]	; (d8174 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d8154:	6003      	str	r3, [r0, #0]
   d8156:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d8158:	2500      	movs	r5, #0
   d815a:	460e      	mov	r6, r1
   d815c:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d8160:	f7ff fbfe 	bl	d7960 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d8164:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d8166:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d8168:	f7ff fcb6 	bl	d7ad8 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d816c:	60a5      	str	r5, [r4, #8]
}
   d816e:	4620      	mov	r0, r4
   d8170:	bd70      	pop	{r4, r5, r6, pc}
   d8172:	bf00      	nop
   d8174:	000dca44 	.word	0x000dca44

000d8178 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    // todo - fetch default pin from HAL
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d8178:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d817c:	7900      	ldrb	r0, [r0, #4]
   d817e:	f7ff bc9b 	b.w	d7ab8 <HAL_SPI_Begin>

000d8182 <_ZN8SPIClass14endTransactionEv>:
        }
    }

    void lock() { os_mutex_lock(handle_); }
    bool trylock() { return os_mutex_trylock(handle_)==0; }
    void unlock() { os_mutex_unlock(handle_); }
   d8182:	68c0      	ldr	r0, [r0, #12]
   d8184:	f7ff bbfc 	b.w	d7980 <os_mutex_unlock>

000d8188 <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
   d8188:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
   d818a:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
   d818c:	6018      	str	r0, [r3, #0]
   d818e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
   d8190:	6818      	ldr	r0, [r3, #0]
   d8192:	4288      	cmp	r0, r1
   d8194:	b2e5      	uxtb	r5, r4
   d8196:	d906      	bls.n	d81a6 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d8198:	3401      	adds	r4, #1
   d819a:	2c08      	cmp	r4, #8
   d819c:	d002      	beq.n	d81a4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
   d819e:	0840      	lsrs	r0, r0, #1
   d81a0:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
   d81a2:	e7f5      	b.n	d8190 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d81a4:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d81a6:	4b02      	ldr	r3, [pc, #8]	; (d81b0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d81a8:	5d5b      	ldrb	r3, [r3, r5]
   d81aa:	7013      	strb	r3, [r2, #0]
   d81ac:	bd30      	pop	{r4, r5, pc}
   d81ae:	bf00      	nop
   d81b0:	000dca4c 	.word	0x000dca4c

000d81b4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
  lock();
  return 0;
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d81b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d81b8:	4680      	mov	r8, r0
   d81ba:	b08f      	sub	sp, #60	; 0x3c
            os_mutex_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_lock(handle_); }
   d81bc:	68c0      	ldr	r0, [r0, #12]
   d81be:	460f      	mov	r7, r1
   d81c0:	f7ff fbd6 	bl	d7970 <os_mutex_lock>
  lock();
  // Get Current SPISettings
  hal_spi_info_t info;
  querySpiInfo(_spi, &info);
   d81c4:	f898 4004 	ldrb.w	r4, [r8, #4]
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
   d81c8:	2214      	movs	r2, #20
   d81ca:	2100      	movs	r1, #0
   d81cc:	a809      	add	r0, sp, #36	; 0x24
   d81ce:	f003 f919 	bl	db404 <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
   d81d2:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
   d81d4:	4620      	mov	r0, r4
   d81d6:	2200      	movs	r2, #0
   d81d8:	a909      	add	r1, sp, #36	; 0x24
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
   d81da:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  HAL_SPI_Info(spi, info, nullptr);
   d81de:	f7ff fc8b 	bl	d7af8 <HAL_SPI_Info>
}

static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
  if (!info->enabled || info->default_settings)
   d81e2:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d81e6:	b14c      	cbz	r4, d81fc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x48>
   d81e8:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d81ec:	b92d      	cbnz	r5, d81fa <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x46>
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d81ee:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   d81f0:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d81f4:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d81f8:	e003      	b.n	d8202 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4e>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d81fa:	2400      	movs	r4, #0
   d81fc:	46a1      	mov	r9, r4
   d81fe:	4626      	mov	r6, r4
   d8200:	2501      	movs	r5, #1
   d8202:	793b      	ldrb	r3, [r7, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d8204:	b10d      	cbz	r5, d820a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x56>
   d8206:	2b00      	cmp	r3, #0
   d8208:	d140      	bne.n	d828c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd8>
      return true;

    if (default_ == other.default_ &&
   d820a:	429d      	cmp	r5, r3
   d820c:	d10b      	bne.n	d8226 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x72>
   d820e:	68ba      	ldr	r2, [r7, #8]
   d8210:	42b2      	cmp	r2, r6
   d8212:	d108      	bne.n	d8226 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x72>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d8214:	f88d 9020 	strb.w	r9, [sp, #32]
   d8218:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d821c:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d8220:	89ba      	ldrh	r2, [r7, #12]
   d8222:	4291      	cmp	r1, r2
   d8224:	d032      	beq.n	d828c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd8>
  querySpiInfo(_spi, &info);
  particle::__SPISettings current = spiSettingsFromSpiInfo(&info);
  // If they differ, reconfigure SPI peripheral
  if (settings != current)
  {
    if (!settings.default_) {
   d8226:	bb23      	cbnz	r3, d8272 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xbe>
      uint8_t divisor = 0;
   d8228:	f88d 300f 	strb.w	r3, [sp, #15]
      unsigned int clock;
      computeClockDivider((unsigned int)info.system_clock, settings.clock_, divisor, clock);
   d822c:	f10d 020f 	add.w	r2, sp, #15
   d8230:	ab04      	add	r3, sp, #16
   d8232:	68b9      	ldr	r1, [r7, #8]
   d8234:	980a      	ldr	r0, [sp, #40]	; 0x28
   d8236:	f7ff ffa7 	bl	d8188 <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d823a:	793b      	ldrb	r3, [r7, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d823c:	b105      	cbz	r5, d8240 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
   d823e:	bb13      	cbnz	r3, d8286 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d8240:	42ab      	cmp	r3, r5
   d8242:	d009      	beq.n	d8258 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>

      if (!(current <= settings && clock == current.clock_)) {
        HAL_SPI_Set_Settings(_spi, 0, divisor, settings.bitOrder_, settings.dataMode_, nullptr);
   d8244:	2100      	movs	r1, #0
   d8246:	7b3b      	ldrb	r3, [r7, #12]
   d8248:	9101      	str	r1, [sp, #4]
   d824a:	7b7c      	ldrb	r4, [r7, #13]
   d824c:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d8250:	f898 0004 	ldrb.w	r0, [r8, #4]
   d8254:	9400      	str	r4, [sp, #0]
   d8256:	e013      	b.n	d8280 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xcc>
   d8258:	68bb      	ldr	r3, [r7, #8]
   d825a:	42b3      	cmp	r3, r6
   d825c:	d3f2      	bcc.n	d8244 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x90>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d825e:	f88d 9020 	strb.w	r9, [sp, #32]
   d8262:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d8266:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d826a:	89bb      	ldrh	r3, [r7, #12]
   d826c:	429a      	cmp	r2, r3
   d826e:	d1e9      	bne.n	d8244 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x90>
   d8270:	e009      	b.n	d8286 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      }
    } else {
      HAL_SPI_Set_Settings(_spi, 1, 0, 0, 0, nullptr);
   d8272:	2300      	movs	r3, #0
   d8274:	f898 0004 	ldrb.w	r0, [r8, #4]
   d8278:	9301      	str	r3, [sp, #4]
   d827a:	9300      	str	r3, [sp, #0]
   d827c:	461a      	mov	r2, r3
   d827e:	2101      	movs	r1, #1
   d8280:	f7ff fc52 	bl	d7b28 <HAL_SPI_Set_Settings>
   d8284:	e002      	b.n	d828c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd8>
    if (!settings.default_) {
      uint8_t divisor = 0;
      unsigned int clock;
      computeClockDivider((unsigned int)info.system_clock, settings.clock_, divisor, clock);

      if (!(current <= settings && clock == current.clock_)) {
   d8286:	9b04      	ldr	r3, [sp, #16]
   d8288:	42b3      	cmp	r3, r6
   d828a:	d1db      	bne.n	d8244 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x90>
      HAL_SPI_Set_Settings(_spi, 1, 0, 0, 0, nullptr);
    }
  }

  return 0;
}
   d828c:	2000      	movs	r0, #0
   d828e:	b00f      	add	sp, #60	; 0x3c
   d8290:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d8294 <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d8294:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
   d8296:	7900      	ldrb	r0, [r0, #4]
   d8298:	f7ff fc16 	bl	d7ac8 <HAL_SPI_Send_Receive_Data>
}
   d829c:	b2c0      	uxtb	r0, r0
   d829e:	bd08      	pop	{r3, pc}

000d82a0 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   d82a0:	b530      	push	{r4, r5, lr}
   d82a2:	b087      	sub	sp, #28
   d82a4:	4604      	mov	r4, r0
   d82a6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
   d82a8:	7900      	ldrb	r0, [r0, #4]
   d82aa:	9500      	str	r5, [sp, #0]
   d82ac:	f7ff fc2c 	bl	d7b08 <HAL_SPI_DMA_Transfer>
  if (user_callback == NULL) {
   d82b0:	b93d      	cbnz	r5, d82c2 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    HAL_SPI_TransferStatus st;
    do {
      HAL_SPI_DMA_Transfer_Status(_spi, &st);
   d82b2:	a902      	add	r1, sp, #8
   d82b4:	7920      	ldrb	r0, [r4, #4]
   d82b6:	f7ff fc2f 	bl	d7b18 <HAL_SPI_DMA_Transfer_Status>
void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback)
{
  HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
  if (user_callback == NULL) {
    HAL_SPI_TransferStatus st;
    do {
   d82ba:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d82be:	07db      	lsls	r3, r3, #31
   d82c0:	d4f7      	bmi.n	d82b2 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
      HAL_SPI_DMA_Transfer_Status(_spi, &st);
    } while(st.transfer_ongoing);
  }
}
   d82c2:	b007      	add	sp, #28
   d82c4:	bd30      	pop	{r4, r5, pc}

000d82c6 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d82c6:	7900      	ldrb	r0, [r0, #4]
   d82c8:	f7ff bc0e 	b.w	d7ae8 <HAL_SPI_Is_Enabled>

000d82cc <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d82cc:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d82ce:	6883      	ldr	r3, [r0, #8]
   d82d0:	4604      	mov	r4, r0
   d82d2:	b90b      	cbnz	r3, d82d8 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d82d4:	f001 ffd4 	bl	da280 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d82d8:	68c3      	ldr	r3, [r0, #12]
   d82da:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d82dc:	68a3      	ldr	r3, [r4, #8]
   d82de:	b11b      	cbz	r3, d82e8 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d82e0:	2203      	movs	r2, #3
   d82e2:	4621      	mov	r1, r4
   d82e4:	4620      	mov	r0, r4
   d82e6:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d82e8:	4620      	mov	r0, r4
   d82ea:	2110      	movs	r1, #16
}
   d82ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d82f0:	f001 be33 	b.w	d9f5a <_ZdlPvj>

000d82f4 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d82f4:	4770      	bx	lr

000d82f6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d82f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d82f8:	4606      	mov	r6, r0
   d82fa:	4615      	mov	r5, r2
   d82fc:	460c      	mov	r4, r1
   d82fe:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d8300:	42bc      	cmp	r4, r7
   d8302:	d006      	beq.n	d8312 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d8304:	6833      	ldr	r3, [r6, #0]
   d8306:	f814 1b01 	ldrb.w	r1, [r4], #1
   d830a:	689b      	ldr	r3, [r3, #8]
   d830c:	4630      	mov	r0, r6
   d830e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d8310:	e7f6      	b.n	d8300 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d8312:	4628      	mov	r0, r5
   d8314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8316 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d8316:	2200      	movs	r2, #0
   d8318:	7c00      	ldrb	r0, [r0, #16]
   d831a:	f7ff ba79 	b.w	d7810 <HAL_I2C_Write_Data>

000d831e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d831e:	2100      	movs	r1, #0
   d8320:	7c00      	ldrb	r0, [r0, #16]
   d8322:	f7ff ba7d 	b.w	d7820 <HAL_I2C_Available_Data>

000d8326 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d8326:	2100      	movs	r1, #0
   d8328:	7c00      	ldrb	r0, [r0, #16]
   d832a:	f7ff ba81 	b.w	d7830 <HAL_I2C_Read_Data>

000d832e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d832e:	2100      	movs	r1, #0
   d8330:	7c00      	ldrb	r0, [r0, #16]
   d8332:	f7ff ba85 	b.w	d7840 <HAL_I2C_Peek_Data>

000d8336 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d8336:	2100      	movs	r1, #0
   d8338:	7c00      	ldrb	r0, [r0, #16]
   d833a:	f7ff ba89 	b.w	d7850 <HAL_I2C_Flush_Data>

000d833e <_ZN7TwoWireD0Ev>:
   d833e:	b510      	push	{r4, lr}
   d8340:	2114      	movs	r1, #20
   d8342:	4604      	mov	r4, r0
   d8344:	f001 fe09 	bl	d9f5a <_ZdlPvj>
   d8348:	4620      	mov	r0, r4
   d834a:	bd10      	pop	{r4, pc}

000d834c <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d834c:	b510      	push	{r4, lr}
   d834e:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d8350:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d8354:	4608      	mov	r0, r1
   d8356:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d8358:	2100      	movs	r1, #0
   d835a:	4b04      	ldr	r3, [pc, #16]	; (d836c <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d835c:	7420      	strb	r0, [r4, #16]
   d835e:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d8360:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d8362:	f7ff fa85 	bl	d7870 <HAL_I2C_Init>

}
   d8366:	4620      	mov	r0, r4
   d8368:	bd10      	pop	{r4, pc}
   d836a:	bf00      	nop
   d836c:	000dca5c 	.word	0x000dca5c

000d8370 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d8370:	2300      	movs	r3, #0
   d8372:	461a      	mov	r2, r3
   d8374:	4619      	mov	r1, r3
   d8376:	7c00      	ldrb	r0, [r0, #16]
   d8378:	f7ff ba2a 	b.w	d77d0 <HAL_I2C_Begin>

000d837c <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
   d837c:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
   d837e:	2400      	movs	r4, #0
   d8380:	7c00      	ldrb	r0, [r0, #16]
   d8382:	9400      	str	r4, [sp, #0]
   d8384:	f7ff fa2c 	bl	d77e0 <HAL_I2C_Request_Data>
  return result;
}
   d8388:	b2c0      	uxtb	r0, r0
   d838a:	b002      	add	sp, #8
   d838c:	bd10      	pop	{r4, pc}

000d838e <_ZN7TwoWire11requestFromEii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
   d838e:	2301      	movs	r3, #1
   d8390:	b2d2      	uxtb	r2, r2
   d8392:	b2c9      	uxtb	r1, r1
   d8394:	f7ff bff2 	b.w	d837c <_ZN7TwoWire11requestFromEhhh>

000d8398 <_ZN7TwoWire11requestFromEiii>:
}

uint8_t TwoWire::requestFrom(int address, int quantity, int sendStop)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
   d8398:	b2db      	uxtb	r3, r3
   d839a:	b2d2      	uxtb	r2, r2
   d839c:	b2c9      	uxtb	r1, r1
   d839e:	f7ff bfed 	b.w	d837c <_ZN7TwoWire11requestFromEhhh>

000d83a2 <_ZN7TwoWire17beginTransmissionEh>:
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d83a2:	2200      	movs	r2, #0
   d83a4:	7c00      	ldrb	r0, [r0, #16]
   d83a6:	f7ff ba23 	b.w	d77f0 <HAL_I2C_Begin_Transmission>

000d83aa <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d83aa:	b2c9      	uxtb	r1, r1
   d83ac:	f7ff bff9 	b.w	d83a2 <_ZN7TwoWire17beginTransmissionEh>

000d83b0 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d83b0:	2200      	movs	r2, #0
   d83b2:	7c00      	ldrb	r0, [r0, #16]
   d83b4:	f7ff ba24 	b.w	d7800 <HAL_I2C_End_Transmission>

000d83b8 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d83b8:	2101      	movs	r1, #1
   d83ba:	f7ff bff9 	b.w	d83b0 <_ZN7TwoWire15endTransmissionEh>

000d83be <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d83be:	2100      	movs	r1, #0
   d83c0:	7c00      	ldrb	r0, [r0, #16]
   d83c2:	f7ff ba4d 	b.w	d7860 <HAL_I2C_Is_Enabled>

000d83c6 <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d83c6:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
   d83c8:	2100      	movs	r1, #0
   d83ca:	7c00      	ldrb	r0, [r0, #16]
   d83cc:	f7ff fa58 	bl	d7880 <HAL_I2C_Acquire>
}
   d83d0:	fab0 f080 	clz	r0, r0
   d83d4:	0940      	lsrs	r0, r0, #5
   d83d6:	bd08      	pop	{r3, pc}

000d83d8 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d83d8:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
   d83da:	2100      	movs	r1, #0
   d83dc:	7c00      	ldrb	r0, [r0, #16]
   d83de:	f7ff fa57 	bl	d7890 <HAL_I2C_Release>
}
   d83e2:	fab0 f080 	clz	r0, r0
   d83e6:	0940      	lsrs	r0, r0, #5
   d83e8:	bd08      	pop	{r3, pc}

000d83ea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d83ea:	680b      	ldr	r3, [r1, #0]
   d83ec:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d83ee:	b113      	cbz	r3, d83f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d83f0:	685a      	ldr	r2, [r3, #4]
   d83f2:	3201      	adds	r2, #1
   d83f4:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d83f6:	4770      	bx	lr

000d83f8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d83f8:	7441      	strb	r1, [r0, #17]
   d83fa:	4770      	bx	lr

000d83fc <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d83fc:	4770      	bx	lr

000d83fe <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d83fe:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d8400:	2100      	movs	r1, #0
   d8402:	7c00      	ldrb	r0, [r0, #16]
   d8404:	f7ff f9cc 	bl	d77a0 <HAL_USB_USART_Receive_Data>
}
   d8408:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d840c:	bf28      	it	cs
   d840e:	f04f 30ff 	movcs.w	r0, #4294967295
   d8412:	bd08      	pop	{r3, pc}

000d8414 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d8414:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d8416:	2101      	movs	r1, #1
   d8418:	7c00      	ldrb	r0, [r0, #16]
   d841a:	f7ff f9c1 	bl	d77a0 <HAL_USB_USART_Receive_Data>
}
   d841e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d8422:	bf28      	it	cs
   d8424:	f04f 30ff 	movcs.w	r0, #4294967295
   d8428:	bd08      	pop	{r3, pc}

000d842a <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d842a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d842c:	7c00      	ldrb	r0, [r0, #16]
   d842e:	f7ff f9af 	bl	d7790 <HAL_USB_USART_Available_Data_For_Write>
}
   d8432:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8436:	bd08      	pop	{r3, pc}

000d8438 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d8438:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d843a:	7c00      	ldrb	r0, [r0, #16]
   d843c:	f7ff f9a0 	bl	d7780 <HAL_USB_USART_Available_Data>
}
   d8440:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8444:	bd08      	pop	{r3, pc}

000d8446 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d8446:	7c00      	ldrb	r0, [r0, #16]
   d8448:	f7ff b9ba 	b.w	d77c0 <HAL_USB_USART_Flush_Data>

000d844c <_ZN9USBSerialD0Ev>:
   d844c:	b510      	push	{r4, lr}
   d844e:	2114      	movs	r1, #20
   d8450:	4604      	mov	r4, r0
   d8452:	f001 fd82 	bl	d9f5a <_ZdlPvj>
   d8456:	4620      	mov	r0, r4
   d8458:	bd10      	pop	{r4, pc}

000d845a <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d845a:	b538      	push	{r3, r4, r5, lr}
   d845c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d845e:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d8460:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d8462:	f7ff f995 	bl	d7790 <HAL_USB_USART_Available_Data_For_Write>
   d8466:	2800      	cmp	r0, #0
   d8468:	dc01      	bgt.n	d846e <_ZN9USBSerial5writeEh+0x14>
   d846a:	7c60      	ldrb	r0, [r4, #17]
   d846c:	b128      	cbz	r0, d847a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d846e:	4629      	mov	r1, r5
   d8470:	7c20      	ldrb	r0, [r4, #16]
   d8472:	f7ff f99d 	bl	d77b0 <HAL_USB_USART_Send_Data>
   d8476:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d847a:	bd38      	pop	{r3, r4, r5, pc}

000d847c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d847c:	b510      	push	{r4, lr}
   d847e:	4604      	mov	r4, r0
   d8480:	2300      	movs	r3, #0
   d8482:	6063      	str	r3, [r4, #4]
   d8484:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d8488:	60a3      	str	r3, [r4, #8]
   d848a:	4b05      	ldr	r3, [pc, #20]	; (d84a0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d848c:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d848e:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d8490:	4608      	mov	r0, r1
{
  _serial = serial;
   d8492:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d8494:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d8496:	4611      	mov	r1, r2
   d8498:	f7ff f962 	bl	d7760 <HAL_USB_USART_Init>
}
   d849c:	4620      	mov	r0, r4
   d849e:	bd10      	pop	{r4, pc}
   d84a0:	000dca84 	.word	0x000dca84

000d84a4 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d84a4:	2200      	movs	r2, #0
   d84a6:	7c00      	ldrb	r0, [r0, #16]
   d84a8:	f7ff b962 	b.w	d7770 <HAL_USB_USART_Begin>

000d84ac <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d84ac:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d84ae:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d84b0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d84b2:	2100      	movs	r1, #0
   d84b4:	f002 ffa6 	bl	db404 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d84b8:	4620      	mov	r0, r4
   d84ba:	bd10      	pop	{r4, pc}

000d84bc <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d84bc:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d84be:	4d0e      	ldr	r5, [pc, #56]	; (d84f8 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d84c0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d84c2:	a801      	add	r0, sp, #4
   d84c4:	f7ff fff2 	bl	d84ac <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d84c8:	6829      	ldr	r1, [r5, #0]
   d84ca:	f011 0401 	ands.w	r4, r1, #1
   d84ce:	d110      	bne.n	d84f2 <_Z16_fetch_usbserialv+0x36>
   d84d0:	4628      	mov	r0, r5
   d84d2:	f7fb fde8 	bl	d40a6 <__cxa_guard_acquire>
   d84d6:	b160      	cbz	r0, d84f2 <_Z16_fetch_usbserialv+0x36>
   d84d8:	aa01      	add	r2, sp, #4
   d84da:	4621      	mov	r1, r4
   d84dc:	4807      	ldr	r0, [pc, #28]	; (d84fc <_Z16_fetch_usbserialv+0x40>)
   d84de:	f7ff ffcd 	bl	d847c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d84e2:	4628      	mov	r0, r5
   d84e4:	f7fb fde4 	bl	d40b0 <__cxa_guard_release>
   d84e8:	4a05      	ldr	r2, [pc, #20]	; (d8500 <_Z16_fetch_usbserialv+0x44>)
   d84ea:	4906      	ldr	r1, [pc, #24]	; (d8504 <_Z16_fetch_usbserialv+0x48>)
   d84ec:	4803      	ldr	r0, [pc, #12]	; (d84fc <_Z16_fetch_usbserialv+0x40>)
   d84ee:	f001 fd2f 	bl	d9f50 <__aeabi_atexit>
	return _usbserial;
}
   d84f2:	4802      	ldr	r0, [pc, #8]	; (d84fc <_Z16_fetch_usbserialv+0x40>)
   d84f4:	b007      	add	sp, #28
   d84f6:	bd30      	pop	{r4, r5, pc}
   d84f8:	2003e4f8 	.word	0x2003e4f8
   d84fc:	2003e4fc 	.word	0x2003e4fc
   d8500:	2003dcc8 	.word	0x2003dcc8
   d8504:	000d83fd 	.word	0x000d83fd

000d8508 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d8508:	4770      	bx	lr

000d850a <_ZN9IPAddressD0Ev>:
   d850a:	b510      	push	{r4, lr}
   d850c:	2118      	movs	r1, #24
   d850e:	4604      	mov	r4, r0
   d8510:	f001 fd23 	bl	d9f5a <_ZdlPvj>
   d8514:	4620      	mov	r0, r4
   d8516:	bd10      	pop	{r4, pc}

000d8518 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d8518:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d851a:	7d03      	ldrb	r3, [r0, #20]
   d851c:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d851e:	b08d      	sub	sp, #52	; 0x34
   d8520:	460e      	mov	r6, r1
   d8522:	f100 0704 	add.w	r7, r0, #4
   d8526:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d852a:	d002      	beq.n	d8532 <_ZNK9IPAddress7printToER5Print+0x1a>
   d852c:	f100 0508 	add.w	r5, r0, #8
   d8530:	e018      	b.n	d8564 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d8532:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d8534:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d8536:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d853a:	232f      	movs	r3, #47	; 0x2f
   d853c:	462a      	mov	r2, r5
   d853e:	200a      	movs	r0, #10
   d8540:	f7ff f9ee 	bl	d7920 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d8544:	4628      	mov	r0, r5
   d8546:	f003 fccf 	bl	dbee8 <strlen>
   d854a:	6833      	ldr	r3, [r6, #0]
   d854c:	4602      	mov	r2, r0
   d854e:	68db      	ldr	r3, [r3, #12]
   d8550:	4629      	mov	r1, r5
   d8552:	4630      	mov	r0, r6
   d8554:	4798      	blx	r3
   d8556:	e00f      	b.n	d8578 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d8558:	b124      	cbz	r4, d8564 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d855a:	212e      	movs	r1, #46	; 0x2e
   d855c:	4630      	mov	r0, r6
   d855e:	f000 ffaf 	bl	d94c0 <_ZN5Print5printEc>
   d8562:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d8564:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d8568:	220a      	movs	r2, #10
   d856a:	4630      	mov	r0, r6
   d856c:	f000 ffe4 	bl	d9538 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d8570:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d8572:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d8574:	d1f0      	bne.n	d8558 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d8576:	4620      	mov	r0, r4
    }
    return n;
}
   d8578:	b00d      	add	sp, #52	; 0x34
   d857a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d857c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d857c:	b510      	push	{r4, lr}
   d857e:	4b05      	ldr	r3, [pc, #20]	; (d8594 <_ZN9IPAddressC1Ev+0x18>)
   d8580:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d8582:	2211      	movs	r2, #17
   d8584:	f840 3b04 	str.w	r3, [r0], #4
   d8588:	2100      	movs	r1, #0
   d858a:	f002 ff3b 	bl	db404 <memset>
{
    clear();
}
   d858e:	4620      	mov	r0, r4
   d8590:	bd10      	pop	{r4, pc}
   d8592:	bf00      	nop
   d8594:	000dcab4 	.word	0x000dcab4

000d8598 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d8598:	4603      	mov	r3, r0
   d859a:	4a07      	ldr	r2, [pc, #28]	; (d85b8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d859c:	b510      	push	{r4, lr}
   d859e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d85a2:	f101 0210 	add.w	r2, r1, #16
   d85a6:	f851 4b04 	ldr.w	r4, [r1], #4
   d85aa:	f843 4b04 	str.w	r4, [r3], #4
   d85ae:	4291      	cmp	r1, r2
   d85b0:	d1f9      	bne.n	d85a6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d85b2:	780a      	ldrb	r2, [r1, #0]
   d85b4:	701a      	strb	r2, [r3, #0]
}
   d85b6:	bd10      	pop	{r4, pc}
   d85b8:	000dcab4 	.word	0x000dcab4

000d85bc <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d85bc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d85be:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d85c2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d85c6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d85ca:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d85ce:	2304      	movs	r3, #4
   d85d0:	6041      	str	r1, [r0, #4]
   d85d2:	7503      	strb	r3, [r0, #20]
   d85d4:	bd10      	pop	{r4, pc}

000d85d6 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d85d6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d85d8:	780d      	ldrb	r5, [r1, #0]
   d85da:	788b      	ldrb	r3, [r1, #2]
   d85dc:	784a      	ldrb	r2, [r1, #1]
   d85de:	78c9      	ldrb	r1, [r1, #3]
   d85e0:	9100      	str	r1, [sp, #0]
   d85e2:	4629      	mov	r1, r5
   d85e4:	f7ff ffea 	bl	d85bc <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d85e8:	b003      	add	sp, #12
   d85ea:	bd30      	pop	{r4, r5, pc}

000d85ec <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d85ec:	4770      	bx	lr

000d85ee <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d85ee:	2000      	movs	r0, #0
   d85f0:	4770      	bx	lr

000d85f2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d85f2:	b510      	push	{r4, lr}
   d85f4:	2110      	movs	r1, #16
   d85f6:	4604      	mov	r4, r0
   d85f8:	f001 fcaf 	bl	d9f5a <_ZdlPvj>
   d85fc:	4620      	mov	r0, r4
   d85fe:	bd10      	pop	{r4, pc}

000d8600 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d8600:	b508      	push	{r3, lr}
      { delete this; }
   d8602:	b108      	cbz	r0, d8608 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d8604:	f7ff fff5 	bl	d85f2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d8608:	bd08      	pop	{r3, pc}

000d860a <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d860a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d860c:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d860e:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d8610:	b113      	cbz	r3, d8618 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d8612:	2203      	movs	r2, #3
   d8614:	4601      	mov	r1, r0
   d8616:	4798      	blx	r3
    }
   d8618:	4620      	mov	r0, r4
   d861a:	bd10      	pop	{r4, pc}

000d861c <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d861c:	2200      	movs	r2, #0
   d861e:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d8620:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d8622:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d8626:	8082      	strh	r2, [r0, #4]
   d8628:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d862c:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d862e:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8630:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d8632:	680c      	ldr	r4, [r1, #0]
   d8634:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d8636:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d8638:	bd10      	pop	{r4, pc}

000d863a <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d863a:	b510      	push	{r4, lr}
   d863c:	4604      	mov	r4, r0
    free((void*)msg_);
   d863e:	6800      	ldr	r0, [r0, #0]
   d8640:	f7ff fbd0 	bl	d7de4 <free>
}
   d8644:	4620      	mov	r0, r4
   d8646:	bd10      	pop	{r4, pc}

000d8648 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d8648:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d864a:	68c4      	ldr	r4, [r0, #12]
   d864c:	b1f4      	cbz	r4, d868c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d864e:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d8650:	2b02      	cmp	r3, #2
   d8652:	d103      	bne.n	d865c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d8654:	f104 000c 	add.w	r0, r4, #12
   d8658:	f7ff ffef 	bl	d863a <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d865c:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d865e:	b135      	cbz	r5, d866e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d8660:	4628      	mov	r0, r5
   d8662:	f7ff ffd2 	bl	d860a <_ZNSt14_Function_baseD1Ev>
   d8666:	2110      	movs	r1, #16
   d8668:	4628      	mov	r0, r5
   d866a:	f001 fc76 	bl	d9f5a <_ZdlPvj>
   d866e:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d8670:	b135      	cbz	r5, d8680 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d8672:	4628      	mov	r0, r5
   d8674:	f7ff ffc9 	bl	d860a <_ZNSt14_Function_baseD1Ev>
   d8678:	2110      	movs	r1, #16
   d867a:	4628      	mov	r0, r5
   d867c:	f001 fc6d 	bl	d9f5a <_ZdlPvj>
   d8680:	4620      	mov	r0, r4
   d8682:	2114      	movs	r1, #20
   d8684:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d8688:	f001 bc67 	b.w	d9f5a <_ZdlPvj>
   d868c:	bd38      	pop	{r3, r4, r5, pc}

000d868e <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
#endif

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d868e:	b510      	push	{r4, lr}
   d8690:	b088      	sub	sp, #32
   d8692:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d8694:	4668      	mov	r0, sp
   d8696:	f000 fafa 	bl	d8c8e <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d869a:	4669      	mov	r1, sp
   d869c:	a804      	add	r0, sp, #16
   d869e:	f000 fb35 	bl	d8d0c <_ZN6StringC1ERKS_>
   d86a2:	a804      	add	r0, sp, #16
   d86a4:	47a0      	blx	r4
   d86a6:	4604      	mov	r4, r0
   d86a8:	a804      	add	r0, sp, #16
   d86aa:	f000 faa9 	bl	d8c00 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d86ae:	4668      	mov	r0, sp
   d86b0:	f000 faa6 	bl	d8c00 <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d86b4:	4620      	mov	r0, r4
   d86b6:	b008      	add	sp, #32
   d86b8:	bd10      	pop	{r4, pc}

000d86ba <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d86ba:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d86bc:	2410      	movs	r4, #16
   d86be:	b085      	sub	sp, #20
   d86c0:	4607      	mov	r7, r0
   d86c2:	460e      	mov	r6, r1
   d86c4:	4615      	mov	r5, r2
   d86c6:	2100      	movs	r1, #0
   d86c8:	4622      	mov	r2, r4
   d86ca:	4668      	mov	r0, sp
   d86cc:	f002 fe9a 	bl	db404 <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d86d0:	2200      	movs	r2, #0
   d86d2:	4669      	mov	r1, sp
   d86d4:	4610      	mov	r0, r2
         size = sizeof(*this);
   d86d6:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
   d86da:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d86dc:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d86de:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d86e0:	f7ff faa2 	bl	d7c28 <spark_function>
}
   d86e4:	b005      	add	sp, #20
   d86e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d86e8 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d86e8:	b513      	push	{r0, r1, r4, lr}
   d86ea:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d86ec:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d86f0:	2300      	movs	r3, #0
   d86f2:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d86f4:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d86f6:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d86f8:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d86fa:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d86fc:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d86fe:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d8700:	f7fc fb2c 	bl	d4d5c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8704:	4620      	mov	r0, r4
   d8706:	b002      	add	sp, #8
   d8708:	bd10      	pop	{r4, pc}

000d870a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d870a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d870c:	460c      	mov	r4, r1
   d870e:	ad02      	add	r5, sp, #8
   d8710:	f854 3b04 	ldr.w	r3, [r4], #4
   d8714:	f845 3d08 	str.w	r3, [r5, #-8]!
   d8718:	4606      	mov	r6, r0
   d871a:	460f      	mov	r7, r1
   d871c:	a801      	add	r0, sp, #4
   d871e:	4621      	mov	r1, r4
   d8720:	f7ff fe63 	bl	d83ea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d8724:	4629      	mov	r1, r5
   d8726:	4630      	mov	r0, r6
   d8728:	f7ff ffde 	bl	d86e8 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d872c:	a801      	add	r0, sp, #4
   d872e:	f7fc fb15 	bl	d4d5c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8732:	4620      	mov	r0, r4
   d8734:	f7fc fb12 	bl	d4d5c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d8738:	4638      	mov	r0, r7
   d873a:	2108      	movs	r1, #8
   d873c:	f001 fc0d 	bl	d9f5a <_ZdlPvj>
        return p;
    }
   d8740:	4630      	mov	r0, r6
   d8742:	b003      	add	sp, #12
   d8744:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d8746 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d8746:	b513      	push	{r0, r1, r4, lr}
   d8748:	460b      	mov	r3, r1
   d874a:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d874c:	c803      	ldmia	r0, {r0, r1}
   d874e:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d8752:	e893 0003 	ldmia.w	r3, {r0, r1}
   d8756:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d875a:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d875e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d8762:	b002      	add	sp, #8
   d8764:	bd10      	pop	{r4, pc}
	...

000d8768 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d8768:	b538      	push	{r3, r4, r5, lr}
   d876a:	2300      	movs	r3, #0
   d876c:	4604      	mov	r4, r0
   d876e:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d8770:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d8772:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d8774:	f7fb fc91 	bl	d409a <_Znwj>
   d8778:	b128      	cbz	r0, d8786 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d877a:	2301      	movs	r3, #1
   d877c:	6043      	str	r3, [r0, #4]
   d877e:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d8780:	4b02      	ldr	r3, [pc, #8]	; (d878c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d8782:	6003      	str	r3, [r0, #0]
   d8784:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d8786:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d8788:	4620      	mov	r0, r4
   d878a:	bd38      	pop	{r3, r4, r5, pc}
   d878c:	000dcac8 	.word	0x000dcac8

000d8790 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d8790:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d8792:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d8794:	b90a      	cbnz	r2, d879a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d8796:	f001 fd73 	bl	da280 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d879a:	68c3      	ldr	r3, [r0, #12]
    }
   d879c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d87a0:	4718      	bx	r3

000d87a2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d87a2:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d87a4:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d87a6:	f100 0110 	add.w	r1, r0, #16
   d87aa:	f7ff fff1 	bl	d8790 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d87ae:	bd08      	pop	{r3, pc}

000d87b0 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d87b0:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d87b2:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d87b4:	b90a      	cbnz	r2, d87ba <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d87b6:	f001 fd63 	bl	da280 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d87ba:	68c3      	ldr	r3, [r0, #12]
    }
   d87bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d87c0:	4718      	bx	r3

000d87c2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d87c2:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d87c4:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d87c6:	f100 0110 	add.w	r1, r0, #16
   d87ca:	f7ff fff1 	bl	d87b0 <_ZNKSt8functionIFvRKbEEclES1_>
   d87ce:	bd08      	pop	{r3, pc}

000d87d0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d87d0:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d87d2:	2300      	movs	r3, #0
   d87d4:	6083      	str	r3, [r0, #8]
   d87d6:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d87d8:	4604      	mov	r4, r0
   d87da:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d87dc:	b12b      	cbz	r3, d87ea <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d87de:	2202      	movs	r2, #2
   d87e0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d87e2:	68eb      	ldr	r3, [r5, #12]
   d87e4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d87e6:	68ab      	ldr	r3, [r5, #8]
   d87e8:	60a3      	str	r3, [r4, #8]
	}
    }
   d87ea:	4620      	mov	r0, r4
   d87ec:	bd38      	pop	{r3, r4, r5, pc}
	...

000d87f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d87f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d87f2:	b089      	sub	sp, #36	; 0x24
   d87f4:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d87f6:	4668      	mov	r0, sp
   d87f8:	f7ff ff10 	bl	d861c <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d87fc:	2300      	movs	r3, #0
   d87fe:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d8802:	f04f 0202 	mov.w	r2, #2
   d8806:	e8d4 3f4f 	ldrexb	r3, [r4]
   d880a:	2b00      	cmp	r3, #0
   d880c:	d103      	bne.n	d8816 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d880e:	e8c4 2f41 	strexb	r1, r2, [r4]
   d8812:	2900      	cmp	r1, #0
   d8814:	d1f7      	bne.n	d8806 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d8816:	d002      	beq.n	d881e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d8818:	f88d 3008 	strb.w	r3, [sp, #8]
   d881c:	e063      	b.n	d88e6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d881e:	f114 050c 	adds.w	r5, r4, #12
   d8822:	d003      	beq.n	d882c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d8824:	4669      	mov	r1, sp
   d8826:	4628      	mov	r0, r5
   d8828:	f7ff fef8 	bl	d861c <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d882c:	f3bf 8f5f 	dmb	sy
   d8830:	2301      	movs	r3, #1
   d8832:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d8834:	2000      	movs	r0, #0
   d8836:	f104 0308 	add.w	r3, r4, #8
   d883a:	f3bf 8f5f 	dmb	sy
   d883e:	e853 6f00 	ldrex	r6, [r3]
   d8842:	e843 0200 	strex	r2, r0, [r3]
   d8846:	2a00      	cmp	r2, #0
   d8848:	d1f9      	bne.n	d883e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d884a:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d884e:	2e00      	cmp	r6, #0
   d8850:	d049      	beq.n	d88e6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d8852:	f7ff fa81 	bl	d7d58 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d8856:	b120      	cbz	r0, d8862 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d8858:	4629      	mov	r1, r5
   d885a:	4630      	mov	r0, r6
   d885c:	f7ff ff98 	bl	d8790 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d8860:	e03a      	b.n	d88d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d8862:	4631      	mov	r1, r6
   d8864:	a802      	add	r0, sp, #8
   d8866:	f7ff ffb3 	bl	d87d0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d886a:	68e0      	ldr	r0, [r4, #12]
   d886c:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d8870:	b108      	cbz	r0, d8876 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d8872:	f002 fe09 	bl	db488 <strdup>
   d8876:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d8878:	2010      	movs	r0, #16
   d887a:	f8ad 501c 	strh.w	r5, [sp, #28]
   d887e:	f7fb fc0c 	bl	d409a <_Znwj>
   d8882:	4605      	mov	r5, r0
   d8884:	b1e8      	cbz	r0, d88c2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d8886:	2700      	movs	r7, #0
   d8888:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d888a:	2018      	movs	r0, #24
   d888c:	f7fb fc05 	bl	d409a <_Znwj>
   d8890:	4604      	mov	r4, r0
   d8892:	b188      	cbz	r0, d88b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d8894:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d8896:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d8898:	a802      	add	r0, sp, #8
   d889a:	f7ff ff54 	bl	d8746 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d889e:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d88a0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d88a2:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d88a4:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d88a6:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d88a8:	a906      	add	r1, sp, #24
   d88aa:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d88ac:	60e3      	str	r3, [r4, #12]
   d88ae:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d88b2:	9205      	str	r2, [sp, #20]
   d88b4:	f7ff feb2 	bl	d861c <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d88b8:	4b0d      	ldr	r3, [pc, #52]	; (d88f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d88ba:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d88bc:	4b0d      	ldr	r3, [pc, #52]	; (d88f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d88be:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d88c0:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d88c2:	a806      	add	r0, sp, #24
   d88c4:	f7ff feb9 	bl	d863a <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d88c8:	a802      	add	r0, sp, #8
   d88ca:	f7ff fe9e 	bl	d860a <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d88ce:	2200      	movs	r2, #0
   d88d0:	4629      	mov	r1, r5
   d88d2:	4809      	ldr	r0, [pc, #36]	; (d88f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d88d4:	f7ff fa48 	bl	d7d68 <application_thread_invoke>
   d88d8:	4630      	mov	r0, r6
   d88da:	f7ff fe96 	bl	d860a <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d88de:	2110      	movs	r1, #16
   d88e0:	4630      	mov	r0, r6
   d88e2:	f001 fb3a 	bl	d9f5a <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d88e6:	4668      	mov	r0, sp
   d88e8:	f7ff fea7 	bl	d863a <_ZN8particle5ErrorD1Ev>
    }
   d88ec:	b009      	add	sp, #36	; 0x24
   d88ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d88f0:	000d87a3 	.word	0x000d87a3
   d88f4:	000d8a19 	.word	0x000d8a19
   d88f8:	000d82cd 	.word	0x000d82cd

000d88fc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d88fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8900:	b08b      	sub	sp, #44	; 0x2c
   d8902:	4606      	mov	r6, r0
   d8904:	460f      	mov	r7, r1
   d8906:	4690      	mov	r8, r2
   d8908:	4699      	mov	r9, r3
   d890a:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d890e:	f7ff f99b 	bl	d7c48 <spark_cloud_flag_connected>
   d8912:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
   d8914:	4683      	mov	fp, r0
   d8916:	bb30      	cbnz	r0, d8966 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d8918:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d891c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d891e:	a905      	add	r1, sp, #20
   d8920:	4628      	mov	r0, r5
   d8922:	f8ad 3018 	strh.w	r3, [sp, #24]
   d8926:	f7ff fe79 	bl	d861c <_ZN8particle5ErrorC1EOS0_>
   d892a:	2014      	movs	r0, #20
   d892c:	f7fb fbb5 	bl	d409a <_Znwj>
   d8930:	4604      	mov	r4, r0
   d8932:	b158      	cbz	r0, d894c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d8934:	2302      	movs	r3, #2
   d8936:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8938:	2301      	movs	r3, #1
   d893a:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d893c:	f8c0 b004 	str.w	fp, [r0, #4]
   d8940:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d8944:	4629      	mov	r1, r5
   d8946:	300c      	adds	r0, #12
   d8948:	f7ff fe68 	bl	d861c <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d894c:	4630      	mov	r0, r6
   d894e:	4621      	mov	r1, r4
   d8950:	f840 4b04 	str.w	r4, [r0], #4
   d8954:	f7ff ff08 	bl	d8768 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d8958:	4628      	mov	r0, r5
   d895a:	f7ff fe6e 	bl	d863a <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d895e:	a805      	add	r0, sp, #20
   d8960:	f7ff fe6b 	bl	d863a <_ZN8particle5ErrorD1Ev>
   d8964:	e052      	b.n	d8a0c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d8966:	2400      	movs	r4, #0
   d8968:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d896a:	2014      	movs	r0, #20
   d896c:	606c      	str	r4, [r5, #4]
   d896e:	60ac      	str	r4, [r5, #8]
   d8970:	9307      	str	r3, [sp, #28]
   d8972:	f7fb fb92 	bl	d409a <_Znwj>
   d8976:	4601      	mov	r1, r0
   d8978:	b118      	cbz	r0, d8982 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d897a:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d897c:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d897e:	6044      	str	r4, [r0, #4]
   d8980:	6084      	str	r4, [r0, #8]
   d8982:	a804      	add	r0, sp, #16
   d8984:	9103      	str	r1, [sp, #12]
   d8986:	f7ff feef 	bl	d8768 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d898a:	4b22      	ldr	r3, [pc, #136]	; (d8a14 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d898c:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d898e:	2008      	movs	r0, #8
   d8990:	f7fb fb83 	bl	d409a <_Znwj>
   d8994:	4604      	mov	r4, r0
   d8996:	b128      	cbz	r0, d89a4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8998:	9b03      	ldr	r3, [sp, #12]
   d899a:	f840 3b04 	str.w	r3, [r0], #4
   d899e:	a904      	add	r1, sp, #16
   d89a0:	f7ff fd23 	bl	d83ea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d89a4:	9500      	str	r5, [sp, #0]
   d89a6:	fa5f f38a 	uxtb.w	r3, sl
   d89aa:	464a      	mov	r2, r9
   d89ac:	4641      	mov	r1, r8
   d89ae:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d89b0:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d89b2:	f7ff f951 	bl	d7c58 <spark_send_event>
   d89b6:	b920      	cbnz	r0, d89c2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d89b8:	9b03      	ldr	r3, [sp, #12]
   d89ba:	785b      	ldrb	r3, [r3, #1]
   d89bc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d89c0:	b183      	cbz	r3, d89e4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d89c2:	9b03      	ldr	r3, [sp, #12]
   d89c4:	9305      	str	r3, [sp, #20]
   d89c6:	a904      	add	r1, sp, #16
   d89c8:	a806      	add	r0, sp, #24
   d89ca:	f7ff fd0e 	bl	d83ea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d89ce:	a905      	add	r1, sp, #20
   d89d0:	4630      	mov	r0, r6
   d89d2:	f7ff fe89 	bl	d86e8 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d89d6:	a806      	add	r0, sp, #24
   d89d8:	f7fc f9c0 	bl	d4d5c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d89dc:	a804      	add	r0, sp, #16
   d89de:	f7fc f9bd 	bl	d4d5c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d89e2:	e013      	b.n	d8a0c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d89e4:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d89e8:	a905      	add	r1, sp, #20
   d89ea:	a803      	add	r0, sp, #12
   d89ec:	9205      	str	r2, [sp, #20]
   d89ee:	f8ad 3018 	strh.w	r3, [sp, #24]
   d89f2:	f7ff fefd 	bl	d87f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d89f6:	a805      	add	r0, sp, #20
   d89f8:	f7ff fe1f 	bl	d863a <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d89fc:	a805      	add	r0, sp, #20
   d89fe:	9909      	ldr	r1, [sp, #36]	; 0x24
   d8a00:	f7ff fe83 	bl	d870a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d8a04:	a806      	add	r0, sp, #24
   d8a06:	f7fc f9a9 	bl	d4d5c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8a0a:	e7da      	b.n	d89c2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d8a0c:	4630      	mov	r0, r6
   d8a0e:	b00b      	add	sp, #44	; 0x2c
   d8a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8a14:	000d8b89 	.word	0x000d8b89

000d8a18 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d8a18:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d8a1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8a1c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d8a1e:	d006      	beq.n	d8a2e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d8a20:	2a03      	cmp	r2, #3
   d8a22:	d017      	beq.n	d8a54 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d8a24:	2a01      	cmp	r2, #1
   d8a26:	d122      	bne.n	d8a6e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d8a28:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d8a2a:	6003      	str	r3, [r0, #0]
	      break;
   d8a2c:	e01f      	b.n	d8a6e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d8a2e:	2018      	movs	r0, #24
   d8a30:	680e      	ldr	r6, [r1, #0]
   d8a32:	f7fb fb32 	bl	d409a <_Znwj>
   d8a36:	4605      	mov	r5, r0
   d8a38:	b150      	cbz	r0, d8a50 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d8a3a:	4631      	mov	r1, r6
   d8a3c:	f7ff fec8 	bl	d87d0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d8a40:	6930      	ldr	r0, [r6, #16]
   d8a42:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d8a46:	b108      	cbz	r0, d8a4c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d8a48:	f002 fd1e 	bl	db488 <strdup>
   d8a4c:	6128      	str	r0, [r5, #16]
   d8a4e:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d8a50:	6025      	str	r5, [r4, #0]
   d8a52:	e00c      	b.n	d8a6e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d8a54:	6804      	ldr	r4, [r0, #0]
   d8a56:	b154      	cbz	r4, d8a6e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d8a58:	f104 0010 	add.w	r0, r4, #16
   d8a5c:	f7ff fded 	bl	d863a <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d8a60:	4620      	mov	r0, r4
   d8a62:	f7ff fdd2 	bl	d860a <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d8a66:	2118      	movs	r1, #24
   d8a68:	4620      	mov	r0, r4
   d8a6a:	f001 fa76 	bl	d9f5a <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d8a6e:	2000      	movs	r0, #0
   d8a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8a72 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d8a72:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d8a74:	2300      	movs	r3, #0
   d8a76:	6083      	str	r3, [r0, #8]
   d8a78:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d8a7a:	4604      	mov	r4, r0
   d8a7c:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d8a7e:	b12b      	cbz	r3, d8a8c <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d8a80:	2202      	movs	r2, #2
   d8a82:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d8a84:	68eb      	ldr	r3, [r5, #12]
   d8a86:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d8a88:	68ab      	ldr	r3, [r5, #8]
   d8a8a:	60a3      	str	r3, [r4, #8]
	}
    }
   d8a8c:	4620      	mov	r0, r4
   d8a8e:	bd38      	pop	{r3, r4, r5, pc}

000d8a90 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d8a90:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d8a92:	b570      	push	{r4, r5, r6, lr}
   d8a94:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d8a96:	d006      	beq.n	d8aa6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d8a98:	2a03      	cmp	r2, #3
   d8a9a:	d011      	beq.n	d8ac0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d8a9c:	2a01      	cmp	r2, #1
   d8a9e:	d118      	bne.n	d8ad2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d8aa0:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d8aa2:	6003      	str	r3, [r0, #0]
	      break;
   d8aa4:	e015      	b.n	d8ad2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d8aa6:	2014      	movs	r0, #20
   d8aa8:	680e      	ldr	r6, [r1, #0]
   d8aaa:	f7fb faf6 	bl	d409a <_Znwj>
   d8aae:	4605      	mov	r5, r0
   d8ab0:	b120      	cbz	r0, d8abc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d8ab2:	4631      	mov	r1, r6
   d8ab4:	f7ff ffdd 	bl	d8a72 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d8ab8:	7c33      	ldrb	r3, [r6, #16]
   d8aba:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d8abc:	6025      	str	r5, [r4, #0]
   d8abe:	e008      	b.n	d8ad2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d8ac0:	6804      	ldr	r4, [r0, #0]
   d8ac2:	b134      	cbz	r4, d8ad2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d8ac4:	4620      	mov	r0, r4
   d8ac6:	f7ff fda0 	bl	d860a <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d8aca:	2114      	movs	r1, #20
   d8acc:	4620      	mov	r0, r4
   d8ace:	f001 fa44 	bl	d9f5a <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d8ad2:	2000      	movs	r0, #0
   d8ad4:	bd70      	pop	{r4, r5, r6, pc}
	...

000d8ad8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d8ad8:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d8ada:	2300      	movs	r3, #0
   d8adc:	b087      	sub	sp, #28
   d8ade:	460c      	mov	r4, r1
   d8ae0:	f3bf 8f5f 	dmb	sy
   d8ae4:	e850 6f00 	ldrex	r6, [r0]
   d8ae8:	e840 3200 	strex	r2, r3, [r0]
   d8aec:	2a00      	cmp	r2, #0
   d8aee:	d1f9      	bne.n	d8ae4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d8af0:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d8af4:	2e00      	cmp	r6, #0
   d8af6:	d03f      	beq.n	d8b78 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d8af8:	4618      	mov	r0, r3
   d8afa:	f7ff f92d 	bl	d7d58 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d8afe:	4607      	mov	r7, r0
   d8b00:	b120      	cbz	r0, d8b0c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d8b02:	4621      	mov	r1, r4
   d8b04:	4630      	mov	r0, r6
   d8b06:	f7ff fe53 	bl	d87b0 <_ZNKSt8functionIFvRKbEEclES1_>
   d8b0a:	e02e      	b.n	d8b6a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d8b0c:	4631      	mov	r1, r6
   d8b0e:	a801      	add	r0, sp, #4
   d8b10:	f7ff ffaf 	bl	d8a72 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d8b14:	7823      	ldrb	r3, [r4, #0]
   d8b16:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d8b1a:	2010      	movs	r0, #16
   d8b1c:	f7fb fabd 	bl	d409a <_Znwj>
   d8b20:	4605      	mov	r5, r0
   d8b22:	b1d0      	cbz	r0, d8b5a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d8b24:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8b26:	2014      	movs	r0, #20
   d8b28:	f7fb fab7 	bl	d409a <_Znwj>
   d8b2c:	4604      	mov	r4, r0
   d8b2e:	b178      	cbz	r0, d8b50 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d8b30:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d8b32:	4601      	mov	r1, r0
   d8b34:	a801      	add	r0, sp, #4
   d8b36:	f7ff fe06 	bl	d8746 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8b3a:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d8b3c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d8b3e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8b40:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d8b42:	9203      	str	r2, [sp, #12]
   d8b44:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d8b46:	60e3      	str	r3, [r4, #12]
   d8b48:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d8b4c:	9204      	str	r2, [sp, #16]
   d8b4e:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d8b50:	4b0a      	ldr	r3, [pc, #40]	; (d8b7c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d8b52:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d8b54:	4b0a      	ldr	r3, [pc, #40]	; (d8b80 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8b56:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d8b58:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d8b5a:	a801      	add	r0, sp, #4
   d8b5c:	f7ff fd55 	bl	d860a <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d8b60:	2200      	movs	r2, #0
   d8b62:	4629      	mov	r1, r5
   d8b64:	4807      	ldr	r0, [pc, #28]	; (d8b84 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d8b66:	f7ff f8ff 	bl	d7d68 <application_thread_invoke>
   d8b6a:	4630      	mov	r0, r6
   d8b6c:	f7ff fd4d 	bl	d860a <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d8b70:	2110      	movs	r1, #16
   d8b72:	4630      	mov	r0, r6
   d8b74:	f001 f9f1 	bl	d9f5a <_ZdlPvj>
        }
    }
   d8b78:	b007      	add	sp, #28
   d8b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8b7c:	000d87c3 	.word	0x000d87c3
   d8b80:	000d8a91 	.word	0x000d8a91
   d8b84:	000d82cd 	.word	0x000d82cd

000d8b88 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d8b88:	b530      	push	{r4, r5, lr}
   d8b8a:	b085      	sub	sp, #20
   d8b8c:	4604      	mov	r4, r0
   d8b8e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d8b90:	4668      	mov	r0, sp
   d8b92:	4611      	mov	r1, r2
   d8b94:	f7ff fdb9 	bl	d870a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d8b98:	b17c      	cbz	r4, d8bba <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d8b9a:	b224      	sxth	r4, r4
   d8b9c:	4628      	mov	r0, r5
   d8b9e:	b10d      	cbz	r5, d8ba4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d8ba0:	f002 fc72 	bl	db488 <strdup>
   d8ba4:	9002      	str	r0, [sp, #8]
   d8ba6:	a902      	add	r1, sp, #8
   d8ba8:	4668      	mov	r0, sp
   d8baa:	f8ad 400c 	strh.w	r4, [sp, #12]
   d8bae:	f7ff fe1f 	bl	d87f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d8bb2:	a802      	add	r0, sp, #8
   d8bb4:	f7ff fd41 	bl	d863a <_ZN8particle5ErrorD1Ev>
   d8bb8:	e01d      	b.n	d8bf6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d8bba:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d8bbc:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d8bc0:	f04f 0201 	mov.w	r2, #1
   d8bc4:	e8d0 3f4f 	ldrexb	r3, [r0]
   d8bc8:	42a3      	cmp	r3, r4
   d8bca:	d103      	bne.n	d8bd4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d8bcc:	e8c0 2f41 	strexb	r1, r2, [r0]
   d8bd0:	2900      	cmp	r1, #0
   d8bd2:	d1f7      	bne.n	d8bc4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d8bd4:	d002      	beq.n	d8bdc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d8bd6:	f88d 3008 	strb.w	r3, [sp, #8]
   d8bda:	e00c      	b.n	d8bf6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d8bdc:	f110 010c 	adds.w	r1, r0, #12
   d8be0:	f04f 0301 	mov.w	r3, #1
   d8be4:	bf18      	it	ne
   d8be6:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d8be8:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d8bec:	3004      	adds	r0, #4
   d8bee:	f800 3c03 	strb.w	r3, [r0, #-3]
   d8bf2:	f7ff ff71 	bl	d8ad8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d8bf6:	a801      	add	r0, sp, #4
   d8bf8:	f7fc f8b0 	bl	d4d5c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d8bfc:	b005      	add	sp, #20
   d8bfe:	bd30      	pop	{r4, r5, pc}

000d8c00 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d8c00:	b510      	push	{r4, lr}
   d8c02:	4604      	mov	r4, r0
{
	free(buffer);
   d8c04:	6800      	ldr	r0, [r0, #0]
   d8c06:	f7ff f8ed 	bl	d7de4 <free>
}
   d8c0a:	4620      	mov	r0, r4
   d8c0c:	bd10      	pop	{r4, pc}

000d8c0e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d8c0e:	b510      	push	{r4, lr}
   d8c10:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d8c12:	6800      	ldr	r0, [r0, #0]
   d8c14:	b108      	cbz	r0, d8c1a <_ZN6String10invalidateEv+0xc>
   d8c16:	f7ff f8e5 	bl	d7de4 <free>
	buffer = NULL;
   d8c1a:	2300      	movs	r3, #0
   d8c1c:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d8c1e:	60a3      	str	r3, [r4, #8]
   d8c20:	6063      	str	r3, [r4, #4]
   d8c22:	bd10      	pop	{r4, pc}

000d8c24 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d8c24:	b538      	push	{r3, r4, r5, lr}
   d8c26:	4604      	mov	r4, r0
   d8c28:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d8c2a:	6800      	ldr	r0, [r0, #0]
   d8c2c:	3101      	adds	r1, #1
   d8c2e:	f7ff f8e1 	bl	d7df4 <realloc>
	if (newbuffer) {
   d8c32:	b110      	cbz	r0, d8c3a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d8c34:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d8c38:	2001      	movs	r0, #1
	}
	return 0;
}
   d8c3a:	bd38      	pop	{r3, r4, r5, pc}

000d8c3c <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d8c3c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d8c3e:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d8c40:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d8c42:	b113      	cbz	r3, d8c4a <_ZN6String7reserveEj+0xe>
   d8c44:	6843      	ldr	r3, [r0, #4]
   d8c46:	428b      	cmp	r3, r1
   d8c48:	d207      	bcs.n	d8c5a <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d8c4a:	4620      	mov	r0, r4
   d8c4c:	f7ff ffea 	bl	d8c24 <_ZN6String12changeBufferEj>
   d8c50:	b120      	cbz	r0, d8c5c <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d8c52:	68a3      	ldr	r3, [r4, #8]
   d8c54:	b90b      	cbnz	r3, d8c5a <_ZN6String7reserveEj+0x1e>
   d8c56:	6822      	ldr	r2, [r4, #0]
   d8c58:	7013      	strb	r3, [r2, #0]
   d8c5a:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d8c5c:	bd10      	pop	{r4, pc}

000d8c5e <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d8c5e:	b570      	push	{r4, r5, r6, lr}
   d8c60:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d8c62:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d8c64:	4604      	mov	r4, r0
   d8c66:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d8c68:	f7ff ffe8 	bl	d8c3c <_ZN6String7reserveEj>
   d8c6c:	b918      	cbnz	r0, d8c76 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d8c6e:	4620      	mov	r0, r4
   d8c70:	f7ff ffcd 	bl	d8c0e <_ZN6String10invalidateEv>
		return *this;
   d8c74:	e009      	b.n	d8c8a <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d8c76:	462a      	mov	r2, r5
   d8c78:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d8c7a:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d8c7c:	6820      	ldr	r0, [r4, #0]
   d8c7e:	f002 fbb6 	bl	db3ee <memcpy>
	buffer[len] = 0;
   d8c82:	6822      	ldr	r2, [r4, #0]
   d8c84:	68a3      	ldr	r3, [r4, #8]
   d8c86:	2100      	movs	r1, #0
   d8c88:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d8c8a:	4620      	mov	r0, r4
   d8c8c:	bd70      	pop	{r4, r5, r6, pc}

000d8c8e <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d8c8e:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d8c90:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d8c92:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d8c94:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d8c96:	6043      	str	r3, [r0, #4]
	len = 0;
   d8c98:	6083      	str	r3, [r0, #8]
	flags = 0;
   d8c9a:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d8c9c:	460d      	mov	r5, r1
   d8c9e:	b139      	cbz	r1, d8cb0 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d8ca0:	4608      	mov	r0, r1
   d8ca2:	f003 f921 	bl	dbee8 <strlen>
   d8ca6:	4629      	mov	r1, r5
   d8ca8:	4602      	mov	r2, r0
   d8caa:	4620      	mov	r0, r4
   d8cac:	f7ff ffd7 	bl	d8c5e <_ZN6String4copyEPKcj>
}
   d8cb0:	4620      	mov	r0, r4
   d8cb2:	bd38      	pop	{r3, r4, r5, pc}

000d8cb4 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d8cb4:	b538      	push	{r3, r4, r5, lr}
   d8cb6:	4605      	mov	r5, r0
	if (buffer) {
   d8cb8:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d8cba:	460c      	mov	r4, r1
	if (buffer) {
   d8cbc:	b160      	cbz	r0, d8cd8 <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
   d8cbe:	686a      	ldr	r2, [r5, #4]
   d8cc0:	688b      	ldr	r3, [r1, #8]
   d8cc2:	429a      	cmp	r2, r3
   d8cc4:	d306      	bcc.n	d8cd4 <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
   d8cc6:	6809      	ldr	r1, [r1, #0]
   d8cc8:	f002 fbd6 	bl	db478 <strcpy>
			len = rhs.len;
   d8ccc:	68a3      	ldr	r3, [r4, #8]
   d8cce:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d8cd0:	2300      	movs	r3, #0
   d8cd2:	e00a      	b.n	d8cea <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
   d8cd4:	f7ff f886 	bl	d7de4 <free>
		}
	}
	buffer = rhs.buffer;
   d8cd8:	6823      	ldr	r3, [r4, #0]
   d8cda:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d8cdc:	6863      	ldr	r3, [r4, #4]
   d8cde:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d8ce0:	68a3      	ldr	r3, [r4, #8]
   d8ce2:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d8ce4:	2300      	movs	r3, #0
   d8ce6:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
   d8ce8:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
   d8cea:	60a3      	str	r3, [r4, #8]
   d8cec:	bd38      	pop	{r3, r4, r5, pc}

000d8cee <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d8cee:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d8cf0:	b510      	push	{r4, lr}
   d8cf2:	460b      	mov	r3, r1
   d8cf4:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d8cf6:	d007      	beq.n	d8d08 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d8cf8:	6809      	ldr	r1, [r1, #0]
   d8cfa:	b119      	cbz	r1, d8d04 <_ZN6StringaSERKS_+0x16>
   d8cfc:	689a      	ldr	r2, [r3, #8]
   d8cfe:	f7ff ffae 	bl	d8c5e <_ZN6String4copyEPKcj>
   d8d02:	e001      	b.n	d8d08 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d8d04:	f7ff ff83 	bl	d8c0e <_ZN6String10invalidateEv>

	return *this;
}
   d8d08:	4620      	mov	r0, r4
   d8d0a:	bd10      	pop	{r4, pc}

000d8d0c <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d8d0c:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d8d0e:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d8d10:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d8d12:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d8d14:	6043      	str	r3, [r0, #4]
	len = 0;
   d8d16:	6083      	str	r3, [r0, #8]
	flags = 0;
   d8d18:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d8d1a:	f7ff ffe8 	bl	d8cee <_ZN6StringaSERKS_>
}
   d8d1e:	4620      	mov	r0, r4
   d8d20:	bd10      	pop	{r4, pc}

000d8d22 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d8d22:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
   d8d24:	b510      	push	{r4, lr}
   d8d26:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d8d28:	d001      	beq.n	d8d2e <_ZN6StringaSEOS_+0xc>
   d8d2a:	f7ff ffc3 	bl	d8cb4 <_ZN6String4moveERS_>
	return *this;
}
   d8d2e:	4620      	mov	r0, r4
   d8d30:	bd10      	pop	{r4, pc}

000d8d32 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d8d32:	b538      	push	{r3, r4, r5, lr}
   d8d34:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d8d36:	460c      	mov	r4, r1
   d8d38:	b141      	cbz	r1, d8d4c <_ZN6StringaSEPKc+0x1a>
   d8d3a:	4608      	mov	r0, r1
   d8d3c:	f003 f8d4 	bl	dbee8 <strlen>
   d8d40:	4621      	mov	r1, r4
   d8d42:	4602      	mov	r2, r0
   d8d44:	4628      	mov	r0, r5
   d8d46:	f7ff ff8a 	bl	d8c5e <_ZN6String4copyEPKcj>
   d8d4a:	e001      	b.n	d8d50 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d8d4c:	f7ff ff5f 	bl	d8c0e <_ZN6String10invalidateEv>

	return *this;
}
   d8d50:	4628      	mov	r0, r5
   d8d52:	bd38      	pop	{r3, r4, r5, pc}

000d8d54 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d8d54:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d8d56:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d8d58:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d8d5a:	b912      	cbnz	r2, d8d62 <_ZNK6String6equalsEPKc+0xe>
   d8d5c:	b919      	cbnz	r1, d8d66 <_ZNK6String6equalsEPKc+0x12>
   d8d5e:	2001      	movs	r0, #1
   d8d60:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d8d62:	b911      	cbnz	r1, d8d6a <_ZNK6String6equalsEPKc+0x16>
   d8d64:	6803      	ldr	r3, [r0, #0]
   d8d66:	7818      	ldrb	r0, [r3, #0]
   d8d68:	e002      	b.n	d8d70 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d8d6a:	6800      	ldr	r0, [r0, #0]
   d8d6c:	f002 fb7a 	bl	db464 <strcmp>
   d8d70:	fab0 f080 	clz	r0, r0
   d8d74:	0940      	lsrs	r0, r0, #5
}
   d8d76:	bd08      	pop	{r3, pc}

000d8d78 <_ZNK6String10startsWithERKS_j>:
	if (len < s2.len) return 0;
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
   d8d78:	b510      	push	{r4, lr}
   d8d7a:	4614      	mov	r4, r2
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
   d8d7c:	6883      	ldr	r3, [r0, #8]
   d8d7e:	688a      	ldr	r2, [r1, #8]
   d8d80:	1a9b      	subs	r3, r3, r2
   d8d82:	42a3      	cmp	r3, r4
   d8d84:	d30a      	bcc.n	d8d9c <_ZNK6String10startsWithERKS_j+0x24>
   d8d86:	6800      	ldr	r0, [r0, #0]
   d8d88:	b158      	cbz	r0, d8da2 <_ZNK6String10startsWithERKS_j+0x2a>
   d8d8a:	6809      	ldr	r1, [r1, #0]
   d8d8c:	b141      	cbz	r1, d8da0 <_ZNK6String10startsWithERKS_j+0x28>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
   d8d8e:	4420      	add	r0, r4
   d8d90:	f003 f8b2 	bl	dbef8 <strncmp>
   d8d94:	fab0 f080 	clz	r0, r0
   d8d98:	0940      	lsrs	r0, r0, #5
   d8d9a:	bd10      	pop	{r4, pc}
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
   d8d9c:	2000      	movs	r0, #0
   d8d9e:	bd10      	pop	{r4, pc}
   d8da0:	4608      	mov	r0, r1
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}
   d8da2:	bd10      	pop	{r4, pc}

000d8da4 <_ZNK6String10startsWithERKS_>:
	return 1;
}

unsigned char String::startsWith( const String &s2 ) const
{
	if (len < s2.len) return 0;
   d8da4:	6882      	ldr	r2, [r0, #8]
   d8da6:	688b      	ldr	r3, [r1, #8]
   d8da8:	429a      	cmp	r2, r3
   d8daa:	d302      	bcc.n	d8db2 <_ZNK6String10startsWithERKS_+0xe>
	return startsWith(s2, 0);
   d8dac:	2200      	movs	r2, #0
   d8dae:	f7ff bfe3 	b.w	d8d78 <_ZNK6String10startsWithERKS_j>
}
   d8db2:	2000      	movs	r0, #0
   d8db4:	4770      	bx	lr
	...

000d8db8 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d8db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (left > right) {
   d8dbc:	429a      	cmp	r2, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d8dbe:	460e      	mov	r6, r1
   d8dc0:	461c      	mov	r4, r3
	if (left > right) {
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d8dc2:	4910      	ldr	r1, [pc, #64]	; (d8e04 <_ZNK6String9substringEjj+0x4c>)
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
   d8dc4:	bf88      	it	hi
   d8dc6:	4613      	movhi	r3, r2
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d8dc8:	4615      	mov	r5, r2
   d8dca:	4607      	mov	r7, r0
	if (left > right) {
   d8dcc:	bf84      	itt	hi
   d8dce:	4625      	movhi	r5, r4
   d8dd0:	461c      	movhi	r4, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d8dd2:	f7ff ff5c 	bl	d8c8e <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   d8dd6:	68b1      	ldr	r1, [r6, #8]
   d8dd8:	428d      	cmp	r5, r1
   d8dda:	d80f      	bhi.n	d8dfc <_ZNK6String9substringEjj+0x44>
   d8ddc:	428c      	cmp	r4, r1
   d8dde:	bf28      	it	cs
   d8de0:	460c      	movcs	r4, r1
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
   d8de2:	6833      	ldr	r3, [r6, #0]
	buffer[right] = '\0';
   d8de4:	2200      	movs	r2, #0
		left = temp;
	}
	String out;
	if (left > len) return out;
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
   d8de6:	f813 8004 	ldrb.w	r8, [r3, r4]
	buffer[right] = '\0';
   d8dea:	551a      	strb	r2, [r3, r4]
	out = buffer + left;  // pointer arithmetic
   d8dec:	6831      	ldr	r1, [r6, #0]
   d8dee:	4638      	mov	r0, r7
   d8df0:	4429      	add	r1, r5
   d8df2:	f7ff ff9e 	bl	d8d32 <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
   d8df6:	6833      	ldr	r3, [r6, #0]
   d8df8:	f803 8004 	strb.w	r8, [r3, r4]
	return out;
}
   d8dfc:	4638      	mov	r0, r7
   d8dfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8e02:	bf00      	nop
   d8e04:	000dcbdb 	.word	0x000dcbdb

000d8e08 <_Z3mapiiiii>:
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   d8e08:	428a      	cmp	r2, r1
{
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
   d8e0a:	b530      	push	{r4, r5, lr}
    if (fromEnd == fromStart) {
   d8e0c:	d007      	beq.n	d8e1e <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   d8e0e:	9d03      	ldr	r5, [sp, #12]
   d8e10:	1a44      	subs	r4, r0, r1
   d8e12:	1aed      	subs	r5, r5, r3
   d8e14:	436c      	muls	r4, r5
   d8e16:	1a52      	subs	r2, r2, r1
   d8e18:	fb94 f4f2 	sdiv	r4, r4, r2
   d8e1c:	18e0      	adds	r0, r4, r3
}
   d8e1e:	bd30      	pop	{r4, r5, pc}

000d8e20 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d8e20:	2100      	movs	r1, #0
   d8e22:	f7fe bf91 	b.w	d7d48 <system_delay_ms>
	...

000d8e28 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d8e28:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d8e2a:	4b0c      	ldr	r3, [pc, #48]	; (d8e5c <serialEventRun+0x34>)
   d8e2c:	b133      	cbz	r3, d8e3c <serialEventRun+0x14>
   d8e2e:	f7ff fb45 	bl	d84bc <_Z16_fetch_usbserialv>
   d8e32:	6803      	ldr	r3, [r0, #0]
   d8e34:	691b      	ldr	r3, [r3, #16]
   d8e36:	4798      	blx	r3
   d8e38:	2800      	cmp	r0, #0
   d8e3a:	dc09      	bgt.n	d8e50 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d8e3c:	4b08      	ldr	r3, [pc, #32]	; (d8e60 <serialEventRun+0x38>)
   d8e3e:	b163      	cbz	r3, d8e5a <serialEventRun+0x32>
   d8e40:	f000 fecc 	bl	d9bdc <_Z22__fetch_global_Serial1v>
   d8e44:	6803      	ldr	r3, [r0, #0]
   d8e46:	691b      	ldr	r3, [r3, #16]
   d8e48:	4798      	blx	r3
   d8e4a:	2800      	cmp	r0, #0
   d8e4c:	dc03      	bgt.n	d8e56 <serialEventRun+0x2e>
   d8e4e:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d8e50:	f3af 8000 	nop.w
   d8e54:	e7f2      	b.n	d8e3c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d8e56:	f3af 8000 	nop.w
   d8e5a:	bd08      	pop	{r3, pc}
	...

000d8e64 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d8e64:	b508      	push	{r3, lr}
	serialEventRun();
   d8e66:	f7ff ffdf 	bl	d8e28 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d8e6a:	f7fe fded 	bl	d7a48 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d8e6e:	4b01      	ldr	r3, [pc, #4]	; (d8e74 <_post_loop+0x10>)
   d8e70:	6018      	str	r0, [r3, #0]
   d8e72:	bd08      	pop	{r3, pc}
   d8e74:	2003e604 	.word	0x2003e604

000d8e78 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d8e78:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d8e7a:	2300      	movs	r3, #0
   d8e7c:	9300      	str	r3, [sp, #0]
   d8e7e:	461a      	mov	r2, r3
   d8e80:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d8e84:	f7fe ff92 	bl	d7dac <system_ctrl_set_result>
}
   d8e88:	b003      	add	sp, #12
   d8e8a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d8e90 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d8e90:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d8e92:	8843      	ldrh	r3, [r0, #2]
   d8e94:	2b0a      	cmp	r3, #10
   d8e96:	d008      	beq.n	d8eaa <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d8e98:	2b50      	cmp	r3, #80	; 0x50
   d8e9a:	d109      	bne.n	d8eb0 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d8e9c:	4b09      	ldr	r3, [pc, #36]	; (d8ec4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d8e9e:	681b      	ldr	r3, [r3, #0]
   d8ea0:	b13b      	cbz	r3, d8eb2 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d8ea2:	b003      	add	sp, #12
   d8ea4:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d8ea8:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d8eaa:	f7ff ffe5 	bl	d8e78 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d8eae:	e006      	b.n	d8ebe <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d8eb0:	2300      	movs	r3, #0
   d8eb2:	9300      	str	r3, [sp, #0]
   d8eb4:	461a      	mov	r2, r3
   d8eb6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d8eba:	f7fe ff77 	bl	d7dac <system_ctrl_set_result>
        break;
    }
}
   d8ebe:	b003      	add	sp, #12
   d8ec0:	f85d fb04 	ldr.w	pc, [sp], #4
   d8ec4:	2003e510 	.word	0x2003e510

000d8ec8 <module_user_init_hook>:

void module_user_init_hook()
{
   d8ec8:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d8eca:	f7fe fda5 	bl	d7a18 <HAL_RNG_GetRandomNumber>
   d8ece:	4604      	mov	r4, r0
    srand(seed);
   d8ed0:	f002 faa0 	bl	db414 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d8ed4:	4b07      	ldr	r3, [pc, #28]	; (d8ef4 <module_user_init_hook+0x2c>)
   d8ed6:	b113      	cbz	r3, d8ede <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d8ed8:	4620      	mov	r0, r4
   d8eda:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d8ede:	2100      	movs	r1, #0
   d8ee0:	4804      	ldr	r0, [pc, #16]	; (d8ef4 <module_user_init_hook+0x2c>)
   d8ee2:	f7fe fec9 	bl	d7c78 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d8ee6:	2100      	movs	r1, #0
   d8ee8:	4803      	ldr	r0, [pc, #12]	; (d8ef8 <module_user_init_hook+0x30>)
}
   d8eea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d8eee:	f7fe bf53 	b.w	d7d98 <system_ctrl_set_app_request_handler>
   d8ef2:	bf00      	nop
   d8ef4:	00000000 	.word	0x00000000
   d8ef8:	000d8e91 	.word	0x000d8e91

000d8efc <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
   d8efc:	6800      	ldr	r0, [r0, #0]
   d8efe:	f7ff ba62 	b.w	d83c6 <_ZN7TwoWire4lockEv>

000d8f02 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   d8f02:	b510      	push	{r4, lr}
   d8f04:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
   d8f06:	6001      	str	r1, [r0, #0]
   d8f08:	7102      	strb	r2, [r0, #4]

    if (lock_) {
   d8f0a:	b10a      	cbz	r2, d8f10 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   d8f0c:	f7ff fff6 	bl	d8efc <_ZN9FuelGauge4lockEv>
    }
}
   d8f10:	4620      	mov	r0, r4
   d8f12:	bd10      	pop	{r4, pc}

000d8f14 <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
   d8f14:	b538      	push	{r3, r4, r5, lr}
   d8f16:	4604      	mov	r4, r0
   d8f18:	460d      	mov	r5, r1
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d8f1a:	f000 ff4b 	bl	d9db4 <_Z20__fetch_global_Wire1v>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
   d8f1e:	462a      	mov	r2, r5
   d8f20:	4601      	mov	r1, r0
   d8f22:	4620      	mov	r0, r4
   d8f24:	f7ff ffed 	bl	d8f02 <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
   d8f28:	4620      	mov	r0, r4
   d8f2a:	bd38      	pop	{r3, r4, r5, pc}

000d8f2c <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
   d8f2c:	6800      	ldr	r0, [r0, #0]
   d8f2e:	f7ff ba53 	b.w	d83d8 <_ZN7TwoWire6unlockEv>

000d8f32 <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   d8f32:	b510      	push	{r4, lr}
{
    if (lock_) {
   d8f34:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   d8f36:	4604      	mov	r4, r0
{
    if (lock_) {
   d8f38:	b10b      	cbz	r3, d8f3e <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
   d8f3a:	f7ff fff7 	bl	d8f2c <_ZN9FuelGauge6unlockEv>
    }
}
   d8f3e:	4620      	mov	r0, r4
   d8f40:	bd10      	pop	{r4, pc}

000d8f42 <_ZN9FuelGauge12readRegisterEhRhS0_>:
void FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
	readRegister(CONFIG_REGISTER, MSB, LSB);
}


void FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   d8f42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8f44:	4604      	mov	r4, r0
   d8f46:	4616      	mov	r6, r2
   d8f48:	461d      	mov	r5, r3
   d8f4a:	460f      	mov	r7, r1
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d8f4c:	f7ff ffd6 	bl	d8efc <_ZN9FuelGauge4lockEv>
    std::lock_guard<FuelGauge> l(*this);
    i2c_.beginTransmission(MAX17043_ADDRESS);
   d8f50:	6820      	ldr	r0, [r4, #0]
   d8f52:	2136      	movs	r1, #54	; 0x36
   d8f54:	f7ff fa29 	bl	d83aa <_ZN7TwoWire17beginTransmissionEi>
    i2c_.write(startAddress);
   d8f58:	6820      	ldr	r0, [r4, #0]
   d8f5a:	6803      	ldr	r3, [r0, #0]
   d8f5c:	4639      	mov	r1, r7
   d8f5e:	689b      	ldr	r3, [r3, #8]
   d8f60:	4798      	blx	r3
    i2c_.endTransmission(true);
   d8f62:	2101      	movs	r1, #1
   d8f64:	6820      	ldr	r0, [r4, #0]
   d8f66:	f7ff fa23 	bl	d83b0 <_ZN7TwoWire15endTransmissionEh>

    i2c_.requestFrom(MAX17043_ADDRESS, 2, true);
   d8f6a:	2202      	movs	r2, #2
   d8f6c:	2136      	movs	r1, #54	; 0x36
   d8f6e:	2301      	movs	r3, #1
   d8f70:	6820      	ldr	r0, [r4, #0]
   d8f72:	f7ff fa11 	bl	d8398 <_ZN7TwoWire11requestFromEiii>
    MSB = i2c_.read();
   d8f76:	6820      	ldr	r0, [r4, #0]
   d8f78:	6803      	ldr	r3, [r0, #0]
   d8f7a:	695b      	ldr	r3, [r3, #20]
   d8f7c:	4798      	blx	r3
   d8f7e:	7030      	strb	r0, [r6, #0]
    LSB = i2c_.read();
   d8f80:	6820      	ldr	r0, [r4, #0]
   d8f82:	6803      	ldr	r3, [r0, #0]
   d8f84:	695b      	ldr	r3, [r3, #20]
   d8f86:	4798      	blx	r3
   d8f88:	7028      	strb	r0, [r5, #0]

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   d8f8a:	4620      	mov	r0, r4
}
   d8f8c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   d8f90:	f7ff bfcc 	b.w	d8f2c <_ZN9FuelGauge6unlockEv>

000d8f94 <_ZN9FuelGauge6getSoCEv>:
	readRegister(VCELL_REGISTER, MSB, LSB);
	return detail::_getVCell(MSB, LSB);
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {
   d8f94:	b507      	push	{r0, r1, r2, lr}

	byte MSB = 0;
	byte LSB = 0;
   d8f96:	ab02      	add	r3, sp, #8
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
   d8f98:	2200      	movs	r2, #0
	byte LSB = 0;
   d8f9a:	f803 2d01 	strb.w	r2, [r3, #-1]!
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
   d8f9e:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
   d8fa2:	2104      	movs	r1, #4
   d8fa4:	f10d 0206 	add.w	r2, sp, #6
   d8fa8:	f7ff ffcb 	bl	d8f42 <_ZN9FuelGauge12readRegisterEhRhS0_>
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
   d8fac:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d8fb0:	f001 fd36 	bl	daa20 <__aeabi_i2d>
   d8fb4:	2200      	movs	r2, #0
   d8fb6:	4b09      	ldr	r3, [pc, #36]	; (d8fdc <_ZN9FuelGauge6getSoCEv+0x48>)
   d8fb8:	f001 fd98 	bl	daaec <__aeabi_dmul>
   d8fbc:	f002 f86e 	bl	db09c <__aeabi_d2f>
   d8fc0:	f89d 3006 	ldrb.w	r3, [sp, #6]
   d8fc4:	ee00 3a10 	vmov	s0, r3
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
   d8fc8:	ee07 0a90 	vmov	s15, r0
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
   d8fcc:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
   d8fd0:	ee37 0a80 	vadd.f32	s0, s15, s0
   d8fd4:	b003      	add	sp, #12
   d8fd6:	f85d fb04 	ldr.w	pc, [sp], #4
   d8fda:	bf00      	nop
   d8fdc:	3f700000 	.word	0x3f700000

000d8fe0 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d8fe0:	2200      	movs	r2, #0
   d8fe2:	4611      	mov	r1, r2
   d8fe4:	6840      	ldr	r0, [r0, #4]
   d8fe6:	f7fe be67 	b.w	d7cb8 <network_ready>

000d8fea <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8fea:	2200      	movs	r2, #0
   d8fec:	4611      	mov	r1, r2
   d8fee:	6840      	ldr	r0, [r0, #4]
   d8ff0:	f7fe be82 	b.w	d7cf8 <network_listening>

000d8ff4 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d8ff4:	2200      	movs	r2, #0
   d8ff6:	4611      	mov	r1, r2
   d8ff8:	6840      	ldr	r0, [r0, #4]
   d8ffa:	f7fe be8d 	b.w	d7d18 <network_get_listen_timeout>

000d8ffe <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d8ffe:	2200      	movs	r2, #0
   d9000:	6840      	ldr	r0, [r0, #4]
   d9002:	f7fe be81 	b.w	d7d08 <network_set_listen_timeout>

000d9006 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d9006:	2200      	movs	r2, #0
   d9008:	f081 0101 	eor.w	r1, r1, #1
   d900c:	6840      	ldr	r0, [r0, #4]
   d900e:	f7fe be6b 	b.w	d7ce8 <network_listen>

000d9012 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d9012:	2300      	movs	r3, #0
   d9014:	461a      	mov	r2, r3
   d9016:	4619      	mov	r1, r3
   d9018:	6840      	ldr	r0, [r0, #4]
   d901a:	f7fe be5d 	b.w	d7cd8 <network_off>

000d901e <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d901e:	2300      	movs	r3, #0
   d9020:	461a      	mov	r2, r3
   d9022:	4619      	mov	r1, r3
   d9024:	6840      	ldr	r0, [r0, #4]
   d9026:	f7fe be4f 	b.w	d7cc8 <network_on>

000d902a <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d902a:	2200      	movs	r2, #0
   d902c:	4611      	mov	r1, r2
   d902e:	6840      	ldr	r0, [r0, #4]
   d9030:	f7fe be32 	b.w	d7c98 <network_connecting>

000d9034 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d9034:	2200      	movs	r2, #0
   d9036:	2102      	movs	r1, #2
   d9038:	6840      	ldr	r0, [r0, #4]
   d903a:	f7fe be35 	b.w	d7ca8 <network_disconnect>

000d903e <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d903e:	2300      	movs	r3, #0
   d9040:	461a      	mov	r2, r3
   d9042:	6840      	ldr	r0, [r0, #4]
   d9044:	f7fe be20 	b.w	d7c88 <network_connect>

000d9048 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d9048:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d904a:	4c08      	ldr	r4, [pc, #32]	; (d906c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d904c:	2528      	movs	r5, #40	; 0x28
   d904e:	462a      	mov	r2, r5
   d9050:	2100      	movs	r1, #0
   d9052:	4620      	mov	r0, r4
   d9054:	f002 f9d6 	bl	db404 <memset>
        cid = -1;
   d9058:	f04f 33ff 	mov.w	r3, #4294967295
   d905c:	6063      	str	r3, [r4, #4]
   d905e:	4b04      	ldr	r3, [pc, #16]	; (d9070 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d9060:	8025      	strh	r5, [r4, #0]
   d9062:	2204      	movs	r2, #4
   d9064:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d9066:	4a03      	ldr	r2, [pc, #12]	; (d9074 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d9068:	601a      	str	r2, [r3, #0]
   d906a:	bd38      	pop	{r3, r4, r5, pc}
   d906c:	2003e51c 	.word	0x2003e51c
   d9070:	2003e514 	.word	0x2003e514
   d9074:	000dcae4 	.word	0x000dcae4

000d9078 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d9078:	b510      	push	{r4, lr}
   d907a:	4604      	mov	r4, r0
   d907c:	f7ff fac5 	bl	d860a <_ZNSt14_Function_baseD1Ev>
   d9080:	4620      	mov	r0, r4
   d9082:	bd10      	pop	{r4, pc}

000d9084 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d9084:	4803      	ldr	r0, [pc, #12]	; (d9094 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d9086:	4a04      	ldr	r2, [pc, #16]	; (d9098 <_GLOBAL__sub_I_RGB+0x14>)
   d9088:	4904      	ldr	r1, [pc, #16]	; (d909c <_GLOBAL__sub_I_RGB+0x18>)
   d908a:	2300      	movs	r3, #0
   d908c:	6083      	str	r3, [r0, #8]
   d908e:	f000 bf5f 	b.w	d9f50 <__aeabi_atexit>
   d9092:	bf00      	nop
   d9094:	2003e544 	.word	0x2003e544
   d9098:	2003dcc8 	.word	0x2003dcc8
   d909c:	000d9079 	.word	0x000d9079

000d90a0 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d90a0:	4700      	bx	r0
	...

000d90a4 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d90a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d90a6:	b085      	sub	sp, #20
   d90a8:	461c      	mov	r4, r3
   d90aa:	460e      	mov	r6, r1
   d90ac:	4617      	mov	r7, r2
   d90ae:	4605      	mov	r5, r0
    HAL_Interrupts_Detach(pin);
   d90b0:	f7fe fd7a 	bl	d7ba8 <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
   d90b4:	2000      	movs	r0, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
   d90b6:	4284      	cmp	r4, r0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d90b8:	f04f 0304 	mov.w	r3, #4
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d90bc:	9003      	str	r0, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d90be:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
   d90c2:	bfa5      	ittet	ge
   d90c4:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d90c8:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
  }
  return nullptr;
   d90cc:	4603      	movlt	r3, r0
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
   d90ce:	ab03      	addge	r3, sp, #12

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d90d0:	9300      	str	r3, [sp, #0]
   d90d2:	4632      	mov	r2, r6
   d90d4:	463b      	mov	r3, r7
   d90d6:	4906      	ldr	r1, [pc, #24]	; (d90f0 <_Z15attachInterrupttPFvvE13InterruptModeah+0x4c>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d90d8:	bfa8      	it	ge
   d90da:	f88d 400d 	strbge.w	r4, [sp, #13]

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d90de:	4628      	mov	r0, r5
   d90e0:	f7fe fd5a 	bl	d7b98 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d90e4:	fab0 f080 	clz	r0, r0
   d90e8:	0940      	lsrs	r0, r0, #5
   d90ea:	b005      	add	sp, #20
   d90ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d90ee:	bf00      	nop
   d90f0:	000d90a1 	.word	0x000d90a1

000d90f4 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d90f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   d90f6:	4b14      	ldr	r3, [pc, #80]	; (d9148 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d90f8:	4f14      	ldr	r7, [pc, #80]	; (d914c <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d90fa:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   d90fc:	4b14      	ldr	r3, [pc, #80]	; (d9150 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d90fe:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   d9100:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   d9102:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   d9104:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   d9106:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d9108:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d910a:	d01b      	beq.n	d9144 <_ZL22Refresh_UnixTime_Cachel+0x50>
   d910c:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   d910e:	ad01      	add	r5, sp, #4
   d9110:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   d9114:	f002 f864 	bl	db1e0 <localtime>
	calendar_time->tm_year += 1900;
   d9118:	6943      	ldr	r3, [r0, #20]
   d911a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d911e:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   d9120:	4604      	mov	r4, r0
   d9122:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d9124:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d9126:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d9128:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d912a:	f8d4 e000 	ldr.w	lr, [r4]
   d912e:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d9132:	ad01      	add	r5, sp, #4
   d9134:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d9136:	4c07      	ldr	r4, [pc, #28]	; (d9154 <_ZL22Refresh_UnixTime_Cachel+0x60>)
   d9138:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d913a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d913c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d913e:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d9140:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   d9144:	b00b      	add	sp, #44	; 0x2c
   d9146:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9148:	2003e588 	.word	0x2003e588
   d914c:	2003e584 	.word	0x2003e584
   d9150:	2003e580 	.word	0x2003e580
   d9154:	2003e554 	.word	0x2003e554

000d9158 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
   d9158:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d915a:	2000      	movs	r0, #0
   d915c:	f7fe fd84 	bl	d7c68 <spark_sync_time_pending>
   d9160:	b128      	cbz	r0, d916e <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d9162:	f7fe fd71 	bl	d7c48 <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d9166:	f080 0001 	eor.w	r0, r0, #1
   d916a:	b2c0      	uxtb	r0, r0
   d916c:	bd08      	pop	{r3, pc}
   d916e:	2001      	movs	r0, #1
    }
   d9170:	bd08      	pop	{r3, pc}
	...

000d9174 <_ZN9TimeClass4hourEl>:
	return hour(now());
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
   d9174:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d9176:	f7ff ffbd 	bl	d90f4 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_hour;
}
   d917a:	4b01      	ldr	r3, [pc, #4]	; (d9180 <_ZN9TimeClass4hourEl+0xc>)
   d917c:	6898      	ldr	r0, [r3, #8]
   d917e:	bd08      	pop	{r3, pc}
   d9180:	2003e554 	.word	0x2003e554

000d9184 <_ZN9TimeClass6minuteEl>:
	return minute(now());
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
   d9184:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d9186:	f7ff ffb5 	bl	d90f4 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_min;
}
   d918a:	4b01      	ldr	r3, [pc, #4]	; (d9190 <_ZN9TimeClass6minuteEl+0xc>)
   d918c:	6858      	ldr	r0, [r3, #4]
   d918e:	bd08      	pop	{r3, pc}
   d9190:	2003e554 	.word	0x2003e554

000d9194 <_ZN9TimeClass6secondEl>:
	return second(now());
}

/* the second for the given time */
int TimeClass::second(time_t t)
{
   d9194:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d9196:	f7ff ffad 	bl	d90f4 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_sec;
}
   d919a:	4b01      	ldr	r3, [pc, #4]	; (d91a0 <_ZN9TimeClass6secondEl+0xc>)
   d919c:	6818      	ldr	r0, [r3, #0]
   d919e:	bd08      	pop	{r3, pc}
   d91a0:	2003e554 	.word	0x2003e554

000d91a4 <_ZN9TimeClass3dayEl>:
	return day(now());
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
   d91a4:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d91a6:	f7ff ffa5 	bl	d90f4 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_mday;
}
   d91aa:	4b01      	ldr	r3, [pc, #4]	; (d91b0 <_ZN9TimeClass3dayEl+0xc>)
   d91ac:	68d8      	ldr	r0, [r3, #12]
   d91ae:	bd08      	pop	{r3, pc}
   d91b0:	2003e554 	.word	0x2003e554

000d91b4 <_ZN9TimeClass5monthEl>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   d91b4:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d91b6:	f7ff ff9d 	bl	d90f4 <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   d91ba:	4b02      	ldr	r3, [pc, #8]	; (d91c4 <_ZN9TimeClass5monthEl+0x10>)
   d91bc:	6918      	ldr	r0, [r3, #16]
}
   d91be:	3001      	adds	r0, #1
   d91c0:	bd08      	pop	{r3, pc}
   d91c2:	bf00      	nop
   d91c4:	2003e554 	.word	0x2003e554

000d91c8 <_ZN9TimeClass4yearEl>:
	return year(now());
}

/* the year for the given time */
int TimeClass::year(time_t t)
{
   d91c8:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d91ca:	f7ff ff93 	bl	d90f4 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_year;
}
   d91ce:	4b01      	ldr	r3, [pc, #4]	; (d91d4 <_ZN9TimeClass4yearEl+0xc>)
   d91d0:	6958      	ldr	r0, [r3, #20]
   d91d2:	bd08      	pop	{r3, pc}
   d91d4:	2003e554 	.word	0x2003e554

000d91d8 <_ZN9TimeClass5localEv>:
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
}

time_t TimeClass::local()
{
   d91d8:	b508      	push	{r3, lr}
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
   d91da:	f7fe fc3d 	bl	d7a58 <HAL_RTC_Get_UnixTime>
   d91de:	4b03      	ldr	r3, [pc, #12]	; (d91ec <_ZN9TimeClass5localEv+0x14>)
   d91e0:	681b      	ldr	r3, [r3, #0]
   d91e2:	4418      	add	r0, r3
   d91e4:	4b02      	ldr	r3, [pc, #8]	; (d91f0 <_ZN9TimeClass5localEv+0x18>)
   d91e6:	681b      	ldr	r3, [r3, #0]
}
   d91e8:	4418      	add	r0, r3
   d91ea:	bd08      	pop	{r3, pc}
   d91ec:	2003e588 	.word	0x2003e588
   d91f0:	2003e580 	.word	0x2003e580

000d91f4 <_ZN9TimeClass4zoneEf>:

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d91f4:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   d91f8:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d91fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d9200:	d40f      	bmi.n	d9222 <_ZN9TimeClass4zoneEf+0x2e>
   d9202:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   d9206:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d920a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d920e:	dc08      	bgt.n	d9222 <_ZN9TimeClass4zoneEf+0x2e>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   d9210:	eddf 7a04 	vldr	s15, [pc, #16]	; d9224 <_ZN9TimeClass4zoneEf+0x30>
   d9214:	4b04      	ldr	r3, [pc, #16]	; (d9228 <_ZN9TimeClass4zoneEf+0x34>)
   d9216:	ee20 0a27 	vmul.f32	s0, s0, s15
   d921a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d921e:	ed83 0a00 	vstr	s0, [r3]
   d9222:	4770      	bx	lr
   d9224:	45610000 	.word	0x45610000
   d9228:	2003e588 	.word	0x2003e588

000d922c <_ZN9TimeClass7setTimeEl>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   d922c:	b508      	push	{r3, lr}
    HAL_RTC_Set_UnixTime(t);
   d922e:	f7fe fc1b 	bl	d7a68 <HAL_RTC_Set_UnixTime>
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   d9232:	2200      	movs	r2, #0
   d9234:	4611      	mov	r1, r2
   d9236:	4610      	mov	r0, r2
}
   d9238:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
    HAL_RTC_Set_UnixTime(t);
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   d923c:	f7fe bda4 	b.w	d7d88 <system_notify_time_changed>

000d9240 <_ZN9TimeClass7timeStrEl>:
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d9240:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
   d9242:	4b0e      	ldr	r3, [pc, #56]	; (d927c <_ZN9TimeClass7timeStrEl+0x3c>)
   d9244:	681b      	ldr	r3, [r3, #0]
   d9246:	4419      	add	r1, r3
   d9248:	4b0d      	ldr	r3, [pc, #52]	; (d9280 <_ZN9TimeClass7timeStrEl+0x40>)
   d924a:	681b      	ldr	r3, [r3, #0]
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d924c:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
   d924e:	a802      	add	r0, sp, #8
   d9250:	4419      	add	r1, r3
   d9252:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
   d9256:	f001 ffc3 	bl	db1e0 <localtime>
        char* ascstr = asctime(calendar_time);
   d925a:	f001 ff6f 	bl	db13c <asctime>
   d925e:	4605      	mov	r5, r0
        int len = strlen(ascstr);
   d9260:	f002 fe42 	bl	dbee8 <strlen>
        ascstr[len-1] = 0; // remove final newline
   d9264:	4428      	add	r0, r5
   d9266:	2300      	movs	r3, #0
   d9268:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
   d926c:	4629      	mov	r1, r5
   d926e:	4620      	mov	r0, r4
   d9270:	f7ff fd0d 	bl	d8c8e <_ZN6StringC1EPK19__FlashStringHelper>
}
   d9274:	4620      	mov	r0, r4
   d9276:	b003      	add	sp, #12
   d9278:	bd30      	pop	{r4, r5, pc}
   d927a:	bf00      	nop
   d927c:	2003e588 	.word	0x2003e588
   d9280:	2003e580 	.word	0x2003e580

000d9284 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d9284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9288:	b0a4      	sub	sp, #144	; 0x90
    char format_str[64];
    strcpy(format_str, format);
   d928a:	ac14      	add	r4, sp, #80	; 0x50
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d928c:	4607      	mov	r7, r0
   d928e:	4689      	mov	r9, r1
    char format_str[64];
    strcpy(format_str, format);
   d9290:	4620      	mov	r0, r4
   d9292:	4611      	mov	r1, r2
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d9294:	461d      	mov	r5, r3
    char format_str[64];
    strcpy(format_str, format);
   d9296:	f002 f8ef 	bl	db478 <strcpy>
    size_t len = strlen(format_str);
   d929a:	4620      	mov	r0, r4
   d929c:	f002 fe24 	bl	dbee8 <strlen>
   d92a0:	4680      	mov	r8, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   d92a2:	b925      	cbnz	r5, d92ae <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2a>
        strcpy(time_zone_str, "Z");
   d92a4:	4924      	ldr	r1, [pc, #144]	; (d9338 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xb4>)
   d92a6:	a803      	add	r0, sp, #12
   d92a8:	f002 f8e6 	bl	db478 <strcpy>
   d92ac:	e013      	b.n	d92d6 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x52>
    }
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   d92ae:	213c      	movs	r1, #60	; 0x3c
   d92b0:	fb95 f2f1 	sdiv	r2, r5, r1
   d92b4:	2a00      	cmp	r2, #0
   d92b6:	bfb8      	it	lt
   d92b8:	4252      	neglt	r2, r2
   d92ba:	fb92 f3f1 	sdiv	r3, r2, r1
   d92be:	fb01 2213 	mls	r2, r1, r3, r2
   d92c2:	9200      	str	r2, [sp, #0]
   d92c4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d92c8:	4a1c      	ldr	r2, [pc, #112]	; (d933c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xb8>)
   d92ca:	fb95 f3f3 	sdiv	r3, r5, r3
   d92ce:	2110      	movs	r1, #16
   d92d0:	a803      	add	r0, sp, #12
   d92d2:	f7fe fdaf 	bl	d7e34 <snprintf>
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d92d6:	4625      	mov	r5, r4
   d92d8:	1b2e      	subs	r6, r5, r4
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   d92da:	f108 3aff 	add.w	sl, r8, #4294967295
   d92de:	45b2      	cmp	sl, r6
   d92e0:	d91b      	bls.n	d931a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x96>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   d92e2:	782b      	ldrb	r3, [r5, #0]
   d92e4:	2b25      	cmp	r3, #37	; 0x25
   d92e6:	d116      	bne.n	d9316 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x92>
   d92e8:	786b      	ldrb	r3, [r5, #1]
   d92ea:	2b7a      	cmp	r3, #122	; 0x7a
   d92ec:	d113      	bne.n	d9316 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x92>
        {
            size_t tzlen = strlen(time_zone_str);
   d92ee:	a803      	add	r0, sp, #12
   d92f0:	f002 fdfa 	bl	dbee8 <strlen>
   d92f4:	4680      	mov	r8, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d92f6:	4430      	add	r0, r6
   d92f8:	ebc6 020a 	rsb	r2, r6, sl
   d92fc:	1ca9      	adds	r1, r5, #2
   d92fe:	4420      	add	r0, r4
   d9300:	f002 f875 	bl	db3ee <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   d9304:	4642      	mov	r2, r8
   d9306:	a903      	add	r1, sp, #12
   d9308:	4628      	mov	r0, r5
   d930a:	f002 f870 	bl	db3ee <memcpy>
            len = strlen(format_str);
   d930e:	4620      	mov	r0, r4
   d9310:	f002 fdea 	bl	dbee8 <strlen>
   d9314:	4680      	mov	r8, r0
   d9316:	3501      	adds	r5, #1
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   d9318:	e7de      	b.n	d92d8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x54>
            len = strlen(format_str);
        }
    }

    char buf[50];
    strftime(buf, 50, format_str, calendar_time);
   d931a:	464b      	mov	r3, r9
   d931c:	4622      	mov	r2, r4
   d931e:	2132      	movs	r1, #50	; 0x32
   d9320:	a807      	add	r0, sp, #28
   d9322:	f002 f92d 	bl	db580 <strftime>
    return String(buf);
   d9326:	a907      	add	r1, sp, #28
   d9328:	4638      	mov	r0, r7
   d932a:	f7ff fcb0 	bl	d8c8e <_ZN6StringC1EPK19__FlashStringHelper>
}
   d932e:	4638      	mov	r0, r7
   d9330:	b024      	add	sp, #144	; 0x90
   d9332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9336:	bf00      	nop
   d9338:	000dd2e9 	.word	0x000dd2e9
   d933c:	000dcb10 	.word	0x000dcb10

000d9340 <_ZN9TimeClass6formatElPKc>:
        ascstr[len-1] = 0; // remove final newline
	return String(ascstr);
}

String TimeClass::format(time_t t, const char* format_spec)
{
   d9340:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d9342:	4605      	mov	r5, r0
   d9344:	9201      	str	r2, [sp, #4]
    if (format_spec==NULL)
   d9346:	461c      	mov	r4, r3
   d9348:	b913      	cbnz	r3, d9350 <_ZN9TimeClass6formatElPKc+0x10>
        format_spec = this->format_spec;
   d934a:	4b12      	ldr	r3, [pc, #72]	; (d9394 <_ZN9TimeClass6formatElPKc+0x54>)
   d934c:	681c      	ldr	r4, [r3, #0]

    if (!format_spec || !strcmp(format_spec,TIME_FORMAT_DEFAULT)) {
   d934e:	b12c      	cbz	r4, d935c <_ZN9TimeClass6formatElPKc+0x1c>
   d9350:	4b11      	ldr	r3, [pc, #68]	; (d9398 <_ZN9TimeClass6formatElPKc+0x58>)
   d9352:	4620      	mov	r0, r4
   d9354:	6819      	ldr	r1, [r3, #0]
   d9356:	f002 f885 	bl	db464 <strcmp>
   d935a:	b920      	cbnz	r0, d9366 <_ZN9TimeClass6formatElPKc+0x26>
        return timeStr(t);
   d935c:	9901      	ldr	r1, [sp, #4]
   d935e:	4628      	mov	r0, r5
   d9360:	f7ff ff6e 	bl	d9240 <_ZN9TimeClass7timeStrEl>
   d9364:	e013      	b.n	d938e <_ZN9TimeClass6formatElPKc+0x4e>
    }
    t += time_zone_cache;
   d9366:	4f0d      	ldr	r7, [pc, #52]	; (d939c <_ZN9TimeClass6formatElPKc+0x5c>)
    t += dst_current_cache;
   d9368:	9a01      	ldr	r2, [sp, #4]
   d936a:	683b      	ldr	r3, [r7, #0]
   d936c:	4e0c      	ldr	r6, [pc, #48]	; (d93a0 <_ZN9TimeClass6formatElPKc+0x60>)
   d936e:	441a      	add	r2, r3
   d9370:	6833      	ldr	r3, [r6, #0]
   d9372:	a802      	add	r0, sp, #8
   d9374:	4413      	add	r3, r2
   d9376:	f840 3d04 	str.w	r3, [r0, #-4]!
    tm* calendar_time = localtime(&t);
   d937a:	f001 ff31 	bl	db1e0 <localtime>
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
   d937e:	683a      	ldr	r2, [r7, #0]
   d9380:	6833      	ldr	r3, [r6, #0]
   d9382:	4601      	mov	r1, r0
   d9384:	4413      	add	r3, r2
   d9386:	4628      	mov	r0, r5
   d9388:	4622      	mov	r2, r4
   d938a:	f7ff ff7b 	bl	d9284 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
}
   d938e:	4628      	mov	r0, r5
   d9390:	b003      	add	sp, #12
   d9392:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9394:	2003e57c 	.word	0x2003e57c
   d9398:	2003dc0c 	.word	0x2003dc0c
   d939c:	2003e588 	.word	0x2003e588
   d93a0:	2003e580 	.word	0x2003e580

000d93a4 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d93a4:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d93a6:	2000      	movs	r0, #0
   d93a8:	f7fe fb7e 	bl	d7aa8 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d93ac:	4604      	mov	r4, r0
   d93ae:	b968      	cbnz	r0, d93cc <_ZN9TimeClass7isValidEv+0x28>
    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d93b0:	f7fe fcba 	bl	d7d28 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d93b4:	2801      	cmp	r0, #1
   d93b6:	d10b      	bne.n	d93d0 <_ZN9TimeClass7isValidEv+0x2c>
   d93b8:	4620      	mov	r0, r4
   d93ba:	f7fe fcdd 	bl	d7d78 <system_thread_get_state>
   d93be:	b938      	cbnz	r0, d93d0 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d93c0:	f7ff feca 	bl	d9158 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d93c4:	b930      	cbnz	r0, d93d4 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d93c6:	f7fe fc37 	bl	d7c38 <spark_process>
   d93ca:	e7f9      	b.n	d93c0 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d93cc:	2001      	movs	r0, #1
   d93ce:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d93d0:	2000      	movs	r0, #0
   d93d2:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d93d4:	f7ff fec0 	bl	d9158 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d93d8:	2000      	movs	r0, #0
   d93da:	f7fe fb65 	bl	d7aa8 <HAL_RTC_Time_Is_Valid>
   d93de:	3000      	adds	r0, #0
   d93e0:	bf18      	it	ne
   d93e2:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d93e4:	bd10      	pop	{r4, pc}

000d93e6 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d93e6:	b508      	push	{r3, lr}
    (void)isValid();
   d93e8:	f7ff ffdc 	bl	d93a4 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d93ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d93f0:	f7fe bb32 	b.w	d7a58 <HAL_RTC_Get_UnixTime>

000d93f4 <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
   d93f4:	b508      	push	{r3, lr}
	return hour(now());
   d93f6:	f7ff fff6 	bl	d93e6 <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d93fa:	f7ff fe7b 	bl	d90f4 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
   d93fe:	4b01      	ldr	r3, [pc, #4]	; (d9404 <_ZN9TimeClass4hourEv+0x10>)
   d9400:	6898      	ldr	r0, [r3, #8]
   d9402:	bd08      	pop	{r3, pc}
   d9404:	2003e554 	.word	0x2003e554

000d9408 <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
   d9408:	b508      	push	{r3, lr}
	return minute(now());
   d940a:	f7ff ffec 	bl	d93e6 <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d940e:	f7ff fe71 	bl	d90f4 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
   d9412:	4b01      	ldr	r3, [pc, #4]	; (d9418 <_ZN9TimeClass6minuteEv+0x10>)
   d9414:	6858      	ldr	r0, [r3, #4]
   d9416:	bd08      	pop	{r3, pc}
   d9418:	2003e554 	.word	0x2003e554

000d941c <_ZN9TimeClass6secondEv>:
	return calendar_time_cache.tm_min;
}

/* current seconds */
int TimeClass::second()
{
   d941c:	b508      	push	{r3, lr}
	return second(now());
   d941e:	f7ff ffe2 	bl	d93e6 <_ZN9TimeClass3nowEv>
}

/* the second for the given time */
int TimeClass::second(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d9422:	f7ff fe67 	bl	d90f4 <_ZL22Refresh_UnixTime_Cachel>

/* current seconds */
int TimeClass::second()
{
	return second(now());
}
   d9426:	4b01      	ldr	r3, [pc, #4]	; (d942c <_ZN9TimeClass6secondEv+0x10>)
   d9428:	6818      	ldr	r0, [r3, #0]
   d942a:	bd08      	pop	{r3, pc}
   d942c:	2003e554 	.word	0x2003e554

000d9430 <_ZN9TimeClass3dayEv>:
	return calendar_time_cache.tm_sec;
}

/* current day */
int TimeClass::day()
{
   d9430:	b508      	push	{r3, lr}
	return day(now());
   d9432:	f7ff ffd8 	bl	d93e6 <_ZN9TimeClass3nowEv>
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d9436:	f7ff fe5d 	bl	d90f4 <_ZL22Refresh_UnixTime_Cachel>

/* current day */
int TimeClass::day()
{
	return day(now());
}
   d943a:	4b01      	ldr	r3, [pc, #4]	; (d9440 <_ZN9TimeClass3dayEv+0x10>)
   d943c:	68d8      	ldr	r0, [r3, #12]
   d943e:	bd08      	pop	{r3, pc}
   d9440:	2003e554 	.word	0x2003e554

000d9444 <_ZN9TimeClass5monthEv>:
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
}

/* current month */
int TimeClass::month()
{
   d9444:	b508      	push	{r3, lr}
	return month(now());
   d9446:	f7ff ffce 	bl	d93e6 <_ZN9TimeClass3nowEv>
}
   d944a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

/* current month */
int TimeClass::month()
{
	return month(now());
   d944e:	f7ff beb1 	b.w	d91b4 <_ZN9TimeClass5monthEl>
	...

000d9454 <_ZN9TimeClass4yearEv>:
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
}

/* current four digit year */
int TimeClass::year()
{
   d9454:	b508      	push	{r3, lr}
	return year(now());
   d9456:	f7ff ffc6 	bl	d93e6 <_ZN9TimeClass3nowEv>
}

/* the year for the given time */
int TimeClass::year(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d945a:	f7ff fe4b 	bl	d90f4 <_ZL22Refresh_UnixTime_Cachel>

/* current four digit year */
int TimeClass::year()
{
	return year(now());
}
   d945e:	4b01      	ldr	r3, [pc, #4]	; (d9464 <_ZN9TimeClass4yearEv+0x10>)
   d9460:	6958      	ldr	r0, [r3, #20]
   d9462:	bd08      	pop	{r3, pc}
   d9464:	2003e554 	.word	0x2003e554

000d9468 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d9468:	4b02      	ldr	r3, [pc, #8]	; (d9474 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d946a:	681a      	ldr	r2, [r3, #0]
   d946c:	4b02      	ldr	r3, [pc, #8]	; (d9478 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d946e:	601a      	str	r2, [r3, #0]
   d9470:	4770      	bx	lr
   d9472:	bf00      	nop
   d9474:	2003dc0c 	.word	0x2003dc0c
   d9478:	2003e57c 	.word	0x2003e57c

000d947c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d947c:	4b01      	ldr	r3, [pc, #4]	; (d9484 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d947e:	4a02      	ldr	r2, [pc, #8]	; (d9488 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d9480:	601a      	str	r2, [r3, #0]
   d9482:	4770      	bx	lr
   d9484:	2003e58c 	.word	0x2003e58c
   d9488:	000dcbaa 	.word	0x000dcbaa

000d948c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d948c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d948e:	4606      	mov	r6, r0
   d9490:	460d      	mov	r5, r1
   d9492:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d9494:	2400      	movs	r4, #0
  while (size--) {
   d9496:	42bd      	cmp	r5, r7
   d9498:	d00c      	beq.n	d94b4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d949a:	6833      	ldr	r3, [r6, #0]
   d949c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d94a0:	689b      	ldr	r3, [r3, #8]
   d94a2:	4630      	mov	r0, r6
   d94a4:	4798      	blx	r3
     if (chunk>=0)
   d94a6:	2800      	cmp	r0, #0
   d94a8:	db01      	blt.n	d94ae <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d94aa:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d94ac:	e7f3      	b.n	d9496 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d94ae:	2c00      	cmp	r4, #0
   d94b0:	bf08      	it	eq
   d94b2:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d94b4:	4620      	mov	r0, r4
   d94b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d94b8 <_ZN5Print5printEPKc>:
   d94b8:	b508      	push	{r3, lr}
   d94ba:	f7fc fc6d 	bl	d5d98 <_ZN5Print5writeEPKc>
   d94be:	bd08      	pop	{r3, pc}

000d94c0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d94c0:	6803      	ldr	r3, [r0, #0]
   d94c2:	689b      	ldr	r3, [r3, #8]
   d94c4:	4718      	bx	r3

000d94c6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d94c6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d94c8:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d94ca:	4605      	mov	r5, r0
  size_t n = print('\r');
   d94cc:	f7ff fff8 	bl	d94c0 <_ZN5Print5printEc>
  n += print('\n');
   d94d0:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d94d2:	4604      	mov	r4, r0
  n += print('\n');
   d94d4:	4628      	mov	r0, r5
   d94d6:	f7ff fff3 	bl	d94c0 <_ZN5Print5printEc>
  return n;
}
   d94da:	4420      	add	r0, r4
   d94dc:	bd38      	pop	{r3, r4, r5, pc}

000d94de <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d94de:	b530      	push	{r4, r5, lr}
   d94e0:	b08b      	sub	sp, #44	; 0x2c
   d94e2:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d94e4:	2100      	movs	r1, #0
   d94e6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d94ea:	2a01      	cmp	r2, #1
   d94ec:	bf98      	it	ls
   d94ee:	220a      	movls	r2, #10
   d94f0:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d94f4:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d94f8:	fb05 3312 	mls	r3, r5, r2, r3
   d94fc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d9500:	2b09      	cmp	r3, #9
   d9502:	bf94      	ite	ls
   d9504:	3330      	addls	r3, #48	; 0x30
   d9506:	3337      	addhi	r3, #55	; 0x37
   d9508:	b2db      	uxtb	r3, r3
   d950a:	4621      	mov	r1, r4
   d950c:	f804 3901 	strb.w	r3, [r4], #-1
   d9510:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d9512:	2d00      	cmp	r5, #0
   d9514:	d1ee      	bne.n	d94f4 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d9516:	f7fc fc3f 	bl	d5d98 <_ZN5Print5writeEPKc>
}
   d951a:	b00b      	add	sp, #44	; 0x2c
   d951c:	bd30      	pop	{r4, r5, pc}

000d951e <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d951e:	b410      	push	{r4}
  if (base == 0) return write(n);
   d9520:	b92a      	cbnz	r2, d952e <_ZN5Print5printEmi+0x10>
   d9522:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d9524:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d9528:	689b      	ldr	r3, [r3, #8]
   d952a:	b2c9      	uxtb	r1, r1
   d952c:	4718      	bx	r3
  else return printNumber(n, base);
   d952e:	b2d2      	uxtb	r2, r2
}
   d9530:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d9534:	f7ff bfd3 	b.w	d94de <_ZN5Print11printNumberEmh>

000d9538 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d9538:	f7ff bff1 	b.w	d951e <_ZN5Print5printEmi>

000d953c <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d953c:	b40c      	push	{r2, r3}
   d953e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d9542:	b087      	sub	sp, #28
   d9544:	af00      	add	r7, sp, #0
   d9546:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d954a:	4605      	mov	r5, r0
   d954c:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d9550:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d9552:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d9554:	4623      	mov	r3, r4
   d9556:	464a      	mov	r2, r9
   d9558:	2114      	movs	r1, #20
   d955a:	1d38      	adds	r0, r7, #4
   d955c:	f7fe fc7a 	bl	d7e54 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d9560:	2813      	cmp	r0, #19
   d9562:	d805      	bhi.n	d9570 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d9564:	1d39      	adds	r1, r7, #4
   d9566:	4628      	mov	r0, r5
   d9568:	f7fc fc16 	bl	d5d98 <_ZN5Print5writeEPKc>
   d956c:	4604      	mov	r4, r0
   d956e:	e013      	b.n	d9598 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d9570:	f100 0308 	add.w	r3, r0, #8
   d9574:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d9578:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d957a:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d957e:	1c41      	adds	r1, r0, #1
   d9580:	4623      	mov	r3, r4
   d9582:	464a      	mov	r2, r9
   d9584:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d9586:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d9588:	f7fe fc64 	bl	d7e54 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d958c:	4669      	mov	r1, sp
   d958e:	4628      	mov	r0, r5
   d9590:	f7fc fc02 	bl	d5d98 <_ZN5Print5writeEPKc>
   d9594:	4604      	mov	r4, r0
   d9596:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d9598:	b11e      	cbz	r6, d95a2 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d959a:	4628      	mov	r0, r5
   d959c:	f7ff ff93 	bl	d94c6 <_ZN5Print7printlnEv>
   d95a0:	4404      	add	r4, r0
    return n;
}
   d95a2:	4620      	mov	r0, r4
   d95a4:	371c      	adds	r7, #28
   d95a6:	46bd      	mov	sp, r7
   d95a8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d95ac:	b002      	add	sp, #8
   d95ae:	4770      	bx	lr

000d95b0 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d95b0:	4770      	bx	lr

000d95b2 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d95b2:	2000      	movs	r0, #0
   d95b4:	4770      	bx	lr

000d95b6 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d95b6:	b510      	push	{r4, lr}
   d95b8:	2114      	movs	r1, #20
   d95ba:	4604      	mov	r4, r0
   d95bc:	f000 fccd 	bl	d9f5a <_ZdlPvj>
   d95c0:	4620      	mov	r0, r4
   d95c2:	bd10      	pop	{r4, pc}

000d95c4 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d95c4:	f7fa bd6b 	b.w	d409e <_ZdlPv>

000d95c8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.101>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d95c8:	b508      	push	{r3, lr}
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
   d95ca:	200a      	movs	r0, #10
   d95cc:	4a02      	ldr	r2, [pc, #8]	; (d95d8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.101+0x10>)
   d95ce:	2100      	movs	r1, #0
   d95d0:	f7fe fb0a 	bl	d7be8 <panic_>
    }
}
   d95d4:	bd08      	pop	{r3, pc}
   d95d6:	bf00      	nop
   d95d8:	000d7a29 	.word	0x000d7a29

000d95dc <_ZN8particle3ble13WiringBleLockC1Ev>:

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d95dc:	b510      	push	{r4, lr}
            locked_(false) {
   d95de:	2300      	movs	r3, #0
   d95e0:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d95e2:	4b04      	ldr	r3, [pc, #16]	; (d95f4 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d95e4:	4604      	mov	r4, r0
   d95e6:	6818      	ldr	r0, [r3, #0]
   d95e8:	f7fe f9da 	bl	d79a0 <os_mutex_recursive_lock>
        lock.locked_ = false;
    }

    void lock() {
        mutex_.lock();
        locked_ = true;
   d95ec:	2301      	movs	r3, #1
   d95ee:	7023      	strb	r3, [r4, #0]
class WiringBleLock {
public:
    WiringBleLock() :
            locked_(false) {
        lock();
    }
   d95f0:	4620      	mov	r0, r4
   d95f2:	bd10      	pop	{r4, pc}
   d95f4:	2003e598 	.word	0x2003e598

000d95f8 <_ZN8particle3ble13WiringBleLockD1Ev>:

    ~WiringBleLock() {
   d95f8:	b510      	push	{r4, lr}
        if (locked_) {
   d95fa:	7803      	ldrb	r3, [r0, #0]
    WiringBleLock() :
            locked_(false) {
        lock();
    }

    ~WiringBleLock() {
   d95fc:	4604      	mov	r4, r0
        if (locked_) {
   d95fe:	b11b      	cbz	r3, d9608 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d9600:	4b02      	ldr	r3, [pc, #8]	; (d960c <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   d9602:	6818      	ldr	r0, [r3, #0]
   d9604:	f7fe f9d4 	bl	d79b0 <os_mutex_recursive_unlock>
            unlock();
        }
    }
   d9608:	4620      	mov	r0, r4
   d960a:	bd10      	pop	{r4, pc}
   d960c:	2003e598 	.word	0x2003e598

000d9610 <_ZNK8particle10BleAddresseqERKS0_>:
BleAddress& BleAddress::operator=(const uint8_t addr[BLE_SIG_ADDR_LEN]) {
    memcpy(address_.addr, addr, BLE_SIG_ADDR_LEN);
    return *this;
}

bool BleAddress::operator==(const BleAddress& addr) const {
   d9610:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d9612:	7982      	ldrb	r2, [r0, #6]
   d9614:	798b      	ldrb	r3, [r1, #6]
   d9616:	429a      	cmp	r2, r3
   d9618:	d106      	bne.n	d9628 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d961a:	2206      	movs	r2, #6
   d961c:	f001 fed8 	bl	db3d0 <memcmp>
   d9620:	fab0 f080 	clz	r0, r0
   d9624:	0940      	lsrs	r0, r0, #5
   d9626:	bd08      	pop	{r3, pc}
        return true;
    }
    return false;
   d9628:	2000      	movs	r0, #0
}
   d962a:	bd08      	pop	{r3, pc}

000d962c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    void onDisconnectedCallback(BleOnDisconnectedCallback callback, void* context) {
        disconnectedCb_ = callback;
        disconnectedContext_ = context;
    }

    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d962c:	b510      	push	{r4, lr}
   d962e:	6983      	ldr	r3, [r0, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d9630:	69c2      	ldr	r2, [r0, #28]
   d9632:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d9636:	4293      	cmp	r3, r2
   d9638:	4618      	mov	r0, r3
   d963a:	d006      	beq.n	d964a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d963c:	6804      	ldr	r4, [r0, #0]
   d963e:	8824      	ldrh	r4, [r4, #0]
   d9640:	428c      	cmp	r4, r1
   d9642:	f103 0308 	add.w	r3, r3, #8
   d9646:	d1f6      	bne.n	d9636 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
   d9648:	bd10      	pop	{r4, pc}
                return &peer;
            }
        }
        return nullptr;
   d964a:	2000      	movs	r0, #0
    }
   d964c:	bd10      	pop	{r4, pc}

000d964e <_ZNK8particle13BlePeerDevice7addressEv>:

void BlePeerDevice::bind(const BleAddress& address) const {
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   d964e:	b510      	push	{r4, lr}
    return impl()->address();
   d9650:	680a      	ldr	r2, [r1, #0]
   d9652:	f852 3f02 	ldr.w	r3, [r2, #2]!
   d9656:	6003      	str	r3, [r0, #0]
   d9658:	6853      	ldr	r3, [r2, #4]
   d965a:	6043      	str	r3, [r0, #4]
}
   d965c:	bd10      	pop	{r4, pc}

000d965e <_ZNK8particle13BlePeerDeviceeqERKS0_>:

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d965e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d9660:	6802      	ldr	r2, [r0, #0]
   d9662:	680b      	ldr	r3, [r1, #0]
   d9664:	8812      	ldrh	r2, [r2, #0]
   d9666:	881b      	ldrh	r3, [r3, #0]
   d9668:	429a      	cmp	r2, r3

BleAddress BlePeerDevice::address() const {
    return impl()->address();
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d966a:	460c      	mov	r4, r1
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d966c:	d10c      	bne.n	d9688 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2a>
   d966e:	4601      	mov	r1, r0
   d9670:	4668      	mov	r0, sp
   d9672:	f7ff ffec 	bl	d964e <_ZNK8particle13BlePeerDevice7addressEv>
   d9676:	4621      	mov	r1, r4
   d9678:	a802      	add	r0, sp, #8
   d967a:	f7ff ffe8 	bl	d964e <_ZNK8particle13BlePeerDevice7addressEv>
   d967e:	a902      	add	r1, sp, #8
   d9680:	4668      	mov	r0, sp
   d9682:	f7ff ffc5 	bl	d9610 <_ZNK8particle10BleAddresseqERKS0_>
   d9686:	b900      	cbnz	r0, d968a <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2c>
        return true;
    }
    return false;
   d9688:	2000      	movs	r0, #0
}
   d968a:	b004      	add	sp, #16
   d968c:	bd10      	pop	{r4, pc}
	...

000d9690 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d9690:	b510      	push	{r4, lr}
   d9692:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d9694:	2034      	movs	r0, #52	; 0x34
   d9696:	f7fa fd00 	bl	d409a <_Znwj>
   d969a:	4601      	mov	r1, r0
   d969c:	b168      	cbz	r0, d96ba <_ZN8particle14BleLocalDeviceC1Ev+0x2a>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d969e:	2300      	movs	r3, #0
   d96a0:	6003      	str	r3, [r0, #0]
   d96a2:	6043      	str	r3, [r0, #4]
   d96a4:	6083      	str	r3, [r0, #8]
   d96a6:	60c3      	str	r3, [r0, #12]
   d96a8:	6103      	str	r3, [r0, #16]
   d96aa:	6143      	str	r3, [r0, #20]
   d96ac:	6183      	str	r3, [r0, #24]
   d96ae:	61c3      	str	r3, [r0, #28]
   d96b0:	6203      	str	r3, [r0, #32]
public:
    BleLocalDeviceImpl()
            : connectedCb_(nullptr),
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
   d96b2:	6243      	str	r3, [r0, #36]	; 0x24
   d96b4:	6283      	str	r3, [r0, #40]	; 0x28
   d96b6:	62c3      	str	r3, [r0, #44]	; 0x2c
   d96b8:	6303      	str	r3, [r0, #48]	; 0x30
   d96ba:	6021      	str	r1, [r4, #0]
/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d96bc:	b919      	cbnz	r1, d96c6 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   d96be:	4a0a      	ldr	r2, [pc, #40]	; (d96e8 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d96c0:	200a      	movs	r0, #10
   d96c2:	f7fe fa91 	bl	d7be8 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d96c6:	2000      	movs	r0, #0
   d96c8:	f7fe f97a 	bl	d79c0 <hal_ble_stack_init>
   d96cc:	b120      	cbz	r0, d96d8 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   d96ce:	4a06      	ldr	r2, [pc, #24]	; (d96e8 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d96d0:	2100      	movs	r1, #0
   d96d2:	200a      	movs	r0, #10
   d96d4:	f7fe fa88 	bl	d7be8 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d96d8:	2200      	movs	r2, #0
   d96da:	6821      	ldr	r1, [r4, #0]
   d96dc:	4803      	ldr	r0, [pc, #12]	; (d96ec <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   d96de:	f7fe f989 	bl	d79f4 <hal_ble_set_callback_on_periph_link_events>
}
   d96e2:	4620      	mov	r0, r4
   d96e4:	bd10      	pop	{r4, pc}
   d96e6:	bf00      	nop
   d96e8:	000d7a29 	.word	0x000d7a29
   d96ec:	000d99cd 	.word	0x000d99cd

000d96f0 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d96f0:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d96f2:	4c0a      	ldr	r4, [pc, #40]	; (d971c <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   d96f4:	6823      	ldr	r3, [r4, #0]
   d96f6:	07db      	lsls	r3, r3, #31
   d96f8:	d40e      	bmi.n	d9718 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d96fa:	4620      	mov	r0, r4
   d96fc:	f7fa fcd3 	bl	d40a6 <__cxa_guard_acquire>
   d9700:	b150      	cbz	r0, d9718 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d9702:	4807      	ldr	r0, [pc, #28]	; (d9720 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d9704:	f7ff ffc4 	bl	d9690 <_ZN8particle14BleLocalDeviceC1Ev>
   d9708:	4620      	mov	r0, r4
   d970a:	f7fa fcd1 	bl	d40b0 <__cxa_guard_release>
   d970e:	4a05      	ldr	r2, [pc, #20]	; (d9724 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d9710:	4905      	ldr	r1, [pc, #20]	; (d9728 <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d9712:	4803      	ldr	r0, [pc, #12]	; (d9720 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d9714:	f000 fc1c 	bl	d9f50 <__aeabi_atexit>
    return instance;
}
   d9718:	4801      	ldr	r0, [pc, #4]	; (d9720 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d971a:	bd10      	pop	{r4, pc}
   d971c:	2003e594 	.word	0x2003e594
   d9720:	2003e590 	.word	0x2003e590
   d9724:	2003dcc8 	.word	0x2003dcc8
   d9728:	000d9793 	.word	0x000d9793

000d972c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d972c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d972e:	6804      	ldr	r4, [r0, #0]
   d9730:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d9732:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d9734:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d9738:	42a6      	cmp	r6, r4
   d973a:	d004      	beq.n	d9746 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d973c:	1d20      	adds	r0, r4, #4
   d973e:	f7fb fb0d 	bl	d4d5c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d9742:	3408      	adds	r4, #8
   d9744:	e7f8      	b.n	d9738 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d9746:	6828      	ldr	r0, [r5, #0]
   d9748:	f7fe fb4c 	bl	d7de4 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d974c:	4628      	mov	r0, r5
   d974e:	bd70      	pop	{r4, r5, r6, pc}

000d9750 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d9750:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d9752:	6804      	ldr	r4, [r0, #0]
   d9754:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d9756:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d9758:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d975c:	42a6      	cmp	r6, r4
   d975e:	d004      	beq.n	d976a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d9760:	1d20      	adds	r0, r4, #4
   d9762:	f7fb fafb 	bl	d4d5c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d9766:	3408      	adds	r4, #8
   d9768:	e7f8      	b.n	d975c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d976a:	6828      	ldr	r0, [r5, #0]
   d976c:	f7fe fb3a 	bl	d7de4 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d9770:	4628      	mov	r0, r5
   d9772:	bd70      	pop	{r4, r5, r6, pc}

000d9774 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d9774:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d9776:	6904      	ldr	r4, [r0, #16]
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
    }

    ~BlePeerDeviceImpl() = default;
   d9778:	f104 0018 	add.w	r0, r4, #24
   d977c:	f7ff ffe8 	bl	d9750 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d9780:	f104 000c 	add.w	r0, r4, #12
   d9784:	f7ff ffd2 	bl	d972c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   d9788:	4620      	mov	r0, r4
   d978a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d978e:	f7fa bc86 	b.w	d409e <_ZdlPv>

000d9792 <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d9792:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d9794:	6804      	ldr	r4, [r0, #0]
   d9796:	4607      	mov	r7, r0
   d9798:	b1c4      	cbz	r4, d97cc <_ZN8particle14BleLocalDeviceD1Ev+0x3a>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d979a:	69a5      	ldr	r5, [r4, #24]
   d979c:	69e3      	ldr	r3, [r4, #28]
   d979e:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d97a2:	42ae      	cmp	r6, r5
   d97a4:	d004      	beq.n	d97b0 <_ZN8particle14BleLocalDeviceD1Ev+0x1e>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d97a6:	1d28      	adds	r0, r5, #4
   d97a8:	f7fb fad8 	bl	d4d5c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d97ac:	3508      	adds	r5, #8
   d97ae:	e7f8      	b.n	d97a2 <_ZN8particle14BleLocalDeviceD1Ev+0x10>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d97b0:	69a0      	ldr	r0, [r4, #24]
   d97b2:	f7fe fb17 	bl	d7de4 <free>
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
    }

    ~BleLocalDeviceImpl() = default;
   d97b6:	f104 000c 	add.w	r0, r4, #12
   d97ba:	f7ff ffc9 	bl	d9750 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d97be:	4620      	mov	r0, r4
   d97c0:	f7ff ffb4 	bl	d972c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d97c4:	2134      	movs	r1, #52	; 0x34
   d97c6:	4620      	mov	r0, r4
   d97c8:	f000 fbc7 	bl	d9f5a <_ZdlPvj>
   d97cc:	4638      	mov	r0, r7
   d97ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d97d0 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d97d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d97d2:	2500      	movs	r5, #0
   d97d4:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d97d6:	6045      	str	r5, [r0, #4]
   d97d8:	4606      	mov	r6, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d97da:	2024      	movs	r0, #36	; 0x24
   d97dc:	f7fa fc5d 	bl	d409a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d97e0:	4604      	mov	r4, r0
   d97e2:	b178      	cbz	r0, d9804 <_ZN8particle13BlePeerDeviceC1Ev+0x34>
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d97e4:	4603      	mov	r3, r0
   d97e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d97ea:	f823 2b02 	strh.w	r2, [r3], #2

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d97ee:	f8c0 5002 	str.w	r5, [r0, #2]
   d97f2:	605d      	str	r5, [r3, #4]
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d97f4:	7285      	strb	r5, [r0, #10]
   d97f6:	72c5      	strb	r5, [r0, #11]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d97f8:	60c5      	str	r5, [r0, #12]
   d97fa:	6105      	str	r5, [r0, #16]
   d97fc:	6145      	str	r5, [r0, #20]
   d97fe:	6185      	str	r5, [r0, #24]
   d9800:	61c5      	str	r5, [r0, #28]
   d9802:	6205      	str	r5, [r0, #32]
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d9804:	2300      	movs	r3, #0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d9806:	2014      	movs	r0, #20
   d9808:	9301      	str	r3, [sp, #4]
   d980a:	f7fa fc46 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d980e:	4603      	mov	r3, r0
   d9810:	b128      	cbz	r0, d981e <_ZN8particle13BlePeerDeviceC1Ev+0x4e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d9812:	2201      	movs	r2, #1
   d9814:	6042      	str	r2, [r0, #4]
   d9816:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d9818:	4a08      	ldr	r2, [pc, #32]	; (d983c <_ZN8particle13BlePeerDeviceC1Ev+0x6c>)
   d981a:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d981c:	6104      	str	r4, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d981e:	a802      	add	r0, sp, #8
   d9820:	6872      	ldr	r2, [r6, #4]
   d9822:	f840 2d04 	str.w	r2, [r0, #-4]!
	_M_pi = __tmp;
   d9826:	6073      	str	r3, [r6, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d9828:	6034      	str	r4, [r6, #0]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d982a:	f7fb fa97 	bl	d4d5c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
   d982e:	6833      	ldr	r3, [r6, #0]
   d9830:	b90b      	cbnz	r3, d9836 <_ZN8particle13BlePeerDeviceC1Ev+0x66>
   d9832:	f7ff fec9 	bl	d95c8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.101>
        SPARK_ASSERT(false);
    }
}
   d9836:	4630      	mov	r0, r6
   d9838:	b002      	add	sp, #8
   d983a:	bd70      	pop	{r4, r5, r6, pc}
   d983c:	000dcc20 	.word	0x000dcc20

000d9840 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv>:
    }
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
   d9840:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d9842:	6804      	ldr	r4, [r0, #0]
   d9844:	6843      	ldr	r3, [r0, #4]
    }
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
   d9846:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d9848:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d984c:	42a6      	cmp	r6, r4
   d984e:	d004      	beq.n	d985a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv+0x1a>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d9850:	1d20      	adds	r0, r4, #4
   d9852:	f7fb fa83 	bl	d4d5c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d9856:	3408      	adds	r4, #8
   d9858:	e7f8      	b.n	d984c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv+0xc>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d985a:	2300      	movs	r3, #0
   d985c:	606b      	str	r3, [r5, #4]
   d985e:	bd70      	pop	{r4, r5, r6, pc}

000d9860 <_ZNK8particle14BleLocalDevice3offEv>:
    WiringBleLock lk;
    CHECK(hal_ble_stack_init(nullptr));
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::off() const {
   d9860:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d9862:	4605      	mov	r5, r0
    WiringBleLock lk;
   d9864:	a801      	add	r0, sp, #4
   d9866:	f7ff feb9 	bl	d95dc <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(hal_ble_stack_deinit(nullptr));
   d986a:	2000      	movs	r0, #0
   d986c:	f7fe f8b0 	bl	d79d0 <hal_ble_stack_deinit>
   d9870:	2800      	cmp	r0, #0
   d9872:	db05      	blt.n	d9880 <_ZNK8particle14BleLocalDevice3offEv+0x20>
    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
    }

    Vector<BlePeerDevice>& peers() {
        return peers_;
   d9874:	6828      	ldr	r0, [r5, #0]
}

int BleLocalDevice::off() const {
    WiringBleLock lk;
    CHECK(hal_ble_stack_deinit(nullptr));
    impl()->peers().clear();
   d9876:	3018      	adds	r0, #24
   d9878:	f7ff ffe2 	bl	d9840 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv>
    return SYSTEM_ERROR_NONE;
   d987c:	2400      	movs	r4, #0
   d987e:	e000      	b.n	d9882 <_ZNK8particle14BleLocalDevice3offEv+0x22>
   d9880:	4604      	mov	r4, r0
    CHECK(hal_ble_stack_init(nullptr));
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::off() const {
    WiringBleLock lk;
   d9882:	a801      	add	r0, sp, #4
   d9884:	f7ff feb8 	bl	d95f8 <_ZN8particle3ble13WiringBleLockD1Ev>
    CHECK(hal_ble_stack_deinit(nullptr));
    impl()->peers().clear();
    return SYSTEM_ERROR_NONE;
}
   d9888:	4620      	mov	r0, r4
   d988a:	b003      	add	sp, #12
   d988c:	bd30      	pop	{r4, r5, pc}

000d988e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d988e:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d9890:	b570      	push	{r4, r5, r6, lr}
   d9892:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d9894:	d91a      	bls.n	d98cc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x3e>
   d9896:	4290      	cmp	r0, r2
   d9898:	d219      	bcs.n	d98ce <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x40>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d989a:	f1a1 0608 	sub.w	r6, r1, #8
   d989e:	1a51      	subs	r1, r2, r1
   d98a0:	3904      	subs	r1, #4
   d98a2:	1f15      	subs	r5, r2, #4
   d98a4:	1844      	adds	r4, r0, r1
            for (; end != p; --end, --dest) {
   d98a6:	1f2b      	subs	r3, r5, #4
   d98a8:	429e      	cmp	r6, r3
   d98aa:	d025      	beq.n	d98f8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*end));
   d98ac:	2c04      	cmp	r4, #4
   d98ae:	d007      	beq.n	d98c0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x32>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d98b0:	f855 3c04 	ldr.w	r3, [r5, #-4]
   d98b4:	f844 3c04 	str.w	r3, [r4, #-4]
   d98b8:	4629      	mov	r1, r5
   d98ba:	4620      	mov	r0, r4
   d98bc:	f7fe fd95 	bl	d83ea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d98c0:	4628      	mov	r0, r5
   d98c2:	f7fb fa4b 	bl	d4d5c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d98c6:	3d08      	subs	r5, #8
   d98c8:	3c08      	subs	r4, #8
   d98ca:	e7ec      	b.n	d98a6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x18>
                end->~T();
            }
        } else if (dest != p) {
   d98cc:	d014      	beq.n	d98f8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
   d98ce:	1d0c      	adds	r4, r1, #4
   d98d0:	1d06      	adds	r6, r0, #4
            for (; p != end; ++p, ++dest) {
   d98d2:	1f23      	subs	r3, r4, #4
   d98d4:	429d      	cmp	r5, r3
   d98d6:	d00f      	beq.n	d98f8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*p));
   d98d8:	2e04      	cmp	r6, #4
   d98da:	d007      	beq.n	d98ec <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x5e>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d98dc:	f854 3c04 	ldr.w	r3, [r4, #-4]
   d98e0:	f846 3c04 	str.w	r3, [r6, #-4]
   d98e4:	4621      	mov	r1, r4
   d98e6:	4630      	mov	r0, r6
   d98e8:	f7fe fd7f 	bl	d83ea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d98ec:	4620      	mov	r0, r4
   d98ee:	f7fb fa35 	bl	d4d5c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d98f2:	3408      	adds	r4, #8
   d98f4:	3608      	adds	r6, #8
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d98f6:	e7ec      	b.n	d98d2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x44>
   d98f8:	bd70      	pop	{r4, r5, r6, pc}

000d98fa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d98fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d98fe:	6804      	ldr	r4, [r0, #0]
   d9900:	6843      	ldr	r3, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d9902:	4605      	mov	r5, r0
   d9904:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d9906:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d990a:	42a7      	cmp	r7, r4
   d990c:	d018      	beq.n	d9940 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x46>
            if (*p == value) {
   d990e:	4641      	mov	r1, r8
   d9910:	4620      	mov	r0, r4
   d9912:	f7ff fea4 	bl	d965e <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d9916:	4606      	mov	r6, r0
   d9918:	b908      	cbnz	r0, d991e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d991a:	3408      	adds	r4, #8
   d991c:	e7f5      	b.n	d990a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
   d991e:	b18c      	cbz	r4, d9944 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4a>
   d9920:	1d20      	adds	r0, r4, #4
   d9922:	f7fb fa1b 	bl	d4d5c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d9926:	682b      	ldr	r3, [r5, #0]
   d9928:	686a      	ldr	r2, [r5, #4]
   d992a:	f104 0108 	add.w	r1, r4, #8
   d992e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d9932:	4620      	mov	r0, r4
   d9934:	f7ff ffab 	bl	d988e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d9938:	686b      	ldr	r3, [r5, #4]
   d993a:	3b01      	subs	r3, #1
   d993c:	606b      	str	r3, [r5, #4]
    return true;
   d993e:	e002      	b.n	d9946 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d9940:	2600      	movs	r6, #0
   d9942:	e000      	b.n	d9946 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>
   d9944:	4626      	mov	r6, r4
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
    return true;
}
   d9946:	4630      	mov	r0, r6
   d9948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d994c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d994c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d994e:	4604      	mov	r4, r0
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d9950:	f851 3b04 	ldr.w	r3, [r1], #4
    return insert(size_, std::move(value));
   d9954:	6847      	ldr	r7, [r0, #4]
   d9956:	9300      	str	r3, [sp, #0]
   d9958:	a801      	add	r0, sp, #4
   d995a:	f7fe fd46 	bl	d83ea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d995e:	6866      	ldr	r6, [r4, #4]
   d9960:	68a3      	ldr	r3, [r4, #8]
   d9962:	429e      	cmp	r6, r3
   d9964:	db14      	blt.n	d9990 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x44>
   d9966:	3601      	adds	r6, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d9968:	2e00      	cmp	r6, #0
   d996a:	dd0b      	ble.n	d9984 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x38>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d996c:	00f0      	lsls	r0, r6, #3
   d996e:	f7fe fa31 	bl	d7dd4 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d9972:	4605      	mov	r5, r0
   d9974:	b318      	cbz	r0, d99be <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x72>
                return false;
            }
            move(d, data_, data_ + size_);
   d9976:	e894 0006 	ldmia.w	r4, {r1, r2}
   d997a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d997e:	f7ff ff86 	bl	d988e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d9982:	e000      	b.n	d9986 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d9984:	2500      	movs	r5, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d9986:	6820      	ldr	r0, [r4, #0]
   d9988:	f7fe fa2c 	bl	d7de4 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d998c:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d998e:	60a6      	str	r6, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d9990:	6826      	ldr	r6, [r4, #0]
    move(p + 1, p, data_ + size_);
   d9992:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d9994:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
    move(p + 1, p, data_ + size_);
   d9998:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
   d999c:	4629      	mov	r1, r5
   d999e:	f105 0008 	add.w	r0, r5, #8
   d99a2:	f7ff ff74 	bl	d988e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d99a6:	b135      	cbz	r5, d99b6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6a>
   d99a8:	9b00      	ldr	r3, [sp, #0]
   d99aa:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
   d99ae:	a901      	add	r1, sp, #4
   d99b0:	1d28      	adds	r0, r5, #4
   d99b2:	f7fe fd1a 	bl	d83ea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    ++size_;
   d99b6:	6863      	ldr	r3, [r4, #4]
   d99b8:	3301      	adds	r3, #1
   d99ba:	6063      	str	r3, [r4, #4]
   d99bc:	2501      	movs	r5, #1
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d99be:	a801      	add	r0, sp, #4
   d99c0:	f7fb f9cc 	bl	d4d5c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d99c4:	4628      	mov	r0, r5
   d99c6:	b003      	add	sp, #12
   d99c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d99cc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d99cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d99d0:	4604      	mov	r4, r0
   d99d2:	b08e      	sub	sp, #56	; 0x38
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d99d4:	a803      	add	r0, sp, #12
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d99d6:	460d      	mov	r5, r1
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d99d8:	f7ff fe00 	bl	d95dc <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d99dc:	6823      	ldr	r3, [r4, #0]
   d99de:	2b03      	cmp	r3, #3
   d99e0:	d002      	beq.n	d99e8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
   d99e2:	2b04      	cmp	r3, #4
   d99e4:	d042      	beq.n	d9a6c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xa0>
   d99e6:	e087      	b.n	d9af8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
   d99e8:	a804      	add	r0, sp, #16
   d99ea:	f7ff fef1 	bl	d97d0 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d99ee:	9b04      	ldr	r3, [sp, #16]
   d99f0:	8922      	ldrh	r2, [r4, #8]
   d99f2:	801a      	strh	r2, [r3, #0]
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d99f4:	6862      	ldr	r2, [r4, #4]
   d99f6:	9904      	ldr	r1, [sp, #16]
   d99f8:	f852 3f08 	ldr.w	r3, [r2, #8]!
   d99fc:	f8c1 3002 	str.w	r3, [r1, #2]
   d9a00:	6853      	ldr	r3, [r2, #4]
   d9a02:	f8c1 3006 	str.w	r3, [r1, #6]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d9a06:	a807      	add	r0, sp, #28
   d9a08:	9b04      	ldr	r3, [sp, #16]
   d9a0a:	9306      	str	r3, [sp, #24]
   d9a0c:	a905      	add	r1, sp, #20
   d9a0e:	f7fe fcec 	bl	d83ea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d9a12:	a906      	add	r1, sp, #24
   d9a14:	f105 0018 	add.w	r0, r5, #24
   d9a18:	f7ff ff98 	bl	d994c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d9a1c:	4604      	mov	r4, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d9a1e:	a807      	add	r0, sp, #28
   d9a20:	f7fb f99c 	bl	d4d5c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d9a24:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d9a26:	9306      	str	r3, [sp, #24]
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d9a28:	b974      	cbnz	r4, d9a48 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x7c>
                    LOG(ERROR, "Failed to append peer Central device.");
   d9a2a:	4b36      	ldr	r3, [pc, #216]	; (d9b04 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>)
   d9a2c:	9300      	str	r3, [sp, #0]
   d9a2e:	aa06      	add	r2, sp, #24
   d9a30:	4623      	mov	r3, r4
   d9a32:	4935      	ldr	r1, [pc, #212]	; (d9b08 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d9a34:	9407      	str	r4, [sp, #28]
   d9a36:	2032      	movs	r0, #50	; 0x32
   d9a38:	f7fe f8de 	bl	d7bf8 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d9a3c:	9b04      	ldr	r3, [sp, #16]
   d9a3e:	4621      	mov	r1, r4
   d9a40:	8818      	ldrh	r0, [r3, #0]
   d9a42:	f7fd ffcd 	bl	d79e0 <hal_ble_gap_disconnect>
   d9a46:	e00d      	b.n	d9a64 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    return;
                }
                LOG(TRACE, "Connected by Central device.");
   d9a48:	4a30      	ldr	r2, [pc, #192]	; (d9b0c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x140>)
   d9a4a:	9200      	str	r2, [sp, #0]
   d9a4c:	2300      	movs	r3, #0
   d9a4e:	aa06      	add	r2, sp, #24
   d9a50:	492d      	ldr	r1, [pc, #180]	; (d9b08 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d9a52:	9307      	str	r3, [sp, #28]
   d9a54:	2001      	movs	r0, #1
   d9a56:	f7fe f8cf 	bl	d7bf8 <log_message>
                if (impl->connectedCb_) {
   d9a5a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d9a5c:	b113      	cbz	r3, d9a64 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    impl->connectedCb_(peer, impl->connectedContext_);
   d9a5e:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   d9a60:	a804      	add	r0, sp, #16
   d9a62:	4798      	blx	r3
   d9a64:	a805      	add	r0, sp, #20
   d9a66:	f7fb f979 	bl	d4d5c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d9a6a:	e045      	b.n	d9af8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
                }
                break;
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d9a6c:	8921      	ldrh	r1, [r4, #8]
   d9a6e:	4628      	mov	r0, r5
   d9a70:	f7ff fddc 	bl	d962c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d9a74:	4607      	mov	r7, r0
   d9a76:	2800      	cmp	r0, #0
   d9a78:	d03e      	beq.n	d9af8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
   d9a7a:	6804      	ldr	r4, [r0, #0]
   d9a7c:	69a3      	ldr	r3, [r4, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d9a7e:	69e1      	ldr	r1, [r4, #28]
    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
    }

    void onDisconnected() {
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d9a80:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d9a84:	8022      	strh	r2, [r4, #0]
   d9a86:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics_) {
   d9a8a:	4299      	cmp	r1, r3
   d9a8c:	d003      	beq.n	d9a96 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
   d9a8e:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d9a92:	8042      	strh	r2, [r0, #2]
   d9a94:	e7f9      	b.n	d9a8a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xbe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d9a96:	68e6      	ldr	r6, [r4, #12]
   d9a98:	6923      	ldr	r3, [r4, #16]
   d9a9a:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d9a9e:	45b0      	cmp	r8, r6
   d9aa0:	d004      	beq.n	d9aac <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
   d9aa2:	1d30      	adds	r0, r6, #4
   d9aa4:	f7fb f95a 	bl	d4d5c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d9aa8:	3608      	adds	r6, #8
   d9aaa:	e7f8      	b.n	d9a9e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xd2>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d9aac:	2300      	movs	r3, #0
   d9aae:	6123      	str	r3, [r4, #16]
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d9ab0:	69a6      	ldr	r6, [r4, #24]
   d9ab2:	69e3      	ldr	r3, [r4, #28]
   d9ab4:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d9ab8:	45b0      	cmp	r8, r6
   d9aba:	d004      	beq.n	d9ac6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfa>
   d9abc:	1d30      	adds	r0, r6, #4
   d9abe:	f7fb f94d 	bl	d4d5c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d9ac2:	3608      	adds	r6, #8
   d9ac4:	e7f8      	b.n	d9ab8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d9ac6:	2300      	movs	r3, #0
   d9ac8:	61e3      	str	r3, [r4, #28]
        }
        services_.clear();
        characteristics_.clear();
        servicesDiscovered_ = false;
   d9aca:	72a3      	strb	r3, [r4, #10]
        characteristicsDiscovered_ = false;
   d9acc:	72e3      	strb	r3, [r4, #11]
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
                if (peer) {
                    peer->impl()->onDisconnected();
                    if (impl->disconnectedCb_) {
   d9ace:	6aab      	ldr	r3, [r5, #40]	; 0x28
   d9ad0:	b113      	cbz	r3, d9ad8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10c>
                        impl->disconnectedCb_(*peer, impl->disconnectedContext_);
   d9ad2:	6b29      	ldr	r1, [r5, #48]	; 0x30
   d9ad4:	4638      	mov	r0, r7
   d9ad6:	4798      	blx	r3
                    }
                    LOG(TRACE, "Disconnected by remote device.");
   d9ad8:	2320      	movs	r3, #32
   d9ada:	4a0d      	ldr	r2, [pc, #52]	; (d9b10 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x144>)
   d9adc:	9306      	str	r3, [sp, #24]
   d9ade:	9200      	str	r2, [sp, #0]
   d9ae0:	2300      	movs	r3, #0
   d9ae2:	4909      	ldr	r1, [pc, #36]	; (d9b08 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d9ae4:	9307      	str	r3, [sp, #28]
   d9ae6:	2001      	movs	r0, #1
   d9ae8:	aa06      	add	r2, sp, #24
   d9aea:	f7fe f885 	bl	d7bf8 <log_message>
                    impl->peers_.removeOne(*peer);
   d9aee:	4639      	mov	r1, r7
   d9af0:	f105 0018 	add.w	r0, r5, #24
   d9af4:	f7ff ff01 	bl	d98fa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d9af8:	a803      	add	r0, sp, #12
   d9afa:	f7ff fd7d 	bl	d95f8 <_ZN8particle3ble13WiringBleLockD1Ev>
            }
            default: {
                break;
            }
        }
    }
   d9afe:	b00e      	add	sp, #56	; 0x38
   d9b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d9b04:	000dcc96 	.word	0x000dcc96
   d9b08:	000dcc34 	.word	0x000dcc34
   d9b0c:	000dccbc 	.word	0x000dccbc
   d9b10:	000dccd9 	.word	0x000dccd9

000d9b14 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d9b14:	4802      	ldr	r0, [pc, #8]	; (d9b20 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d9b16:	2300      	movs	r3, #0
   d9b18:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d9b1a:	f7fd bf39 	b.w	d7990 <os_mutex_recursive_create>
   d9b1e:	bf00      	nop
   d9b20:	2003e598 	.word	0x2003e598

000d9b24 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d9b24:	4770      	bx	lr

000d9b26 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d9b26:	7441      	strb	r1, [r0, #17]
   d9b28:	4770      	bx	lr

000d9b2a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d9b2a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d9b2c:	7c00      	ldrb	r0, [r0, #16]
   d9b2e:	f7fd feef 	bl	d7910 <HAL_USART_Available_Data_For_Write>
}
   d9b32:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9b36:	bd08      	pop	{r3, pc}

000d9b38 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d9b38:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d9b3a:	7c00      	ldrb	r0, [r0, #16]
   d9b3c:	f7fd fec0 	bl	d78c0 <HAL_USART_Available_Data>
}
   d9b40:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9b44:	bd08      	pop	{r3, pc}

000d9b46 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d9b46:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d9b48:	7c00      	ldrb	r0, [r0, #16]
   d9b4a:	f7fd fec9 	bl	d78e0 <HAL_USART_Peek_Data>
}
   d9b4e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d9b52:	bf28      	it	cs
   d9b54:	f04f 30ff 	movcs.w	r0, #4294967295
   d9b58:	bd08      	pop	{r3, pc}

000d9b5a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d9b5a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d9b5c:	7c00      	ldrb	r0, [r0, #16]
   d9b5e:	f7fd feb7 	bl	d78d0 <HAL_USART_Read_Data>
}
   d9b62:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d9b66:	bf28      	it	cs
   d9b68:	f04f 30ff 	movcs.w	r0, #4294967295
   d9b6c:	bd08      	pop	{r3, pc}

000d9b6e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d9b6e:	7c00      	ldrb	r0, [r0, #16]
   d9b70:	f7fd bebe 	b.w	d78f0 <HAL_USART_Flush_Data>

000d9b74 <_ZN11USARTSerialD0Ev>:
   d9b74:	b510      	push	{r4, lr}
   d9b76:	2114      	movs	r1, #20
   d9b78:	4604      	mov	r4, r0
   d9b7a:	f000 f9ee 	bl	d9f5a <_ZdlPvj>
   d9b7e:	4620      	mov	r0, r4
   d9b80:	bd10      	pop	{r4, pc}

000d9b82 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d9b82:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d9b84:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d9b86:	4604      	mov	r4, r0
   d9b88:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d9b8a:	b925      	cbnz	r5, d9b96 <_ZN11USARTSerial5writeEh+0x14>
   d9b8c:	7c00      	ldrb	r0, [r0, #16]
   d9b8e:	f7fd febf 	bl	d7910 <HAL_USART_Available_Data_For_Write>
   d9b92:	2800      	cmp	r0, #0
   d9b94:	dd05      	ble.n	d9ba2 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d9b96:	4631      	mov	r1, r6
   d9b98:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d9b9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d9b9e:	f7fd be87 	b.w	d78b0 <HAL_USART_Write_Data>
  }
  return 0;
}
   d9ba2:	4628      	mov	r0, r5
   d9ba4:	bd70      	pop	{r4, r5, r6, pc}
	...

000d9ba8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d9ba8:	b510      	push	{r4, lr}
   d9baa:	4604      	mov	r4, r0
   d9bac:	4608      	mov	r0, r1
   d9bae:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d9bb0:	2200      	movs	r2, #0
   d9bb2:	6062      	str	r2, [r4, #4]
   d9bb4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d9bb8:	60a2      	str	r2, [r4, #8]
   d9bba:	4a05      	ldr	r2, [pc, #20]	; (d9bd0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d9bbc:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d9bbe:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d9bc0:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d9bc2:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d9bc4:	461a      	mov	r2, r3
   d9bc6:	f7fd fe6b 	bl	d78a0 <HAL_USART_Init>
}
   d9bca:	4620      	mov	r0, r4
   d9bcc:	bd10      	pop	{r4, pc}
   d9bce:	bf00      	nop
   d9bd0:	000dcddc 	.word	0x000dcddc

000d9bd4 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d9bd4:	7c00      	ldrb	r0, [r0, #16]
   d9bd6:	f7fd be93 	b.w	d7900 <HAL_USART_Is_Enabled>
	...

000d9bdc <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d9bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
   d9bde:	4c19      	ldr	r4, [pc, #100]	; (d9c44 <_Z22__fetch_global_Serial1v+0x68>)
   d9be0:	6825      	ldr	r5, [r4, #0]
   d9be2:	b94d      	cbnz	r5, d9bf8 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
   d9be4:	2084      	movs	r0, #132	; 0x84
   d9be6:	f7fa fa58 	bl	d409a <_Znwj>
   d9bea:	4606      	mov	r6, r0
   d9bec:	b118      	cbz	r0, d9bf6 <_Z22__fetch_global_Serial1v+0x1a>
   d9bee:	2284      	movs	r2, #132	; 0x84
   d9bf0:	4629      	mov	r1, r5
   d9bf2:	f001 fc07 	bl	db404 <memset>
   d9bf6:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
   d9bf8:	4d13      	ldr	r5, [pc, #76]	; (d9c48 <_Z22__fetch_global_Serial1v+0x6c>)
   d9bfa:	682e      	ldr	r6, [r5, #0]
   d9bfc:	b94e      	cbnz	r6, d9c12 <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
   d9bfe:	2084      	movs	r0, #132	; 0x84
   d9c00:	f7fa fa4b 	bl	d409a <_Znwj>
   d9c04:	4607      	mov	r7, r0
   d9c06:	b118      	cbz	r0, d9c10 <_Z22__fetch_global_Serial1v+0x34>
   d9c08:	2284      	movs	r2, #132	; 0x84
   d9c0a:	4631      	mov	r1, r6
   d9c0c:	f001 fbfa 	bl	db404 <memset>
   d9c10:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d9c12:	4f0e      	ldr	r7, [pc, #56]	; (d9c4c <_Z22__fetch_global_Serial1v+0x70>)
   d9c14:	6839      	ldr	r1, [r7, #0]
   d9c16:	f011 0601 	ands.w	r6, r1, #1
   d9c1a:	d111      	bne.n	d9c40 <_Z22__fetch_global_Serial1v+0x64>
   d9c1c:	4638      	mov	r0, r7
   d9c1e:	f7fa fa42 	bl	d40a6 <__cxa_guard_acquire>
   d9c22:	b168      	cbz	r0, d9c40 <_Z22__fetch_global_Serial1v+0x64>
   d9c24:	6822      	ldr	r2, [r4, #0]
   d9c26:	682b      	ldr	r3, [r5, #0]
   d9c28:	4809      	ldr	r0, [pc, #36]	; (d9c50 <_Z22__fetch_global_Serial1v+0x74>)
   d9c2a:	4631      	mov	r1, r6
   d9c2c:	f7ff ffbc 	bl	d9ba8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d9c30:	4638      	mov	r0, r7
   d9c32:	f7fa fa3d 	bl	d40b0 <__cxa_guard_release>
   d9c36:	4a07      	ldr	r2, [pc, #28]	; (d9c54 <_Z22__fetch_global_Serial1v+0x78>)
   d9c38:	4907      	ldr	r1, [pc, #28]	; (d9c58 <_Z22__fetch_global_Serial1v+0x7c>)
   d9c3a:	4805      	ldr	r0, [pc, #20]	; (d9c50 <_Z22__fetch_global_Serial1v+0x74>)
   d9c3c:	f000 f988 	bl	d9f50 <__aeabi_atexit>
#endif
	return serial1;
}
   d9c40:	4803      	ldr	r0, [pc, #12]	; (d9c50 <_Z22__fetch_global_Serial1v+0x74>)
   d9c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d9c44:	2003e5b8 	.word	0x2003e5b8
   d9c48:	2003e5b0 	.word	0x2003e5b0
   d9c4c:	2003e5b4 	.word	0x2003e5b4
   d9c50:	2003e59c 	.word	0x2003e59c
   d9c54:	2003dcc8 	.word	0x2003dcc8
   d9c58:	000d9b25 	.word	0x000d9b25

000d9c5c <_ZN11SleepResultC1EiPKtj>:
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
   d9c5c:	b510      	push	{r4, lr}
   d9c5e:	2400      	movs	r4, #0
   d9c60:	7004      	strb	r4, [r0, #0]
   d9c62:	8044      	strh	r4, [r0, #2]
    if (ret > 0) {
   d9c64:	2900      	cmp	r1, #0
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
   d9c66:	f64f 74ff 	movw	r4, #65535	; 0xffff
   d9c6a:	8084      	strh	r4, [r0, #4]
    if (ret > 0) {
   d9c6c:	dd07      	ble.n	d9c7e <_ZN11SleepResultC1EiPKtj+0x22>
        // pin
        --ret;
        if ((size_t)ret < pinsSize) {
   d9c6e:	3901      	subs	r1, #1
   d9c70:	4299      	cmp	r1, r3
   d9c72:	d209      	bcs.n	d9c88 <_ZN11SleepResultC1EiPKtj+0x2c>
            pin_ = pins[ret];
   d9c74:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   d9c78:	8083      	strh	r3, [r0, #4]
            reason_ = WAKEUP_REASON_PIN;
   d9c7a:	2301      	movs	r3, #1
   d9c7c:	e001      	b.n	d9c82 <_ZN11SleepResultC1EiPKtj+0x26>
            err_ = SYSTEM_ERROR_NONE;
        }
    } else if (ret == 0) {
   d9c7e:	d102      	bne.n	d9c86 <_ZN11SleepResultC1EiPKtj+0x2a>
        reason_ = WAKEUP_REASON_RTC;
   d9c80:	2302      	movs	r3, #2
   d9c82:	7003      	strb	r3, [r0, #0]
   d9c84:	bd10      	pop	{r4, pc}
        err_ = SYSTEM_ERROR_NONE;
    } else {
        err_ = static_cast<system_error_t>(ret);
   d9c86:	8041      	strh	r1, [r0, #2]
    }
}
   d9c88:	bd10      	pop	{r4, pc}
	...

000d9c8c <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>:
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d9c8c:	b570      	push	{r4, r5, r6, lr}
   d9c8e:	b086      	sub	sp, #24
   d9c90:	4616      	mov	r6, r2
   d9c92:	461a      	mov	r2, r3
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d9c94:	2300      	movs	r3, #0
   d9c96:	9302      	str	r3, [sp, #8]
   d9c98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d9c9a:	9301      	str	r3, [sp, #4]
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d9c9c:	460d      	mov	r5, r1
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d9c9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d9ca0:	9300      	str	r3, [sp, #0]
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d9ca2:	4604      	mov	r4, r0
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d9ca4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9ca6:	4631      	mov	r1, r6
   d9ca8:	4628      	mov	r0, r5
   d9caa:	f7fe f889 	bl	d7dc0 <system_sleep_pins>
    System.sleepResult_ = SleepResult(ret, pins, pins_count);
   d9cae:	4633      	mov	r3, r6
   d9cb0:	462a      	mov	r2, r5
   d9cb2:	4601      	mov	r1, r0
   d9cb4:	a804      	add	r0, sp, #16
   d9cb6:	f7ff ffd1 	bl	d9c5c <_ZN11SleepResultC1EiPKtj>
   d9cba:	4b06      	ldr	r3, [pc, #24]	; (d9cd4 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
   d9cbc:	9804      	ldr	r0, [sp, #16]
   d9cbe:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   d9cc2:	6018      	str	r0, [r3, #0]
   d9cc4:	809a      	strh	r2, [r3, #4]
    return System.sleepResult_;
   d9cc6:	681a      	ldr	r2, [r3, #0]
   d9cc8:	889b      	ldrh	r3, [r3, #4]
   d9cca:	6022      	str	r2, [r4, #0]
}
   d9ccc:	4620      	mov	r0, r4
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
    System.sleepResult_ = SleepResult(ret, pins, pins_count);
    return System.sleepResult_;
   d9cce:	80a3      	strh	r3, [r4, #4]
}
   d9cd0:	b006      	add	sp, #24
   d9cd2:	bd70      	pop	{r4, r5, r6, pc}
   d9cd4:	2003e5bc 	.word	0x2003e5bc

000d9cd8 <_ZNK11SleepResult6reasonEv>:
    }
}

WakeupReason SleepResult::reason() const {
    return reason_;
}
   d9cd8:	7800      	ldrb	r0, [r0, #0]
   d9cda:	4770      	bx	lr

000d9cdc <_ZNK11SleepResult3pinEv>:
    return reason_ == WAKEUP_REASON_PIN || reason_ == WAKEUP_REASON_PIN_OR_RTC;
}

pin_t SleepResult::pin() const {
    return pin_;
}
   d9cdc:	8880      	ldrh	r0, [r0, #4]
   d9cde:	4770      	bx	lr

000d9ce0 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d9ce0:	4b04      	ldr	r3, [pc, #16]	; (d9cf4 <_GLOBAL__sub_I_System+0x14>)
   d9ce2:	2000      	movs	r0, #0
   d9ce4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d9ce8:	7018      	strb	r0, [r3, #0]
   d9cea:	8058      	strh	r0, [r3, #2]
   d9cec:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d9cee:	f7fe b823 	b.w	d7d38 <set_system_mode>
   d9cf2:	bf00      	nop
   d9cf4:	2003e5bc 	.word	0x2003e5bc

000d9cf8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d9cf8:	2200      	movs	r2, #0
   d9cfa:	4611      	mov	r1, r2
   d9cfc:	6840      	ldr	r0, [r0, #4]
   d9cfe:	f7fd bffb 	b.w	d7cf8 <network_listening>

000d9d02 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d9d02:	2200      	movs	r2, #0
   d9d04:	4611      	mov	r1, r2
   d9d06:	6840      	ldr	r0, [r0, #4]
   d9d08:	f7fe b806 	b.w	d7d18 <network_get_listen_timeout>

000d9d0c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d9d0c:	2200      	movs	r2, #0
   d9d0e:	6840      	ldr	r0, [r0, #4]
   d9d10:	f7fd bffa 	b.w	d7d08 <network_set_listen_timeout>

000d9d14 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d9d14:	2200      	movs	r2, #0
   d9d16:	f081 0101 	eor.w	r1, r1, #1
   d9d1a:	6840      	ldr	r0, [r0, #4]
   d9d1c:	f7fd bfe4 	b.w	d7ce8 <network_listen>

000d9d20 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d9d20:	2300      	movs	r3, #0
   d9d22:	461a      	mov	r2, r3
   d9d24:	4619      	mov	r1, r3
   d9d26:	6840      	ldr	r0, [r0, #4]
   d9d28:	f7fd bfd6 	b.w	d7cd8 <network_off>

000d9d2c <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d9d2c:	2300      	movs	r3, #0
   d9d2e:	461a      	mov	r2, r3
   d9d30:	4619      	mov	r1, r3
   d9d32:	6840      	ldr	r0, [r0, #4]
   d9d34:	f7fd bfc8 	b.w	d7cc8 <network_on>

000d9d38 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d9d38:	2200      	movs	r2, #0
   d9d3a:	4611      	mov	r1, r2
   d9d3c:	6840      	ldr	r0, [r0, #4]
   d9d3e:	f7fd bfbb 	b.w	d7cb8 <network_ready>

000d9d42 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d9d42:	2200      	movs	r2, #0
   d9d44:	4611      	mov	r1, r2
   d9d46:	6840      	ldr	r0, [r0, #4]
   d9d48:	f7fd bfa6 	b.w	d7c98 <network_connecting>

000d9d4c <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d9d4c:	2200      	movs	r2, #0
   d9d4e:	2102      	movs	r1, #2
   d9d50:	6840      	ldr	r0, [r0, #4]
   d9d52:	f7fd bfa9 	b.w	d7ca8 <network_disconnect>

000d9d56 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d9d56:	2300      	movs	r3, #0
   d9d58:	461a      	mov	r2, r3
   d9d5a:	6840      	ldr	r0, [r0, #4]
   d9d5c:	f7fd bf94 	b.w	d7c88 <network_connect>

000d9d60 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d9d60:	4b02      	ldr	r3, [pc, #8]	; (d9d6c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d9d62:	2203      	movs	r2, #3
   d9d64:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d9d66:	4a02      	ldr	r2, [pc, #8]	; (d9d70 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d9d68:	601a      	str	r2, [r3, #0]
   d9d6a:	4770      	bx	lr
   d9d6c:	2003e5c4 	.word	0x2003e5c4
   d9d70:	000dce0c 	.word	0x000dce0c

000d9d74 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d9d74:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d9d76:	4d0b      	ldr	r5, [pc, #44]	; (d9da4 <_Z19__fetch_global_Wirev+0x30>)
   d9d78:	6829      	ldr	r1, [r5, #0]
   d9d7a:	f011 0401 	ands.w	r4, r1, #1
   d9d7e:	d10f      	bne.n	d9da0 <_Z19__fetch_global_Wirev+0x2c>
   d9d80:	4628      	mov	r0, r5
   d9d82:	f7fa f990 	bl	d40a6 <__cxa_guard_acquire>
   d9d86:	b158      	cbz	r0, d9da0 <_Z19__fetch_global_Wirev+0x2c>
   d9d88:	4621      	mov	r1, r4
   d9d8a:	4807      	ldr	r0, [pc, #28]	; (d9da8 <_Z19__fetch_global_Wirev+0x34>)
   d9d8c:	f7fe fade 	bl	d834c <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d9d90:	4628      	mov	r0, r5
   d9d92:	f7fa f98d 	bl	d40b0 <__cxa_guard_release>
   d9d96:	4a05      	ldr	r2, [pc, #20]	; (d9dac <_Z19__fetch_global_Wirev+0x38>)
   d9d98:	4905      	ldr	r1, [pc, #20]	; (d9db0 <_Z19__fetch_global_Wirev+0x3c>)
   d9d9a:	4803      	ldr	r0, [pc, #12]	; (d9da8 <_Z19__fetch_global_Wirev+0x34>)
   d9d9c:	f000 f8d8 	bl	d9f50 <__aeabi_atexit>
	return wire;
}
   d9da0:	4801      	ldr	r0, [pc, #4]	; (d9da8 <_Z19__fetch_global_Wirev+0x34>)
   d9da2:	bd38      	pop	{r3, r4, r5, pc}
   d9da4:	2003e5cc 	.word	0x2003e5cc
   d9da8:	2003e5e4 	.word	0x2003e5e4
   d9dac:	2003dcc8 	.word	0x2003dcc8
   d9db0:	000d82f5 	.word	0x000d82f5

000d9db4 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d9db4:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2);
   d9db6:	4c0b      	ldr	r4, [pc, #44]	; (d9de4 <_Z20__fetch_global_Wire1v+0x30>)
   d9db8:	6823      	ldr	r3, [r4, #0]
   d9dba:	07db      	lsls	r3, r3, #31
   d9dbc:	d40f      	bmi.n	d9dde <_Z20__fetch_global_Wire1v+0x2a>
   d9dbe:	4620      	mov	r0, r4
   d9dc0:	f7fa f971 	bl	d40a6 <__cxa_guard_acquire>
   d9dc4:	b158      	cbz	r0, d9dde <_Z20__fetch_global_Wire1v+0x2a>
   d9dc6:	2101      	movs	r1, #1
   d9dc8:	4807      	ldr	r0, [pc, #28]	; (d9de8 <_Z20__fetch_global_Wire1v+0x34>)
   d9dca:	f7fe fabf 	bl	d834c <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d9dce:	4620      	mov	r0, r4
   d9dd0:	f7fa f96e 	bl	d40b0 <__cxa_guard_release>
   d9dd4:	4a05      	ldr	r2, [pc, #20]	; (d9dec <_Z20__fetch_global_Wire1v+0x38>)
   d9dd6:	4906      	ldr	r1, [pc, #24]	; (d9df0 <_Z20__fetch_global_Wire1v+0x3c>)
   d9dd8:	4803      	ldr	r0, [pc, #12]	; (d9de8 <_Z20__fetch_global_Wire1v+0x34>)
   d9dda:	f000 f8b9 	bl	d9f50 <__aeabi_atexit>
	return wire;
}
   d9dde:	4802      	ldr	r0, [pc, #8]	; (d9de8 <_Z20__fetch_global_Wire1v+0x34>)
   d9de0:	bd10      	pop	{r4, pc}
   d9de2:	bf00      	nop
   d9de4:	2003e5f8 	.word	0x2003e5f8
   d9de8:	2003e5d0 	.word	0x2003e5d0
   d9dec:	2003dcc8 	.word	0x2003dcc8
   d9df0:	000d82f5 	.word	0x000d82f5

000d9df4 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   d9df4:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   d9df6:	4c07      	ldr	r4, [pc, #28]	; (d9e14 <_Z21__fetch_global_EEPROMv+0x20>)
   d9df8:	6823      	ldr	r3, [r4, #0]
   d9dfa:	07db      	lsls	r3, r3, #31
   d9dfc:	d408      	bmi.n	d9e10 <_Z21__fetch_global_EEPROMv+0x1c>
   d9dfe:	4620      	mov	r0, r4
   d9e00:	f7fa f951 	bl	d40a6 <__cxa_guard_acquire>
   d9e04:	b120      	cbz	r0, d9e10 <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   d9e06:	f7fd fe37 	bl	d7a78 <HAL_EEPROM_Init>
   d9e0a:	4620      	mov	r0, r4
   d9e0c:	f7fa f950 	bl	d40b0 <__cxa_guard_release>
	return eeprom;
}
   d9e10:	4801      	ldr	r0, [pc, #4]	; (d9e18 <_Z21__fetch_global_EEPROMv+0x24>)
   d9e12:	bd10      	pop	{r4, pc}
   d9e14:	2003e5fc 	.word	0x2003e5fc
   d9e18:	2003e600 	.word	0x2003e600

000d9e1c <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d9e1c:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d9e1e:	4c0c      	ldr	r4, [pc, #48]	; (d9e50 <_GLOBAL__sub_I_SPI+0x34>)
   d9e20:	4e0c      	ldr	r6, [pc, #48]	; (d9e54 <_GLOBAL__sub_I_SPI+0x38>)
   d9e22:	4d0d      	ldr	r5, [pc, #52]	; (d9e58 <_GLOBAL__sub_I_SPI+0x3c>)
   d9e24:	2100      	movs	r1, #0
   d9e26:	4620      	mov	r0, r4
   d9e28:	f7fe f992 	bl	d8150 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d9e2c:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d9e2e:	4c0b      	ldr	r4, [pc, #44]	; (d9e5c <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d9e30:	4632      	mov	r2, r6
   d9e32:	4629      	mov	r1, r5
   d9e34:	f000 f88c 	bl	d9f50 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d9e38:	2101      	movs	r1, #1
   d9e3a:	4620      	mov	r0, r4
   d9e3c:	f7fe f988 	bl	d8150 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d9e40:	4632      	mov	r2, r6
   d9e42:	4629      	mov	r1, r5
   d9e44:	4620      	mov	r0, r4
   d9e46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d9e4a:	f000 b881 	b.w	d9f50 <__aeabi_atexit>
   d9e4e:	bf00      	nop
   d9e50:	2003e608 	.word	0x2003e608
   d9e54:	2003dcc8 	.word	0x2003dcc8
   d9e58:	000d8141 	.word	0x000d8141
   d9e5c:	2003e618 	.word	0x2003e618

000d9e60 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d9e60:	b510      	push	{r4, lr}
   d9e62:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d9e64:	480f      	ldr	r0, [pc, #60]	; (d9ea4 <pinAvailable+0x44>)
   d9e66:	f7fe fa2e 	bl	d82c6 <_ZN8SPIClass9isEnabledEv>
   d9e6a:	b128      	cbz	r0, d9e78 <pinAvailable+0x18>
   d9e6c:	f1a4 030b 	sub.w	r3, r4, #11
   d9e70:	2b02      	cmp	r3, #2
   d9e72:	d801      	bhi.n	d9e78 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d9e74:	2000      	movs	r0, #0
   d9e76:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d9e78:	f7ff ff7c 	bl	d9d74 <_Z19__fetch_global_Wirev>
   d9e7c:	f7fe fa9f 	bl	d83be <_ZN7TwoWire9isEnabledEv>
   d9e80:	b108      	cbz	r0, d9e86 <pinAvailable+0x26>
   d9e82:	2c01      	cmp	r4, #1
   d9e84:	d9f6      	bls.n	d9e74 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d9e86:	f7ff fea9 	bl	d9bdc <_Z22__fetch_global_Serial1v>
   d9e8a:	f7ff fea3 	bl	d9bd4 <_ZN11USARTSerial9isEnabledEv>
   d9e8e:	b118      	cbz	r0, d9e98 <pinAvailable+0x38>
   d9e90:	f1a4 0309 	sub.w	r3, r4, #9
   d9e94:	2b01      	cmp	r3, #1
   d9e96:	d9ed      	bls.n	d9e74 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d9e98:	2c23      	cmp	r4, #35	; 0x23
   d9e9a:	bf8c      	ite	hi
   d9e9c:	2000      	movhi	r0, #0
   d9e9e:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d9ea0:	bd10      	pop	{r4, pc}
   d9ea2:	bf00      	nop
   d9ea4:	2003e608 	.word	0x2003e608

000d9ea8 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d9ea8:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d9eaa:	b538      	push	{r3, r4, r5, lr}
   d9eac:	4604      	mov	r4, r0
   d9eae:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d9eb0:	d80a      	bhi.n	d9ec8 <pinMode+0x20>
   d9eb2:	29ff      	cmp	r1, #255	; 0xff
   d9eb4:	d008      	beq.n	d9ec8 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d9eb6:	f7ff ffd3 	bl	d9e60 <pinAvailable>
   d9eba:	b128      	cbz	r0, d9ec8 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d9ebc:	4629      	mov	r1, r5
   d9ebe:	4620      	mov	r0, r4
}
   d9ec0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d9ec4:	f7fd be48 	b.w	d7b58 <HAL_Pin_Mode>
   d9ec8:	bd38      	pop	{r3, r4, r5, pc}

000d9eca <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d9eca:	b538      	push	{r3, r4, r5, lr}
   d9ecc:	4604      	mov	r4, r0
   d9ece:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d9ed0:	f7fd fe4a 	bl	d7b68 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d9ed4:	28ff      	cmp	r0, #255	; 0xff
   d9ed6:	d010      	beq.n	d9efa <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d9ed8:	2806      	cmp	r0, #6
   d9eda:	d804      	bhi.n	d9ee6 <digitalWrite+0x1c>
   d9edc:	234d      	movs	r3, #77	; 0x4d
   d9ede:	fa23 f000 	lsr.w	r0, r3, r0
   d9ee2:	07c3      	lsls	r3, r0, #31
   d9ee4:	d409      	bmi.n	d9efa <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d9ee6:	4620      	mov	r0, r4
   d9ee8:	f7ff ffba 	bl	d9e60 <pinAvailable>
   d9eec:	b128      	cbz	r0, d9efa <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d9eee:	4629      	mov	r1, r5
   d9ef0:	4620      	mov	r0, r4
}
   d9ef2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d9ef6:	f7fd be3f 	b.w	d7b78 <HAL_GPIO_Write>
   d9efa:	bd38      	pop	{r3, r4, r5, pc}

000d9efc <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d9efc:	b510      	push	{r4, lr}
   d9efe:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d9f00:	f7fd fe32 	bl	d7b68 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d9f04:	3804      	subs	r0, #4
   d9f06:	b2c0      	uxtb	r0, r0
   d9f08:	2801      	cmp	r0, #1
   d9f0a:	d908      	bls.n	d9f1e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d9f0c:	4620      	mov	r0, r4
   d9f0e:	f7ff ffa7 	bl	d9e60 <pinAvailable>
   d9f12:	b120      	cbz	r0, d9f1e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d9f14:	4620      	mov	r0, r4
}
   d9f16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d9f1a:	f7fd be35 	b.w	d7b88 <HAL_GPIO_Read>
}
   d9f1e:	2000      	movs	r0, #0
   d9f20:	bd10      	pop	{r4, pc}

000d9f22 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d9f22:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d9f24:	b510      	push	{r4, lr}
   d9f26:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d9f28:	bf9c      	itt	ls
   d9f2a:	340e      	addls	r4, #14
   d9f2c:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d9f2e:	4620      	mov	r0, r4
   d9f30:	f7ff ff96 	bl	d9e60 <pinAvailable>
   d9f34:	b150      	cbz	r0, d9f4c <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d9f36:	2103      	movs	r1, #3
   d9f38:	4620      	mov	r0, r4
   d9f3a:	f7fd fe05 	bl	d7b48 <HAL_Validate_Pin_Function>
   d9f3e:	2803      	cmp	r0, #3
   d9f40:	d104      	bne.n	d9f4c <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d9f42:	4620      	mov	r0, r4
}
   d9f44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d9f48:	f7fd be36 	b.w	d7bb8 <HAL_ADC_Read>
}
   d9f4c:	2000      	movs	r0, #0
   d9f4e:	bd10      	pop	{r4, pc}

000d9f50 <__aeabi_atexit>:
   d9f50:	460b      	mov	r3, r1
   d9f52:	4601      	mov	r1, r0
   d9f54:	4618      	mov	r0, r3
   d9f56:	f001 b935 	b.w	db1c4 <__cxa_atexit>

000d9f5a <_ZdlPvj>:
   d9f5a:	f7fa b8a0 	b.w	d409e <_ZdlPv>

000d9f5e <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
   d9f5e:	68c3      	ldr	r3, [r0, #12]
   d9f60:	689a      	ldr	r2, [r3, #8]
   d9f62:	60c2      	str	r2, [r0, #12]
   d9f64:	b102      	cbz	r2, d9f68 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xa>
   d9f66:	6050      	str	r0, [r2, #4]
   d9f68:	6842      	ldr	r2, [r0, #4]
   d9f6a:	605a      	str	r2, [r3, #4]
   d9f6c:	680a      	ldr	r2, [r1, #0]
   d9f6e:	4290      	cmp	r0, r2
   d9f70:	d101      	bne.n	d9f76 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>
   d9f72:	600b      	str	r3, [r1, #0]
   d9f74:	e005      	b.n	d9f82 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x24>
   d9f76:	6842      	ldr	r2, [r0, #4]
   d9f78:	6891      	ldr	r1, [r2, #8]
   d9f7a:	4288      	cmp	r0, r1
   d9f7c:	bf0c      	ite	eq
   d9f7e:	6093      	streq	r3, [r2, #8]
   d9f80:	60d3      	strne	r3, [r2, #12]
   d9f82:	6098      	str	r0, [r3, #8]
   d9f84:	6043      	str	r3, [r0, #4]
   d9f86:	4770      	bx	lr

000d9f88 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
   d9f88:	6883      	ldr	r3, [r0, #8]
   d9f8a:	68da      	ldr	r2, [r3, #12]
   d9f8c:	6082      	str	r2, [r0, #8]
   d9f8e:	b102      	cbz	r2, d9f92 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xa>
   d9f90:	6050      	str	r0, [r2, #4]
   d9f92:	6842      	ldr	r2, [r0, #4]
   d9f94:	605a      	str	r2, [r3, #4]
   d9f96:	680a      	ldr	r2, [r1, #0]
   d9f98:	4290      	cmp	r0, r2
   d9f9a:	d101      	bne.n	d9fa0 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>
   d9f9c:	600b      	str	r3, [r1, #0]
   d9f9e:	e005      	b.n	d9fac <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x24>
   d9fa0:	6842      	ldr	r2, [r0, #4]
   d9fa2:	68d1      	ldr	r1, [r2, #12]
   d9fa4:	4288      	cmp	r0, r1
   d9fa6:	bf0c      	ite	eq
   d9fa8:	60d3      	streq	r3, [r2, #12]
   d9faa:	6093      	strne	r3, [r2, #8]
   d9fac:	60d8      	str	r0, [r3, #12]
   d9fae:	6043      	str	r3, [r0, #4]
   d9fb0:	4770      	bx	lr

000d9fb2 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
   d9fb2:	7803      	ldrb	r3, [r0, #0]
   d9fb4:	b92b      	cbnz	r3, d9fc2 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x10>
   d9fb6:	6843      	ldr	r3, [r0, #4]
   d9fb8:	685b      	ldr	r3, [r3, #4]
   d9fba:	4298      	cmp	r0, r3
   d9fbc:	d101      	bne.n	d9fc2 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x10>
   d9fbe:	68c3      	ldr	r3, [r0, #12]
   d9fc0:	e00c      	b.n	d9fdc <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2a>
   d9fc2:	6883      	ldr	r3, [r0, #8]
   d9fc4:	b11b      	cbz	r3, d9fce <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x1c>
   d9fc6:	68da      	ldr	r2, [r3, #12]
   d9fc8:	b142      	cbz	r2, d9fdc <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2a>
   d9fca:	4613      	mov	r3, r2
   d9fcc:	e7fb      	b.n	d9fc6 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x14>
   d9fce:	6843      	ldr	r3, [r0, #4]
   d9fd0:	689a      	ldr	r2, [r3, #8]
   d9fd2:	4282      	cmp	r2, r0
   d9fd4:	d102      	bne.n	d9fdc <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2a>
   d9fd6:	4618      	mov	r0, r3
   d9fd8:	685b      	ldr	r3, [r3, #4]
   d9fda:	e7f9      	b.n	d9fd0 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x1e>
   d9fdc:	4618      	mov	r0, r3
   d9fde:	4770      	bx	lr

000d9fe0 <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base>:
   d9fe0:	68c3      	ldr	r3, [r0, #12]
   d9fe2:	b123      	cbz	r3, d9fee <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base+0xe>
   d9fe4:	4618      	mov	r0, r3
   d9fe6:	689b      	ldr	r3, [r3, #8]
   d9fe8:	2b00      	cmp	r3, #0
   d9fea:	d1fb      	bne.n	d9fe4 <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base+0x4>
   d9fec:	e00a      	b.n	da004 <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base+0x24>
   d9fee:	6843      	ldr	r3, [r0, #4]
   d9ff0:	68da      	ldr	r2, [r3, #12]
   d9ff2:	4282      	cmp	r2, r0
   d9ff4:	d102      	bne.n	d9ffc <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base+0x1c>
   d9ff6:	4618      	mov	r0, r3
   d9ff8:	685b      	ldr	r3, [r3, #4]
   d9ffa:	e7f9      	b.n	d9ff0 <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base+0x10>
   d9ffc:	68c2      	ldr	r2, [r0, #12]
   d9ffe:	4293      	cmp	r3, r2
   da000:	bf18      	it	ne
   da002:	4618      	movne	r0, r3
   da004:	4770      	bx	lr

000da006 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
   da006:	f7ff bfd4 	b.w	d9fb2 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

000da00a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
   da00a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da00e:	461f      	mov	r7, r3
   da010:	f103 0904 	add.w	r9, r3, #4
   da014:	2300      	movs	r3, #0
   da016:	460c      	mov	r4, r1
   da018:	604a      	str	r2, [r1, #4]
   da01a:	608b      	str	r3, [r1, #8]
   da01c:	60cb      	str	r3, [r1, #12]
   da01e:	700b      	strb	r3, [r1, #0]
   da020:	b168      	cbz	r0, da03e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x34>
   da022:	4297      	cmp	r7, r2
   da024:	6091      	str	r1, [r2, #8]
   da026:	d101      	bne.n	da02c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   da028:	6079      	str	r1, [r7, #4]
   da02a:	e00c      	b.n	da046 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x3c>
   da02c:	68bb      	ldr	r3, [r7, #8]
   da02e:	429a      	cmp	r2, r3
   da030:	bf08      	it	eq
   da032:	60b9      	streq	r1, [r7, #8]
   da034:	f04f 0801 	mov.w	r8, #1
   da038:	f04f 0a00 	mov.w	sl, #0
   da03c:	e017      	b.n	da06e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
   da03e:	60d1      	str	r1, [r2, #12]
   da040:	68fb      	ldr	r3, [r7, #12]
   da042:	429a      	cmp	r2, r3
   da044:	d1f6      	bne.n	da034 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
   da046:	60fc      	str	r4, [r7, #12]
   da048:	e7f4      	b.n	da034 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
   da04a:	6866      	ldr	r6, [r4, #4]
   da04c:	7832      	ldrb	r2, [r6, #0]
   da04e:	2a00      	cmp	r2, #0
   da050:	d13a      	bne.n	da0c8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xbe>
   da052:	6875      	ldr	r5, [r6, #4]
   da054:	68ab      	ldr	r3, [r5, #8]
   da056:	429e      	cmp	r6, r3
   da058:	d11f      	bne.n	da09a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x90>
   da05a:	68eb      	ldr	r3, [r5, #12]
   da05c:	b15b      	cbz	r3, da076 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x6c>
   da05e:	781a      	ldrb	r2, [r3, #0]
   da060:	b94a      	cbnz	r2, da076 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x6c>
   da062:	f886 8000 	strb.w	r8, [r6]
   da066:	f883 8000 	strb.w	r8, [r3]
   da06a:	702a      	strb	r2, [r5, #0]
   da06c:	462c      	mov	r4, r5
   da06e:	687b      	ldr	r3, [r7, #4]
   da070:	429c      	cmp	r4, r3
   da072:	d1ea      	bne.n	da04a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x40>
   da074:	e028      	b.n	da0c8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xbe>
   da076:	68f3      	ldr	r3, [r6, #12]
   da078:	429c      	cmp	r4, r3
   da07a:	d104      	bne.n	da086 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x7c>
   da07c:	4649      	mov	r1, r9
   da07e:	4630      	mov	r0, r6
   da080:	f7ff ff6d 	bl	d9f5e <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   da084:	4634      	mov	r4, r6
   da086:	6863      	ldr	r3, [r4, #4]
   da088:	4649      	mov	r1, r9
   da08a:	f883 8000 	strb.w	r8, [r3]
   da08e:	4628      	mov	r0, r5
   da090:	f885 a000 	strb.w	sl, [r5]
   da094:	f7ff ff78 	bl	d9f88 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   da098:	e014      	b.n	da0c4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xba>
   da09a:	b113      	cbz	r3, da0a2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x98>
   da09c:	781a      	ldrb	r2, [r3, #0]
   da09e:	2a00      	cmp	r2, #0
   da0a0:	d0df      	beq.n	da062 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x58>
   da0a2:	68b3      	ldr	r3, [r6, #8]
   da0a4:	429c      	cmp	r4, r3
   da0a6:	d104      	bne.n	da0b2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xa8>
   da0a8:	4649      	mov	r1, r9
   da0aa:	4630      	mov	r0, r6
   da0ac:	f7ff ff6c 	bl	d9f88 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   da0b0:	4634      	mov	r4, r6
   da0b2:	6863      	ldr	r3, [r4, #4]
   da0b4:	4649      	mov	r1, r9
   da0b6:	f883 8000 	strb.w	r8, [r3]
   da0ba:	4628      	mov	r0, r5
   da0bc:	f885 a000 	strb.w	sl, [r5]
   da0c0:	f7ff ff4d 	bl	d9f5e <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   da0c4:	4625      	mov	r5, r4
   da0c6:	e7d1      	b.n	da06c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x62>
   da0c8:	2201      	movs	r2, #1
   da0ca:	701a      	strb	r2, [r3, #0]
   da0cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000da0d0 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_>:
   da0d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da0d4:	460f      	mov	r7, r1
   da0d6:	6881      	ldr	r1, [r0, #8]
   da0d8:	68c2      	ldr	r2, [r0, #12]
   da0da:	4605      	mov	r5, r0
   da0dc:	b909      	cbnz	r1, da0e2 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x12>
   da0de:	4616      	mov	r6, r2
   da0e0:	e029      	b.n	da136 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x66>
   da0e2:	4614      	mov	r4, r2
   da0e4:	2a00      	cmp	r2, #0
   da0e6:	f000 80c5 	beq.w	da274 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x1a4>
   da0ea:	4613      	mov	r3, r2
   da0ec:	6898      	ldr	r0, [r3, #8]
   da0ee:	b108      	cbz	r0, da0f4 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x24>
   da0f0:	4603      	mov	r3, r0
   da0f2:	e7fb      	b.n	da0ec <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x1c>
   da0f4:	42ab      	cmp	r3, r5
   da0f6:	68de      	ldr	r6, [r3, #12]
   da0f8:	d01d      	beq.n	da136 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x66>
   da0fa:	4293      	cmp	r3, r2
   da0fc:	604b      	str	r3, [r1, #4]
   da0fe:	6099      	str	r1, [r3, #8]
   da100:	d007      	beq.n	da112 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x42>
   da102:	685c      	ldr	r4, [r3, #4]
   da104:	b106      	cbz	r6, da108 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x38>
   da106:	6074      	str	r4, [r6, #4]
   da108:	6859      	ldr	r1, [r3, #4]
   da10a:	608e      	str	r6, [r1, #8]
   da10c:	60da      	str	r2, [r3, #12]
   da10e:	68ea      	ldr	r2, [r5, #12]
   da110:	6053      	str	r3, [r2, #4]
   da112:	687a      	ldr	r2, [r7, #4]
   da114:	4295      	cmp	r5, r2
   da116:	d101      	bne.n	da11c <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x4c>
   da118:	607b      	str	r3, [r7, #4]
   da11a:	e005      	b.n	da128 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x58>
   da11c:	686a      	ldr	r2, [r5, #4]
   da11e:	6891      	ldr	r1, [r2, #8]
   da120:	428d      	cmp	r5, r1
   da122:	bf0c      	ite	eq
   da124:	6093      	streq	r3, [r2, #8]
   da126:	60d3      	strne	r3, [r2, #12]
   da128:	686a      	ldr	r2, [r5, #4]
   da12a:	605a      	str	r2, [r3, #4]
   da12c:	7829      	ldrb	r1, [r5, #0]
   da12e:	781a      	ldrb	r2, [r3, #0]
   da130:	7019      	strb	r1, [r3, #0]
   da132:	702a      	strb	r2, [r5, #0]
   da134:	e027      	b.n	da186 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xb6>
   da136:	686c      	ldr	r4, [r5, #4]
   da138:	b106      	cbz	r6, da13c <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x6c>
   da13a:	6074      	str	r4, [r6, #4]
   da13c:	687b      	ldr	r3, [r7, #4]
   da13e:	429d      	cmp	r5, r3
   da140:	d101      	bne.n	da146 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x76>
   da142:	607e      	str	r6, [r7, #4]
   da144:	e005      	b.n	da152 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x82>
   da146:	686b      	ldr	r3, [r5, #4]
   da148:	689a      	ldr	r2, [r3, #8]
   da14a:	4295      	cmp	r5, r2
   da14c:	bf0c      	ite	eq
   da14e:	609e      	streq	r6, [r3, #8]
   da150:	60de      	strne	r6, [r3, #12]
   da152:	68bb      	ldr	r3, [r7, #8]
   da154:	429d      	cmp	r5, r3
   da156:	d109      	bne.n	da16c <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x9c>
   da158:	68eb      	ldr	r3, [r5, #12]
   da15a:	b90b      	cbnz	r3, da160 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x90>
   da15c:	686b      	ldr	r3, [r5, #4]
   da15e:	e004      	b.n	da16a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x9a>
   da160:	4633      	mov	r3, r6
   da162:	689a      	ldr	r2, [r3, #8]
   da164:	b10a      	cbz	r2, da16a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x9a>
   da166:	4613      	mov	r3, r2
   da168:	e7fb      	b.n	da162 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x92>
   da16a:	60bb      	str	r3, [r7, #8]
   da16c:	68fb      	ldr	r3, [r7, #12]
   da16e:	429d      	cmp	r5, r3
   da170:	d109      	bne.n	da186 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xb6>
   da172:	68ab      	ldr	r3, [r5, #8]
   da174:	b90b      	cbnz	r3, da17a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xaa>
   da176:	686b      	ldr	r3, [r5, #4]
   da178:	e004      	b.n	da184 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xb4>
   da17a:	4633      	mov	r3, r6
   da17c:	68da      	ldr	r2, [r3, #12]
   da17e:	b10a      	cbz	r2, da184 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xb4>
   da180:	4613      	mov	r3, r2
   da182:	e7fb      	b.n	da17c <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xac>
   da184:	60fb      	str	r3, [r7, #12]
   da186:	782b      	ldrb	r3, [r5, #0]
   da188:	2b00      	cmp	r3, #0
   da18a:	d076      	beq.n	da27a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x1aa>
   da18c:	f107 0804 	add.w	r8, r7, #4
   da190:	f04f 0900 	mov.w	r9, #0
   da194:	f04f 0a01 	mov.w	sl, #1
   da198:	687b      	ldr	r3, [r7, #4]
   da19a:	429e      	cmp	r6, r3
   da19c:	d067      	beq.n	da26e <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x19e>
   da19e:	b12e      	cbz	r6, da1ac <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xdc>
   da1a0:	7833      	ldrb	r3, [r6, #0]
   da1a2:	2b01      	cmp	r3, #1
   da1a4:	d002      	beq.n	da1ac <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xdc>
   da1a6:	2301      	movs	r3, #1
   da1a8:	7033      	strb	r3, [r6, #0]
   da1aa:	e066      	b.n	da27a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x1aa>
   da1ac:	68a0      	ldr	r0, [r4, #8]
   da1ae:	4286      	cmp	r6, r0
   da1b0:	d12c      	bne.n	da20c <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x13c>
   da1b2:	68e0      	ldr	r0, [r4, #12]
   da1b4:	7803      	ldrb	r3, [r0, #0]
   da1b6:	b93b      	cbnz	r3, da1c8 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xf8>
   da1b8:	f880 a000 	strb.w	sl, [r0]
   da1bc:	4641      	mov	r1, r8
   da1be:	4620      	mov	r0, r4
   da1c0:	7023      	strb	r3, [r4, #0]
   da1c2:	f7ff fecc 	bl	d9f5e <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   da1c6:	68e0      	ldr	r0, [r4, #12]
   da1c8:	6882      	ldr	r2, [r0, #8]
   da1ca:	68c3      	ldr	r3, [r0, #12]
   da1cc:	b112      	cbz	r2, da1d4 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x104>
   da1ce:	7811      	ldrb	r1, [r2, #0]
   da1d0:	2901      	cmp	r1, #1
   da1d2:	d103      	bne.n	da1dc <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x10c>
   da1d4:	b373      	cbz	r3, da234 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x164>
   da1d6:	7819      	ldrb	r1, [r3, #0]
   da1d8:	2901      	cmp	r1, #1
   da1da:	d02b      	beq.n	da234 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x164>
   da1dc:	b113      	cbz	r3, da1e4 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x114>
   da1de:	781b      	ldrb	r3, [r3, #0]
   da1e0:	2b01      	cmp	r3, #1
   da1e2:	d107      	bne.n	da1f4 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x124>
   da1e4:	2301      	movs	r3, #1
   da1e6:	7013      	strb	r3, [r2, #0]
   da1e8:	2300      	movs	r3, #0
   da1ea:	7003      	strb	r3, [r0, #0]
   da1ec:	4641      	mov	r1, r8
   da1ee:	f7ff fecb 	bl	d9f88 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   da1f2:	68e0      	ldr	r0, [r4, #12]
   da1f4:	7823      	ldrb	r3, [r4, #0]
   da1f6:	7003      	strb	r3, [r0, #0]
   da1f8:	68c3      	ldr	r3, [r0, #12]
   da1fa:	2201      	movs	r2, #1
   da1fc:	7022      	strb	r2, [r4, #0]
   da1fe:	b103      	cbz	r3, da202 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x132>
   da200:	701a      	strb	r2, [r3, #0]
   da202:	4641      	mov	r1, r8
   da204:	4620      	mov	r0, r4
   da206:	f7ff feaa 	bl	d9f5e <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   da20a:	e030      	b.n	da26e <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x19e>
   da20c:	7803      	ldrb	r3, [r0, #0]
   da20e:	b93b      	cbnz	r3, da220 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x150>
   da210:	f880 a000 	strb.w	sl, [r0]
   da214:	4641      	mov	r1, r8
   da216:	4620      	mov	r0, r4
   da218:	7023      	strb	r3, [r4, #0]
   da21a:	f7ff feb5 	bl	d9f88 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   da21e:	68a0      	ldr	r0, [r4, #8]
   da220:	68c2      	ldr	r2, [r0, #12]
   da222:	6883      	ldr	r3, [r0, #8]
   da224:	b112      	cbz	r2, da22c <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x15c>
   da226:	7811      	ldrb	r1, [r2, #0]
   da228:	2901      	cmp	r1, #1
   da22a:	d109      	bne.n	da240 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x170>
   da22c:	b113      	cbz	r3, da234 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x164>
   da22e:	7819      	ldrb	r1, [r3, #0]
   da230:	2901      	cmp	r1, #1
   da232:	d105      	bne.n	da240 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x170>
   da234:	6863      	ldr	r3, [r4, #4]
   da236:	f880 9000 	strb.w	r9, [r0]
   da23a:	4626      	mov	r6, r4
   da23c:	461c      	mov	r4, r3
   da23e:	e7ab      	b.n	da198 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xc8>
   da240:	b113      	cbz	r3, da248 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x178>
   da242:	781b      	ldrb	r3, [r3, #0]
   da244:	2b01      	cmp	r3, #1
   da246:	d107      	bne.n	da258 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x188>
   da248:	2301      	movs	r3, #1
   da24a:	7013      	strb	r3, [r2, #0]
   da24c:	2300      	movs	r3, #0
   da24e:	7003      	strb	r3, [r0, #0]
   da250:	4641      	mov	r1, r8
   da252:	f7ff fe84 	bl	d9f5e <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   da256:	68a0      	ldr	r0, [r4, #8]
   da258:	7823      	ldrb	r3, [r4, #0]
   da25a:	7003      	strb	r3, [r0, #0]
   da25c:	6883      	ldr	r3, [r0, #8]
   da25e:	2201      	movs	r2, #1
   da260:	7022      	strb	r2, [r4, #0]
   da262:	b103      	cbz	r3, da266 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x196>
   da264:	701a      	strb	r2, [r3, #0]
   da266:	4641      	mov	r1, r8
   da268:	4620      	mov	r0, r4
   da26a:	f7ff fe8d 	bl	d9f88 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   da26e:	2e00      	cmp	r6, #0
   da270:	d199      	bne.n	da1a6 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xd6>
   da272:	e002      	b.n	da27a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x1aa>
   da274:	6844      	ldr	r4, [r0, #4]
   da276:	460e      	mov	r6, r1
   da278:	e75f      	b.n	da13a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x6a>
   da27a:	4628      	mov	r0, r5
   da27c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000da280 <_ZSt25__throw_bad_function_callv>:
   da280:	b508      	push	{r3, lr}
   da282:	f7fd fdef 	bl	d7e64 <abort>
	...

000da288 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   da288:	4b18      	ldr	r3, [pc, #96]	; (da2ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   da28a:	681a      	ldr	r2, [r3, #0]
   da28c:	07d1      	lsls	r1, r2, #31
   da28e:	bf5c      	itt	pl
   da290:	2201      	movpl	r2, #1
   da292:	601a      	strpl	r2, [r3, #0]
   da294:	4b16      	ldr	r3, [pc, #88]	; (da2f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   da296:	681a      	ldr	r2, [r3, #0]
   da298:	07d2      	lsls	r2, r2, #31
   da29a:	bf5c      	itt	pl
   da29c:	2201      	movpl	r2, #1
   da29e:	601a      	strpl	r2, [r3, #0]
   da2a0:	4b14      	ldr	r3, [pc, #80]	; (da2f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   da2a2:	681a      	ldr	r2, [r3, #0]
   da2a4:	07d0      	lsls	r0, r2, #31
   da2a6:	bf5c      	itt	pl
   da2a8:	2201      	movpl	r2, #1
   da2aa:	601a      	strpl	r2, [r3, #0]
   da2ac:	4b12      	ldr	r3, [pc, #72]	; (da2f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   da2ae:	681a      	ldr	r2, [r3, #0]
   da2b0:	07d1      	lsls	r1, r2, #31
   da2b2:	bf5c      	itt	pl
   da2b4:	2201      	movpl	r2, #1
   da2b6:	601a      	strpl	r2, [r3, #0]
   da2b8:	4b10      	ldr	r3, [pc, #64]	; (da2fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   da2ba:	681a      	ldr	r2, [r3, #0]
   da2bc:	07d2      	lsls	r2, r2, #31
   da2be:	bf5c      	itt	pl
   da2c0:	2201      	movpl	r2, #1
   da2c2:	601a      	strpl	r2, [r3, #0]
   da2c4:	4b0e      	ldr	r3, [pc, #56]	; (da300 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   da2c6:	681a      	ldr	r2, [r3, #0]
   da2c8:	07d0      	lsls	r0, r2, #31
   da2ca:	bf5c      	itt	pl
   da2cc:	2201      	movpl	r2, #1
   da2ce:	601a      	strpl	r2, [r3, #0]
   da2d0:	4b0c      	ldr	r3, [pc, #48]	; (da304 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   da2d2:	681a      	ldr	r2, [r3, #0]
   da2d4:	07d1      	lsls	r1, r2, #31
   da2d6:	bf5c      	itt	pl
   da2d8:	2201      	movpl	r2, #1
   da2da:	601a      	strpl	r2, [r3, #0]
   da2dc:	4b0a      	ldr	r3, [pc, #40]	; (da308 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   da2de:	681a      	ldr	r2, [r3, #0]
   da2e0:	07d2      	lsls	r2, r2, #31
   da2e2:	bf5c      	itt	pl
   da2e4:	2201      	movpl	r2, #1
   da2e6:	601a      	strpl	r2, [r3, #0]
   da2e8:	4770      	bx	lr
   da2ea:	bf00      	nop
   da2ec:	2003e644 	.word	0x2003e644
   da2f0:	2003e640 	.word	0x2003e640
   da2f4:	2003e63c 	.word	0x2003e63c
   da2f8:	2003e638 	.word	0x2003e638
   da2fc:	2003e634 	.word	0x2003e634
   da300:	2003e630 	.word	0x2003e630
   da304:	2003e62c 	.word	0x2003e62c
   da308:	2003e628 	.word	0x2003e628

000da30c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   da30c:	4b24      	ldr	r3, [pc, #144]	; (da3a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   da30e:	681a      	ldr	r2, [r3, #0]
   da310:	07d0      	lsls	r0, r2, #31
   da312:	bf5c      	itt	pl
   da314:	2201      	movpl	r2, #1
   da316:	601a      	strpl	r2, [r3, #0]
   da318:	4b22      	ldr	r3, [pc, #136]	; (da3a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   da31a:	681a      	ldr	r2, [r3, #0]
   da31c:	07d1      	lsls	r1, r2, #31
   da31e:	bf5c      	itt	pl
   da320:	2201      	movpl	r2, #1
   da322:	601a      	strpl	r2, [r3, #0]
   da324:	4b20      	ldr	r3, [pc, #128]	; (da3a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   da326:	681a      	ldr	r2, [r3, #0]
   da328:	07d2      	lsls	r2, r2, #31
   da32a:	bf5c      	itt	pl
   da32c:	2201      	movpl	r2, #1
   da32e:	601a      	strpl	r2, [r3, #0]
   da330:	4b1e      	ldr	r3, [pc, #120]	; (da3ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   da332:	681a      	ldr	r2, [r3, #0]
   da334:	07d0      	lsls	r0, r2, #31
   da336:	bf5c      	itt	pl
   da338:	2201      	movpl	r2, #1
   da33a:	601a      	strpl	r2, [r3, #0]
   da33c:	4b1c      	ldr	r3, [pc, #112]	; (da3b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   da33e:	681a      	ldr	r2, [r3, #0]
   da340:	07d1      	lsls	r1, r2, #31
   da342:	bf5c      	itt	pl
   da344:	2201      	movpl	r2, #1
   da346:	601a      	strpl	r2, [r3, #0]
   da348:	4b1a      	ldr	r3, [pc, #104]	; (da3b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   da34a:	681a      	ldr	r2, [r3, #0]
   da34c:	07d2      	lsls	r2, r2, #31
   da34e:	bf5c      	itt	pl
   da350:	2201      	movpl	r2, #1
   da352:	601a      	strpl	r2, [r3, #0]
   da354:	4b18      	ldr	r3, [pc, #96]	; (da3b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   da356:	681a      	ldr	r2, [r3, #0]
   da358:	07d0      	lsls	r0, r2, #31
   da35a:	bf5c      	itt	pl
   da35c:	2201      	movpl	r2, #1
   da35e:	601a      	strpl	r2, [r3, #0]
   da360:	4b16      	ldr	r3, [pc, #88]	; (da3bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   da362:	681a      	ldr	r2, [r3, #0]
   da364:	07d1      	lsls	r1, r2, #31
   da366:	bf5c      	itt	pl
   da368:	2201      	movpl	r2, #1
   da36a:	601a      	strpl	r2, [r3, #0]
   da36c:	4b14      	ldr	r3, [pc, #80]	; (da3c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   da36e:	681a      	ldr	r2, [r3, #0]
   da370:	07d2      	lsls	r2, r2, #31
   da372:	bf5c      	itt	pl
   da374:	2201      	movpl	r2, #1
   da376:	601a      	strpl	r2, [r3, #0]
   da378:	4b12      	ldr	r3, [pc, #72]	; (da3c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   da37a:	681a      	ldr	r2, [r3, #0]
   da37c:	07d0      	lsls	r0, r2, #31
   da37e:	bf5c      	itt	pl
   da380:	2201      	movpl	r2, #1
   da382:	601a      	strpl	r2, [r3, #0]
   da384:	4b10      	ldr	r3, [pc, #64]	; (da3c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   da386:	681a      	ldr	r2, [r3, #0]
   da388:	07d1      	lsls	r1, r2, #31
   da38a:	bf5c      	itt	pl
   da38c:	2201      	movpl	r2, #1
   da38e:	601a      	strpl	r2, [r3, #0]
   da390:	4b0e      	ldr	r3, [pc, #56]	; (da3cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   da392:	681a      	ldr	r2, [r3, #0]
   da394:	07d2      	lsls	r2, r2, #31
   da396:	bf5c      	itt	pl
   da398:	2201      	movpl	r2, #1
   da39a:	601a      	strpl	r2, [r3, #0]
   da39c:	4770      	bx	lr
   da39e:	bf00      	nop
   da3a0:	2003e674 	.word	0x2003e674
   da3a4:	2003e670 	.word	0x2003e670
   da3a8:	2003e66c 	.word	0x2003e66c
   da3ac:	2003e668 	.word	0x2003e668
   da3b0:	2003e664 	.word	0x2003e664
   da3b4:	2003e660 	.word	0x2003e660
   da3b8:	2003e65c 	.word	0x2003e65c
   da3bc:	2003e658 	.word	0x2003e658
   da3c0:	2003e654 	.word	0x2003e654
   da3c4:	2003e650 	.word	0x2003e650
   da3c8:	2003e64c 	.word	0x2003e64c
   da3cc:	2003e648 	.word	0x2003e648

000da3d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   da3d0:	4b24      	ldr	r3, [pc, #144]	; (da464 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   da3d2:	681a      	ldr	r2, [r3, #0]
   da3d4:	07d0      	lsls	r0, r2, #31
   da3d6:	bf5c      	itt	pl
   da3d8:	2201      	movpl	r2, #1
   da3da:	601a      	strpl	r2, [r3, #0]
   da3dc:	4b22      	ldr	r3, [pc, #136]	; (da468 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   da3de:	681a      	ldr	r2, [r3, #0]
   da3e0:	07d1      	lsls	r1, r2, #31
   da3e2:	bf5c      	itt	pl
   da3e4:	2201      	movpl	r2, #1
   da3e6:	601a      	strpl	r2, [r3, #0]
   da3e8:	4b20      	ldr	r3, [pc, #128]	; (da46c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   da3ea:	681a      	ldr	r2, [r3, #0]
   da3ec:	07d2      	lsls	r2, r2, #31
   da3ee:	bf5c      	itt	pl
   da3f0:	2201      	movpl	r2, #1
   da3f2:	601a      	strpl	r2, [r3, #0]
   da3f4:	4b1e      	ldr	r3, [pc, #120]	; (da470 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   da3f6:	681a      	ldr	r2, [r3, #0]
   da3f8:	07d0      	lsls	r0, r2, #31
   da3fa:	bf5c      	itt	pl
   da3fc:	2201      	movpl	r2, #1
   da3fe:	601a      	strpl	r2, [r3, #0]
   da400:	4b1c      	ldr	r3, [pc, #112]	; (da474 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   da402:	681a      	ldr	r2, [r3, #0]
   da404:	07d1      	lsls	r1, r2, #31
   da406:	bf5c      	itt	pl
   da408:	2201      	movpl	r2, #1
   da40a:	601a      	strpl	r2, [r3, #0]
   da40c:	4b1a      	ldr	r3, [pc, #104]	; (da478 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   da40e:	681a      	ldr	r2, [r3, #0]
   da410:	07d2      	lsls	r2, r2, #31
   da412:	bf5c      	itt	pl
   da414:	2201      	movpl	r2, #1
   da416:	601a      	strpl	r2, [r3, #0]
   da418:	4b18      	ldr	r3, [pc, #96]	; (da47c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   da41a:	681a      	ldr	r2, [r3, #0]
   da41c:	07d0      	lsls	r0, r2, #31
   da41e:	bf5c      	itt	pl
   da420:	2201      	movpl	r2, #1
   da422:	601a      	strpl	r2, [r3, #0]
   da424:	4b16      	ldr	r3, [pc, #88]	; (da480 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   da426:	681a      	ldr	r2, [r3, #0]
   da428:	07d1      	lsls	r1, r2, #31
   da42a:	bf5c      	itt	pl
   da42c:	2201      	movpl	r2, #1
   da42e:	601a      	strpl	r2, [r3, #0]
   da430:	4b14      	ldr	r3, [pc, #80]	; (da484 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   da432:	681a      	ldr	r2, [r3, #0]
   da434:	07d2      	lsls	r2, r2, #31
   da436:	bf5c      	itt	pl
   da438:	2201      	movpl	r2, #1
   da43a:	601a      	strpl	r2, [r3, #0]
   da43c:	4b12      	ldr	r3, [pc, #72]	; (da488 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   da43e:	681a      	ldr	r2, [r3, #0]
   da440:	07d0      	lsls	r0, r2, #31
   da442:	bf5c      	itt	pl
   da444:	2201      	movpl	r2, #1
   da446:	601a      	strpl	r2, [r3, #0]
   da448:	4b10      	ldr	r3, [pc, #64]	; (da48c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   da44a:	681a      	ldr	r2, [r3, #0]
   da44c:	07d1      	lsls	r1, r2, #31
   da44e:	bf5c      	itt	pl
   da450:	2201      	movpl	r2, #1
   da452:	601a      	strpl	r2, [r3, #0]
   da454:	4b0e      	ldr	r3, [pc, #56]	; (da490 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   da456:	681a      	ldr	r2, [r3, #0]
   da458:	07d2      	lsls	r2, r2, #31
   da45a:	bf5c      	itt	pl
   da45c:	2201      	movpl	r2, #1
   da45e:	601a      	strpl	r2, [r3, #0]
   da460:	4770      	bx	lr
   da462:	bf00      	nop
   da464:	2003e6a4 	.word	0x2003e6a4
   da468:	2003e6a0 	.word	0x2003e6a0
   da46c:	2003e69c 	.word	0x2003e69c
   da470:	2003e698 	.word	0x2003e698
   da474:	2003e694 	.word	0x2003e694
   da478:	2003e690 	.word	0x2003e690
   da47c:	2003e68c 	.word	0x2003e68c
   da480:	2003e688 	.word	0x2003e688
   da484:	2003e684 	.word	0x2003e684
   da488:	2003e680 	.word	0x2003e680
   da48c:	2003e67c 	.word	0x2003e67c
   da490:	2003e678 	.word	0x2003e678

000da494 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   da494:	4b18      	ldr	r3, [pc, #96]	; (da4f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   da496:	681a      	ldr	r2, [r3, #0]
   da498:	07d1      	lsls	r1, r2, #31
   da49a:	bf5c      	itt	pl
   da49c:	2201      	movpl	r2, #1
   da49e:	601a      	strpl	r2, [r3, #0]
   da4a0:	4b16      	ldr	r3, [pc, #88]	; (da4fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   da4a2:	681a      	ldr	r2, [r3, #0]
   da4a4:	07d2      	lsls	r2, r2, #31
   da4a6:	bf5c      	itt	pl
   da4a8:	2201      	movpl	r2, #1
   da4aa:	601a      	strpl	r2, [r3, #0]
   da4ac:	4b14      	ldr	r3, [pc, #80]	; (da500 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   da4ae:	681a      	ldr	r2, [r3, #0]
   da4b0:	07d0      	lsls	r0, r2, #31
   da4b2:	bf5c      	itt	pl
   da4b4:	2201      	movpl	r2, #1
   da4b6:	601a      	strpl	r2, [r3, #0]
   da4b8:	4b12      	ldr	r3, [pc, #72]	; (da504 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   da4ba:	681a      	ldr	r2, [r3, #0]
   da4bc:	07d1      	lsls	r1, r2, #31
   da4be:	bf5c      	itt	pl
   da4c0:	2201      	movpl	r2, #1
   da4c2:	601a      	strpl	r2, [r3, #0]
   da4c4:	4b10      	ldr	r3, [pc, #64]	; (da508 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   da4c6:	681a      	ldr	r2, [r3, #0]
   da4c8:	07d2      	lsls	r2, r2, #31
   da4ca:	bf5c      	itt	pl
   da4cc:	2201      	movpl	r2, #1
   da4ce:	601a      	strpl	r2, [r3, #0]
   da4d0:	4b0e      	ldr	r3, [pc, #56]	; (da50c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   da4d2:	681a      	ldr	r2, [r3, #0]
   da4d4:	07d0      	lsls	r0, r2, #31
   da4d6:	bf5c      	itt	pl
   da4d8:	2201      	movpl	r2, #1
   da4da:	601a      	strpl	r2, [r3, #0]
   da4dc:	4b0c      	ldr	r3, [pc, #48]	; (da510 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   da4de:	681a      	ldr	r2, [r3, #0]
   da4e0:	07d1      	lsls	r1, r2, #31
   da4e2:	bf5c      	itt	pl
   da4e4:	2201      	movpl	r2, #1
   da4e6:	601a      	strpl	r2, [r3, #0]
   da4e8:	4b0a      	ldr	r3, [pc, #40]	; (da514 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   da4ea:	681a      	ldr	r2, [r3, #0]
   da4ec:	07d2      	lsls	r2, r2, #31
   da4ee:	bf5c      	itt	pl
   da4f0:	2201      	movpl	r2, #1
   da4f2:	601a      	strpl	r2, [r3, #0]
   da4f4:	4770      	bx	lr
   da4f6:	bf00      	nop
   da4f8:	2003e6c4 	.word	0x2003e6c4
   da4fc:	2003e6c0 	.word	0x2003e6c0
   da500:	2003e6bc 	.word	0x2003e6bc
   da504:	2003e6b8 	.word	0x2003e6b8
   da508:	2003e6b4 	.word	0x2003e6b4
   da50c:	2003e6b0 	.word	0x2003e6b0
   da510:	2003e6ac 	.word	0x2003e6ac
   da514:	2003e6a8 	.word	0x2003e6a8

000da518 <sqrt>:
   da518:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   da51c:	ed2d 8b02 	vpush	{d8}
   da520:	b08b      	sub	sp, #44	; 0x2c
   da522:	ec55 4b10 	vmov	r4, r5, d0
   da526:	f000 f857 	bl	da5d8 <__ieee754_sqrt>
   da52a:	4b29      	ldr	r3, [pc, #164]	; (da5d0 <sqrt+0xb8>)
   da52c:	eeb0 8a40 	vmov.f32	s16, s0
   da530:	eef0 8a60 	vmov.f32	s17, s1
   da534:	f993 6000 	ldrsb.w	r6, [r3]
   da538:	1c73      	adds	r3, r6, #1
   da53a:	d012      	beq.n	da562 <sqrt+0x4a>
   da53c:	4622      	mov	r2, r4
   da53e:	462b      	mov	r3, r5
   da540:	4620      	mov	r0, r4
   da542:	4629      	mov	r1, r5
   da544:	f000 fd6c 	bl	db020 <__aeabi_dcmpun>
   da548:	4607      	mov	r7, r0
   da54a:	b950      	cbnz	r0, da562 <sqrt+0x4a>
   da54c:	f04f 0800 	mov.w	r8, #0
   da550:	f04f 0900 	mov.w	r9, #0
   da554:	4620      	mov	r0, r4
   da556:	4629      	mov	r1, r5
   da558:	4642      	mov	r2, r8
   da55a:	464b      	mov	r3, r9
   da55c:	f000 fd38 	bl	dafd0 <__aeabi_dcmplt>
   da560:	b940      	cbnz	r0, da574 <sqrt+0x5c>
   da562:	eeb0 0a48 	vmov.f32	s0, s16
   da566:	eef0 0a68 	vmov.f32	s1, s17
   da56a:	b00b      	add	sp, #44	; 0x2c
   da56c:	ecbd 8b02 	vpop	{d8}
   da570:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   da574:	4b17      	ldr	r3, [pc, #92]	; (da5d4 <sqrt+0xbc>)
   da576:	9708      	str	r7, [sp, #32]
   da578:	2201      	movs	r2, #1
   da57a:	e9cd 4504 	strd	r4, r5, [sp, #16]
   da57e:	e9cd 4502 	strd	r4, r5, [sp, #8]
   da582:	e88d 000c 	stmia.w	sp, {r2, r3}
   da586:	b1b6      	cbz	r6, da5b6 <sqrt+0x9e>
   da588:	4642      	mov	r2, r8
   da58a:	464b      	mov	r3, r9
   da58c:	4640      	mov	r0, r8
   da58e:	4649      	mov	r1, r9
   da590:	f000 fbd6 	bl	dad40 <__aeabi_ddiv>
   da594:	2e02      	cmp	r6, #2
   da596:	e9cd 0106 	strd	r0, r1, [sp, #24]
   da59a:	d10e      	bne.n	da5ba <sqrt+0xa2>
   da59c:	f7fd fc72 	bl	d7e84 <__errno>
   da5a0:	2321      	movs	r3, #33	; 0x21
   da5a2:	6003      	str	r3, [r0, #0]
   da5a4:	9b08      	ldr	r3, [sp, #32]
   da5a6:	b973      	cbnz	r3, da5c6 <sqrt+0xae>
   da5a8:	ed9d 0b06 	vldr	d0, [sp, #24]
   da5ac:	b00b      	add	sp, #44	; 0x2c
   da5ae:	ecbd 8b02 	vpop	{d8}
   da5b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   da5b6:	e9cd 8906 	strd	r8, r9, [sp, #24]
   da5ba:	4668      	mov	r0, sp
   da5bc:	f000 f8dc 	bl	da778 <matherr>
   da5c0:	2800      	cmp	r0, #0
   da5c2:	d1ef      	bne.n	da5a4 <sqrt+0x8c>
   da5c4:	e7ea      	b.n	da59c <sqrt+0x84>
   da5c6:	f7fd fc5d 	bl	d7e84 <__errno>
   da5ca:	9b08      	ldr	r3, [sp, #32]
   da5cc:	6003      	str	r3, [r0, #0]
   da5ce:	e7eb      	b.n	da5a8 <sqrt+0x90>
   da5d0:	2003dc10 	.word	0x2003dc10
   da5d4:	000dce38 	.word	0x000dce38

000da5d8 <__ieee754_sqrt>:
   da5d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da5dc:	4965      	ldr	r1, [pc, #404]	; (da774 <__ieee754_sqrt+0x19c>)
   da5de:	ec55 4b10 	vmov	r4, r5, d0
   da5e2:	460e      	mov	r6, r1
   da5e4:	4029      	ands	r1, r5
   da5e6:	42b1      	cmp	r1, r6
   da5e8:	f000 8097 	beq.w	da71a <__ieee754_sqrt+0x142>
   da5ec:	2d00      	cmp	r5, #0
   da5ee:	462b      	mov	r3, r5
   da5f0:	ee10 2a10 	vmov	r2, s0
   da5f4:	dd74      	ble.n	da6e0 <__ieee754_sqrt+0x108>
   da5f6:	152f      	asrs	r7, r5, #20
   da5f8:	d07f      	beq.n	da6fa <__ieee754_sqrt+0x122>
   da5fa:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   da5fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
   da602:	07f9      	lsls	r1, r7, #31
   da604:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   da608:	d465      	bmi.n	da6d6 <__ieee754_sqrt+0xfe>
   da60a:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
   da60e:	2600      	movs	r6, #0
   da610:	440b      	add	r3, r1
   da612:	107f      	asrs	r7, r7, #1
   da614:	0052      	lsls	r2, r2, #1
   da616:	46b6      	mov	lr, r6
   da618:	2016      	movs	r0, #22
   da61a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   da61e:	eb0e 0401 	add.w	r4, lr, r1
   da622:	429c      	cmp	r4, r3
   da624:	ea4f 75d2 	mov.w	r5, r2, lsr #31
   da628:	ea4f 0242 	mov.w	r2, r2, lsl #1
   da62c:	dc03      	bgt.n	da636 <__ieee754_sqrt+0x5e>
   da62e:	1b1b      	subs	r3, r3, r4
   da630:	eb04 0e01 	add.w	lr, r4, r1
   da634:	440e      	add	r6, r1
   da636:	3801      	subs	r0, #1
   da638:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   da63c:	ea4f 0151 	mov.w	r1, r1, lsr #1
   da640:	d1ed      	bne.n	da61e <__ieee754_sqrt+0x46>
   da642:	4684      	mov	ip, r0
   da644:	2420      	movs	r4, #32
   da646:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   da64a:	e009      	b.n	da660 <__ieee754_sqrt+0x88>
   da64c:	d020      	beq.n	da690 <__ieee754_sqrt+0xb8>
   da64e:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
   da652:	3c01      	subs	r4, #1
   da654:	ea4f 0151 	mov.w	r1, r1, lsr #1
   da658:	442b      	add	r3, r5
   da65a:	ea4f 0242 	mov.w	r2, r2, lsl #1
   da65e:	d020      	beq.n	da6a2 <__ieee754_sqrt+0xca>
   da660:	459e      	cmp	lr, r3
   da662:	eb01 050c 	add.w	r5, r1, ip
   da666:	daf1      	bge.n	da64c <__ieee754_sqrt+0x74>
   da668:	2d00      	cmp	r5, #0
   da66a:	eb05 0c01 	add.w	ip, r5, r1
   da66e:	db09      	blt.n	da684 <__ieee754_sqrt+0xac>
   da670:	46f0      	mov	r8, lr
   da672:	4295      	cmp	r5, r2
   da674:	ebce 0303 	rsb	r3, lr, r3
   da678:	d900      	bls.n	da67c <__ieee754_sqrt+0xa4>
   da67a:	3b01      	subs	r3, #1
   da67c:	1b52      	subs	r2, r2, r5
   da67e:	4408      	add	r0, r1
   da680:	46c6      	mov	lr, r8
   da682:	e7e4      	b.n	da64e <__ieee754_sqrt+0x76>
   da684:	f1bc 0f00 	cmp.w	ip, #0
   da688:	dbf2      	blt.n	da670 <__ieee754_sqrt+0x98>
   da68a:	f10e 0801 	add.w	r8, lr, #1
   da68e:	e7f0      	b.n	da672 <__ieee754_sqrt+0x9a>
   da690:	4295      	cmp	r5, r2
   da692:	d81e      	bhi.n	da6d2 <__ieee754_sqrt+0xfa>
   da694:	2d00      	cmp	r5, #0
   da696:	eb05 0c01 	add.w	ip, r5, r1
   da69a:	db50      	blt.n	da73e <__ieee754_sqrt+0x166>
   da69c:	4698      	mov	r8, r3
   da69e:	2300      	movs	r3, #0
   da6a0:	e7ec      	b.n	da67c <__ieee754_sqrt+0xa4>
   da6a2:	4313      	orrs	r3, r2
   da6a4:	d004      	beq.n	da6b0 <__ieee754_sqrt+0xd8>
   da6a6:	1c42      	adds	r2, r0, #1
   da6a8:	d04d      	beq.n	da746 <__ieee754_sqrt+0x16e>
   da6aa:	f000 0301 	and.w	r3, r0, #1
   da6ae:	4418      	add	r0, r3
   da6b0:	0840      	lsrs	r0, r0, #1
   da6b2:	1071      	asrs	r1, r6, #1
   da6b4:	07f3      	lsls	r3, r6, #31
   da6b6:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   da6ba:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   da6be:	bf48      	it	mi
   da6c0:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   da6c4:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   da6c8:	4602      	mov	r2, r0
   da6ca:	ec43 2b10 	vmov	d0, r2, r3
   da6ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   da6d2:	4673      	mov	r3, lr
   da6d4:	e7bb      	b.n	da64e <__ieee754_sqrt+0x76>
   da6d6:	005b      	lsls	r3, r3, #1
   da6d8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   da6dc:	0052      	lsls	r2, r2, #1
   da6de:	e794      	b.n	da60a <__ieee754_sqrt+0x32>
   da6e0:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
   da6e4:	4321      	orrs	r1, r4
   da6e6:	d028      	beq.n	da73a <__ieee754_sqrt+0x162>
   da6e8:	bbad      	cbnz	r5, da756 <__ieee754_sqrt+0x17e>
   da6ea:	462f      	mov	r7, r5
   da6ec:	0ad3      	lsrs	r3, r2, #11
   da6ee:	3f15      	subs	r7, #21
   da6f0:	0552      	lsls	r2, r2, #21
   da6f2:	2b00      	cmp	r3, #0
   da6f4:	d0fa      	beq.n	da6ec <__ieee754_sqrt+0x114>
   da6f6:	02dd      	lsls	r5, r3, #11
   da6f8:	d428      	bmi.n	da74c <__ieee754_sqrt+0x174>
   da6fa:	2100      	movs	r1, #0
   da6fc:	e000      	b.n	da700 <__ieee754_sqrt+0x128>
   da6fe:	4601      	mov	r1, r0
   da700:	005b      	lsls	r3, r3, #1
   da702:	02dc      	lsls	r4, r3, #11
   da704:	f101 0001 	add.w	r0, r1, #1
   da708:	d5f9      	bpl.n	da6fe <__ieee754_sqrt+0x126>
   da70a:	f1c0 0420 	rsb	r4, r0, #32
   da70e:	fa22 f404 	lsr.w	r4, r2, r4
   da712:	4323      	orrs	r3, r4
   da714:	1a7f      	subs	r7, r7, r1
   da716:	4082      	lsls	r2, r0
   da718:	e76f      	b.n	da5fa <__ieee754_sqrt+0x22>
   da71a:	ee10 2a10 	vmov	r2, s0
   da71e:	462b      	mov	r3, r5
   da720:	ee10 0a10 	vmov	r0, s0
   da724:	4629      	mov	r1, r5
   da726:	f000 f9e1 	bl	daaec <__aeabi_dmul>
   da72a:	4622      	mov	r2, r4
   da72c:	462b      	mov	r3, r5
   da72e:	f000 f82b 	bl	da788 <__adddf3>
   da732:	ec41 0b10 	vmov	d0, r0, r1
   da736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   da73a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   da73e:	f1bc 0f00 	cmp.w	ip, #0
   da742:	daa2      	bge.n	da68a <__ieee754_sqrt+0xb2>
   da744:	e7aa      	b.n	da69c <__ieee754_sqrt+0xc4>
   da746:	3601      	adds	r6, #1
   da748:	4620      	mov	r0, r4
   da74a:	e7b2      	b.n	da6b2 <__ieee754_sqrt+0xda>
   da74c:	2420      	movs	r4, #32
   da74e:	f04f 31ff 	mov.w	r1, #4294967295
   da752:	2000      	movs	r0, #0
   da754:	e7db      	b.n	da70e <__ieee754_sqrt+0x136>
   da756:	ee10 2a10 	vmov	r2, s0
   da75a:	462b      	mov	r3, r5
   da75c:	4620      	mov	r0, r4
   da75e:	4629      	mov	r1, r5
   da760:	f000 f810 	bl	da784 <__aeabi_dsub>
   da764:	4602      	mov	r2, r0
   da766:	460b      	mov	r3, r1
   da768:	f000 faea 	bl	dad40 <__aeabi_ddiv>
   da76c:	ec41 0b10 	vmov	d0, r0, r1
   da770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   da774:	7ff00000 	.word	0x7ff00000

000da778 <matherr>:
   da778:	2000      	movs	r0, #0
   da77a:	4770      	bx	lr

000da77c <__aeabi_drsub>:
   da77c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   da780:	e002      	b.n	da788 <__adddf3>
   da782:	bf00      	nop

000da784 <__aeabi_dsub>:
   da784:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000da788 <__adddf3>:
   da788:	b530      	push	{r4, r5, lr}
   da78a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   da78e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   da792:	ea94 0f05 	teq	r4, r5
   da796:	bf08      	it	eq
   da798:	ea90 0f02 	teqeq	r0, r2
   da79c:	bf1f      	itttt	ne
   da79e:	ea54 0c00 	orrsne.w	ip, r4, r0
   da7a2:	ea55 0c02 	orrsne.w	ip, r5, r2
   da7a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   da7aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   da7ae:	f000 80e2 	beq.w	da976 <__adddf3+0x1ee>
   da7b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   da7b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   da7ba:	bfb8      	it	lt
   da7bc:	426d      	neglt	r5, r5
   da7be:	dd0c      	ble.n	da7da <__adddf3+0x52>
   da7c0:	442c      	add	r4, r5
   da7c2:	ea80 0202 	eor.w	r2, r0, r2
   da7c6:	ea81 0303 	eor.w	r3, r1, r3
   da7ca:	ea82 0000 	eor.w	r0, r2, r0
   da7ce:	ea83 0101 	eor.w	r1, r3, r1
   da7d2:	ea80 0202 	eor.w	r2, r0, r2
   da7d6:	ea81 0303 	eor.w	r3, r1, r3
   da7da:	2d36      	cmp	r5, #54	; 0x36
   da7dc:	bf88      	it	hi
   da7de:	bd30      	pophi	{r4, r5, pc}
   da7e0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   da7e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   da7e8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   da7ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   da7f0:	d002      	beq.n	da7f8 <__adddf3+0x70>
   da7f2:	4240      	negs	r0, r0
   da7f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da7f8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   da7fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   da800:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   da804:	d002      	beq.n	da80c <__adddf3+0x84>
   da806:	4252      	negs	r2, r2
   da808:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   da80c:	ea94 0f05 	teq	r4, r5
   da810:	f000 80a7 	beq.w	da962 <__adddf3+0x1da>
   da814:	f1a4 0401 	sub.w	r4, r4, #1
   da818:	f1d5 0e20 	rsbs	lr, r5, #32
   da81c:	db0d      	blt.n	da83a <__adddf3+0xb2>
   da81e:	fa02 fc0e 	lsl.w	ip, r2, lr
   da822:	fa22 f205 	lsr.w	r2, r2, r5
   da826:	1880      	adds	r0, r0, r2
   da828:	f141 0100 	adc.w	r1, r1, #0
   da82c:	fa03 f20e 	lsl.w	r2, r3, lr
   da830:	1880      	adds	r0, r0, r2
   da832:	fa43 f305 	asr.w	r3, r3, r5
   da836:	4159      	adcs	r1, r3
   da838:	e00e      	b.n	da858 <__adddf3+0xd0>
   da83a:	f1a5 0520 	sub.w	r5, r5, #32
   da83e:	f10e 0e20 	add.w	lr, lr, #32
   da842:	2a01      	cmp	r2, #1
   da844:	fa03 fc0e 	lsl.w	ip, r3, lr
   da848:	bf28      	it	cs
   da84a:	f04c 0c02 	orrcs.w	ip, ip, #2
   da84e:	fa43 f305 	asr.w	r3, r3, r5
   da852:	18c0      	adds	r0, r0, r3
   da854:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   da858:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   da85c:	d507      	bpl.n	da86e <__adddf3+0xe6>
   da85e:	f04f 0e00 	mov.w	lr, #0
   da862:	f1dc 0c00 	rsbs	ip, ip, #0
   da866:	eb7e 0000 	sbcs.w	r0, lr, r0
   da86a:	eb6e 0101 	sbc.w	r1, lr, r1
   da86e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   da872:	d31b      	bcc.n	da8ac <__adddf3+0x124>
   da874:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   da878:	d30c      	bcc.n	da894 <__adddf3+0x10c>
   da87a:	0849      	lsrs	r1, r1, #1
   da87c:	ea5f 0030 	movs.w	r0, r0, rrx
   da880:	ea4f 0c3c 	mov.w	ip, ip, rrx
   da884:	f104 0401 	add.w	r4, r4, #1
   da888:	ea4f 5244 	mov.w	r2, r4, lsl #21
   da88c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   da890:	f080 809a 	bcs.w	da9c8 <__adddf3+0x240>
   da894:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   da898:	bf08      	it	eq
   da89a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   da89e:	f150 0000 	adcs.w	r0, r0, #0
   da8a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   da8a6:	ea41 0105 	orr.w	r1, r1, r5
   da8aa:	bd30      	pop	{r4, r5, pc}
   da8ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   da8b0:	4140      	adcs	r0, r0
   da8b2:	eb41 0101 	adc.w	r1, r1, r1
   da8b6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   da8ba:	f1a4 0401 	sub.w	r4, r4, #1
   da8be:	d1e9      	bne.n	da894 <__adddf3+0x10c>
   da8c0:	f091 0f00 	teq	r1, #0
   da8c4:	bf04      	itt	eq
   da8c6:	4601      	moveq	r1, r0
   da8c8:	2000      	moveq	r0, #0
   da8ca:	fab1 f381 	clz	r3, r1
   da8ce:	bf08      	it	eq
   da8d0:	3320      	addeq	r3, #32
   da8d2:	f1a3 030b 	sub.w	r3, r3, #11
   da8d6:	f1b3 0220 	subs.w	r2, r3, #32
   da8da:	da0c      	bge.n	da8f6 <__adddf3+0x16e>
   da8dc:	320c      	adds	r2, #12
   da8de:	dd08      	ble.n	da8f2 <__adddf3+0x16a>
   da8e0:	f102 0c14 	add.w	ip, r2, #20
   da8e4:	f1c2 020c 	rsb	r2, r2, #12
   da8e8:	fa01 f00c 	lsl.w	r0, r1, ip
   da8ec:	fa21 f102 	lsr.w	r1, r1, r2
   da8f0:	e00c      	b.n	da90c <__adddf3+0x184>
   da8f2:	f102 0214 	add.w	r2, r2, #20
   da8f6:	bfd8      	it	le
   da8f8:	f1c2 0c20 	rsble	ip, r2, #32
   da8fc:	fa01 f102 	lsl.w	r1, r1, r2
   da900:	fa20 fc0c 	lsr.w	ip, r0, ip
   da904:	bfdc      	itt	le
   da906:	ea41 010c 	orrle.w	r1, r1, ip
   da90a:	4090      	lslle	r0, r2
   da90c:	1ae4      	subs	r4, r4, r3
   da90e:	bfa2      	ittt	ge
   da910:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   da914:	4329      	orrge	r1, r5
   da916:	bd30      	popge	{r4, r5, pc}
   da918:	ea6f 0404 	mvn.w	r4, r4
   da91c:	3c1f      	subs	r4, #31
   da91e:	da1c      	bge.n	da95a <__adddf3+0x1d2>
   da920:	340c      	adds	r4, #12
   da922:	dc0e      	bgt.n	da942 <__adddf3+0x1ba>
   da924:	f104 0414 	add.w	r4, r4, #20
   da928:	f1c4 0220 	rsb	r2, r4, #32
   da92c:	fa20 f004 	lsr.w	r0, r0, r4
   da930:	fa01 f302 	lsl.w	r3, r1, r2
   da934:	ea40 0003 	orr.w	r0, r0, r3
   da938:	fa21 f304 	lsr.w	r3, r1, r4
   da93c:	ea45 0103 	orr.w	r1, r5, r3
   da940:	bd30      	pop	{r4, r5, pc}
   da942:	f1c4 040c 	rsb	r4, r4, #12
   da946:	f1c4 0220 	rsb	r2, r4, #32
   da94a:	fa20 f002 	lsr.w	r0, r0, r2
   da94e:	fa01 f304 	lsl.w	r3, r1, r4
   da952:	ea40 0003 	orr.w	r0, r0, r3
   da956:	4629      	mov	r1, r5
   da958:	bd30      	pop	{r4, r5, pc}
   da95a:	fa21 f004 	lsr.w	r0, r1, r4
   da95e:	4629      	mov	r1, r5
   da960:	bd30      	pop	{r4, r5, pc}
   da962:	f094 0f00 	teq	r4, #0
   da966:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   da96a:	bf06      	itte	eq
   da96c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   da970:	3401      	addeq	r4, #1
   da972:	3d01      	subne	r5, #1
   da974:	e74e      	b.n	da814 <__adddf3+0x8c>
   da976:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   da97a:	bf18      	it	ne
   da97c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   da980:	d029      	beq.n	da9d6 <__adddf3+0x24e>
   da982:	ea94 0f05 	teq	r4, r5
   da986:	bf08      	it	eq
   da988:	ea90 0f02 	teqeq	r0, r2
   da98c:	d005      	beq.n	da99a <__adddf3+0x212>
   da98e:	ea54 0c00 	orrs.w	ip, r4, r0
   da992:	bf04      	itt	eq
   da994:	4619      	moveq	r1, r3
   da996:	4610      	moveq	r0, r2
   da998:	bd30      	pop	{r4, r5, pc}
   da99a:	ea91 0f03 	teq	r1, r3
   da99e:	bf1e      	ittt	ne
   da9a0:	2100      	movne	r1, #0
   da9a2:	2000      	movne	r0, #0
   da9a4:	bd30      	popne	{r4, r5, pc}
   da9a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   da9aa:	d105      	bne.n	da9b8 <__adddf3+0x230>
   da9ac:	0040      	lsls	r0, r0, #1
   da9ae:	4149      	adcs	r1, r1
   da9b0:	bf28      	it	cs
   da9b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   da9b6:	bd30      	pop	{r4, r5, pc}
   da9b8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   da9bc:	bf3c      	itt	cc
   da9be:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   da9c2:	bd30      	popcc	{r4, r5, pc}
   da9c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   da9c8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   da9cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   da9d0:	f04f 0000 	mov.w	r0, #0
   da9d4:	bd30      	pop	{r4, r5, pc}
   da9d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   da9da:	bf1a      	itte	ne
   da9dc:	4619      	movne	r1, r3
   da9de:	4610      	movne	r0, r2
   da9e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   da9e4:	bf1c      	itt	ne
   da9e6:	460b      	movne	r3, r1
   da9e8:	4602      	movne	r2, r0
   da9ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   da9ee:	bf06      	itte	eq
   da9f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   da9f4:	ea91 0f03 	teqeq	r1, r3
   da9f8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   da9fc:	bd30      	pop	{r4, r5, pc}
   da9fe:	bf00      	nop

000daa00 <__aeabi_ui2d>:
   daa00:	f090 0f00 	teq	r0, #0
   daa04:	bf04      	itt	eq
   daa06:	2100      	moveq	r1, #0
   daa08:	4770      	bxeq	lr
   daa0a:	b530      	push	{r4, r5, lr}
   daa0c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   daa10:	f104 0432 	add.w	r4, r4, #50	; 0x32
   daa14:	f04f 0500 	mov.w	r5, #0
   daa18:	f04f 0100 	mov.w	r1, #0
   daa1c:	e750      	b.n	da8c0 <__adddf3+0x138>
   daa1e:	bf00      	nop

000daa20 <__aeabi_i2d>:
   daa20:	f090 0f00 	teq	r0, #0
   daa24:	bf04      	itt	eq
   daa26:	2100      	moveq	r1, #0
   daa28:	4770      	bxeq	lr
   daa2a:	b530      	push	{r4, r5, lr}
   daa2c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   daa30:	f104 0432 	add.w	r4, r4, #50	; 0x32
   daa34:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   daa38:	bf48      	it	mi
   daa3a:	4240      	negmi	r0, r0
   daa3c:	f04f 0100 	mov.w	r1, #0
   daa40:	e73e      	b.n	da8c0 <__adddf3+0x138>
   daa42:	bf00      	nop

000daa44 <__aeabi_f2d>:
   daa44:	0042      	lsls	r2, r0, #1
   daa46:	ea4f 01e2 	mov.w	r1, r2, asr #3
   daa4a:	ea4f 0131 	mov.w	r1, r1, rrx
   daa4e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   daa52:	bf1f      	itttt	ne
   daa54:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   daa58:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   daa5c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   daa60:	4770      	bxne	lr
   daa62:	f092 0f00 	teq	r2, #0
   daa66:	bf14      	ite	ne
   daa68:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   daa6c:	4770      	bxeq	lr
   daa6e:	b530      	push	{r4, r5, lr}
   daa70:	f44f 7460 	mov.w	r4, #896	; 0x380
   daa74:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   daa78:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   daa7c:	e720      	b.n	da8c0 <__adddf3+0x138>
   daa7e:	bf00      	nop

000daa80 <__aeabi_ul2d>:
   daa80:	ea50 0201 	orrs.w	r2, r0, r1
   daa84:	bf08      	it	eq
   daa86:	4770      	bxeq	lr
   daa88:	b530      	push	{r4, r5, lr}
   daa8a:	f04f 0500 	mov.w	r5, #0
   daa8e:	e00a      	b.n	daaa6 <__aeabi_l2d+0x16>

000daa90 <__aeabi_l2d>:
   daa90:	ea50 0201 	orrs.w	r2, r0, r1
   daa94:	bf08      	it	eq
   daa96:	4770      	bxeq	lr
   daa98:	b530      	push	{r4, r5, lr}
   daa9a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   daa9e:	d502      	bpl.n	daaa6 <__aeabi_l2d+0x16>
   daaa0:	4240      	negs	r0, r0
   daaa2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   daaa6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   daaaa:	f104 0432 	add.w	r4, r4, #50	; 0x32
   daaae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   daab2:	f43f aedc 	beq.w	da86e <__adddf3+0xe6>
   daab6:	f04f 0203 	mov.w	r2, #3
   daaba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   daabe:	bf18      	it	ne
   daac0:	3203      	addne	r2, #3
   daac2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   daac6:	bf18      	it	ne
   daac8:	3203      	addne	r2, #3
   daaca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   daace:	f1c2 0320 	rsb	r3, r2, #32
   daad2:	fa00 fc03 	lsl.w	ip, r0, r3
   daad6:	fa20 f002 	lsr.w	r0, r0, r2
   daada:	fa01 fe03 	lsl.w	lr, r1, r3
   daade:	ea40 000e 	orr.w	r0, r0, lr
   daae2:	fa21 f102 	lsr.w	r1, r1, r2
   daae6:	4414      	add	r4, r2
   daae8:	e6c1      	b.n	da86e <__adddf3+0xe6>
   daaea:	bf00      	nop

000daaec <__aeabi_dmul>:
   daaec:	b570      	push	{r4, r5, r6, lr}
   daaee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   daaf2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   daaf6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   daafa:	bf1d      	ittte	ne
   daafc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   dab00:	ea94 0f0c 	teqne	r4, ip
   dab04:	ea95 0f0c 	teqne	r5, ip
   dab08:	f000 f8de 	bleq	dacc8 <__aeabi_dmul+0x1dc>
   dab0c:	442c      	add	r4, r5
   dab0e:	ea81 0603 	eor.w	r6, r1, r3
   dab12:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   dab16:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   dab1a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   dab1e:	bf18      	it	ne
   dab20:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   dab24:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dab28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   dab2c:	d038      	beq.n	daba0 <__aeabi_dmul+0xb4>
   dab2e:	fba0 ce02 	umull	ip, lr, r0, r2
   dab32:	f04f 0500 	mov.w	r5, #0
   dab36:	fbe1 e502 	umlal	lr, r5, r1, r2
   dab3a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   dab3e:	fbe0 e503 	umlal	lr, r5, r0, r3
   dab42:	f04f 0600 	mov.w	r6, #0
   dab46:	fbe1 5603 	umlal	r5, r6, r1, r3
   dab4a:	f09c 0f00 	teq	ip, #0
   dab4e:	bf18      	it	ne
   dab50:	f04e 0e01 	orrne.w	lr, lr, #1
   dab54:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   dab58:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   dab5c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   dab60:	d204      	bcs.n	dab6c <__aeabi_dmul+0x80>
   dab62:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   dab66:	416d      	adcs	r5, r5
   dab68:	eb46 0606 	adc.w	r6, r6, r6
   dab6c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   dab70:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   dab74:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   dab78:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   dab7c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   dab80:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dab84:	bf88      	it	hi
   dab86:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dab8a:	d81e      	bhi.n	dabca <__aeabi_dmul+0xde>
   dab8c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   dab90:	bf08      	it	eq
   dab92:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   dab96:	f150 0000 	adcs.w	r0, r0, #0
   dab9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dab9e:	bd70      	pop	{r4, r5, r6, pc}
   daba0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   daba4:	ea46 0101 	orr.w	r1, r6, r1
   daba8:	ea40 0002 	orr.w	r0, r0, r2
   dabac:	ea81 0103 	eor.w	r1, r1, r3
   dabb0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   dabb4:	bfc2      	ittt	gt
   dabb6:	ebd4 050c 	rsbsgt	r5, r4, ip
   dabba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   dabbe:	bd70      	popgt	{r4, r5, r6, pc}
   dabc0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dabc4:	f04f 0e00 	mov.w	lr, #0
   dabc8:	3c01      	subs	r4, #1
   dabca:	f300 80ab 	bgt.w	dad24 <__aeabi_dmul+0x238>
   dabce:	f114 0f36 	cmn.w	r4, #54	; 0x36
   dabd2:	bfde      	ittt	le
   dabd4:	2000      	movle	r0, #0
   dabd6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   dabda:	bd70      	pople	{r4, r5, r6, pc}
   dabdc:	f1c4 0400 	rsb	r4, r4, #0
   dabe0:	3c20      	subs	r4, #32
   dabe2:	da35      	bge.n	dac50 <__aeabi_dmul+0x164>
   dabe4:	340c      	adds	r4, #12
   dabe6:	dc1b      	bgt.n	dac20 <__aeabi_dmul+0x134>
   dabe8:	f104 0414 	add.w	r4, r4, #20
   dabec:	f1c4 0520 	rsb	r5, r4, #32
   dabf0:	fa00 f305 	lsl.w	r3, r0, r5
   dabf4:	fa20 f004 	lsr.w	r0, r0, r4
   dabf8:	fa01 f205 	lsl.w	r2, r1, r5
   dabfc:	ea40 0002 	orr.w	r0, r0, r2
   dac00:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   dac04:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   dac08:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   dac0c:	fa21 f604 	lsr.w	r6, r1, r4
   dac10:	eb42 0106 	adc.w	r1, r2, r6
   dac14:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dac18:	bf08      	it	eq
   dac1a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dac1e:	bd70      	pop	{r4, r5, r6, pc}
   dac20:	f1c4 040c 	rsb	r4, r4, #12
   dac24:	f1c4 0520 	rsb	r5, r4, #32
   dac28:	fa00 f304 	lsl.w	r3, r0, r4
   dac2c:	fa20 f005 	lsr.w	r0, r0, r5
   dac30:	fa01 f204 	lsl.w	r2, r1, r4
   dac34:	ea40 0002 	orr.w	r0, r0, r2
   dac38:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dac3c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   dac40:	f141 0100 	adc.w	r1, r1, #0
   dac44:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dac48:	bf08      	it	eq
   dac4a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dac4e:	bd70      	pop	{r4, r5, r6, pc}
   dac50:	f1c4 0520 	rsb	r5, r4, #32
   dac54:	fa00 f205 	lsl.w	r2, r0, r5
   dac58:	ea4e 0e02 	orr.w	lr, lr, r2
   dac5c:	fa20 f304 	lsr.w	r3, r0, r4
   dac60:	fa01 f205 	lsl.w	r2, r1, r5
   dac64:	ea43 0302 	orr.w	r3, r3, r2
   dac68:	fa21 f004 	lsr.w	r0, r1, r4
   dac6c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dac70:	fa21 f204 	lsr.w	r2, r1, r4
   dac74:	ea20 0002 	bic.w	r0, r0, r2
   dac78:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   dac7c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dac80:	bf08      	it	eq
   dac82:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dac86:	bd70      	pop	{r4, r5, r6, pc}
   dac88:	f094 0f00 	teq	r4, #0
   dac8c:	d10f      	bne.n	dacae <__aeabi_dmul+0x1c2>
   dac8e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   dac92:	0040      	lsls	r0, r0, #1
   dac94:	eb41 0101 	adc.w	r1, r1, r1
   dac98:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dac9c:	bf08      	it	eq
   dac9e:	3c01      	subeq	r4, #1
   daca0:	d0f7      	beq.n	dac92 <__aeabi_dmul+0x1a6>
   daca2:	ea41 0106 	orr.w	r1, r1, r6
   daca6:	f095 0f00 	teq	r5, #0
   dacaa:	bf18      	it	ne
   dacac:	4770      	bxne	lr
   dacae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   dacb2:	0052      	lsls	r2, r2, #1
   dacb4:	eb43 0303 	adc.w	r3, r3, r3
   dacb8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   dacbc:	bf08      	it	eq
   dacbe:	3d01      	subeq	r5, #1
   dacc0:	d0f7      	beq.n	dacb2 <__aeabi_dmul+0x1c6>
   dacc2:	ea43 0306 	orr.w	r3, r3, r6
   dacc6:	4770      	bx	lr
   dacc8:	ea94 0f0c 	teq	r4, ip
   daccc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dacd0:	bf18      	it	ne
   dacd2:	ea95 0f0c 	teqne	r5, ip
   dacd6:	d00c      	beq.n	dacf2 <__aeabi_dmul+0x206>
   dacd8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dacdc:	bf18      	it	ne
   dacde:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dace2:	d1d1      	bne.n	dac88 <__aeabi_dmul+0x19c>
   dace4:	ea81 0103 	eor.w	r1, r1, r3
   dace8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dacec:	f04f 0000 	mov.w	r0, #0
   dacf0:	bd70      	pop	{r4, r5, r6, pc}
   dacf2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dacf6:	bf06      	itte	eq
   dacf8:	4610      	moveq	r0, r2
   dacfa:	4619      	moveq	r1, r3
   dacfc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dad00:	d019      	beq.n	dad36 <__aeabi_dmul+0x24a>
   dad02:	ea94 0f0c 	teq	r4, ip
   dad06:	d102      	bne.n	dad0e <__aeabi_dmul+0x222>
   dad08:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   dad0c:	d113      	bne.n	dad36 <__aeabi_dmul+0x24a>
   dad0e:	ea95 0f0c 	teq	r5, ip
   dad12:	d105      	bne.n	dad20 <__aeabi_dmul+0x234>
   dad14:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   dad18:	bf1c      	itt	ne
   dad1a:	4610      	movne	r0, r2
   dad1c:	4619      	movne	r1, r3
   dad1e:	d10a      	bne.n	dad36 <__aeabi_dmul+0x24a>
   dad20:	ea81 0103 	eor.w	r1, r1, r3
   dad24:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dad28:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   dad2c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   dad30:	f04f 0000 	mov.w	r0, #0
   dad34:	bd70      	pop	{r4, r5, r6, pc}
   dad36:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   dad3a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   dad3e:	bd70      	pop	{r4, r5, r6, pc}

000dad40 <__aeabi_ddiv>:
   dad40:	b570      	push	{r4, r5, r6, lr}
   dad42:	f04f 0cff 	mov.w	ip, #255	; 0xff
   dad46:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   dad4a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   dad4e:	bf1d      	ittte	ne
   dad50:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   dad54:	ea94 0f0c 	teqne	r4, ip
   dad58:	ea95 0f0c 	teqne	r5, ip
   dad5c:	f000 f8a7 	bleq	daeae <__aeabi_ddiv+0x16e>
   dad60:	eba4 0405 	sub.w	r4, r4, r5
   dad64:	ea81 0e03 	eor.w	lr, r1, r3
   dad68:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dad6c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   dad70:	f000 8088 	beq.w	dae84 <__aeabi_ddiv+0x144>
   dad74:	ea4f 3303 	mov.w	r3, r3, lsl #12
   dad78:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   dad7c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   dad80:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   dad84:	ea4f 2202 	mov.w	r2, r2, lsl #8
   dad88:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   dad8c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   dad90:	ea4f 2600 	mov.w	r6, r0, lsl #8
   dad94:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   dad98:	429d      	cmp	r5, r3
   dad9a:	bf08      	it	eq
   dad9c:	4296      	cmpeq	r6, r2
   dad9e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   dada2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   dada6:	d202      	bcs.n	dadae <__aeabi_ddiv+0x6e>
   dada8:	085b      	lsrs	r3, r3, #1
   dadaa:	ea4f 0232 	mov.w	r2, r2, rrx
   dadae:	1ab6      	subs	r6, r6, r2
   dadb0:	eb65 0503 	sbc.w	r5, r5, r3
   dadb4:	085b      	lsrs	r3, r3, #1
   dadb6:	ea4f 0232 	mov.w	r2, r2, rrx
   dadba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   dadbe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   dadc2:	ebb6 0e02 	subs.w	lr, r6, r2
   dadc6:	eb75 0e03 	sbcs.w	lr, r5, r3
   dadca:	bf22      	ittt	cs
   dadcc:	1ab6      	subcs	r6, r6, r2
   dadce:	4675      	movcs	r5, lr
   dadd0:	ea40 000c 	orrcs.w	r0, r0, ip
   dadd4:	085b      	lsrs	r3, r3, #1
   dadd6:	ea4f 0232 	mov.w	r2, r2, rrx
   dadda:	ebb6 0e02 	subs.w	lr, r6, r2
   dadde:	eb75 0e03 	sbcs.w	lr, r5, r3
   dade2:	bf22      	ittt	cs
   dade4:	1ab6      	subcs	r6, r6, r2
   dade6:	4675      	movcs	r5, lr
   dade8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   dadec:	085b      	lsrs	r3, r3, #1
   dadee:	ea4f 0232 	mov.w	r2, r2, rrx
   dadf2:	ebb6 0e02 	subs.w	lr, r6, r2
   dadf6:	eb75 0e03 	sbcs.w	lr, r5, r3
   dadfa:	bf22      	ittt	cs
   dadfc:	1ab6      	subcs	r6, r6, r2
   dadfe:	4675      	movcs	r5, lr
   dae00:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   dae04:	085b      	lsrs	r3, r3, #1
   dae06:	ea4f 0232 	mov.w	r2, r2, rrx
   dae0a:	ebb6 0e02 	subs.w	lr, r6, r2
   dae0e:	eb75 0e03 	sbcs.w	lr, r5, r3
   dae12:	bf22      	ittt	cs
   dae14:	1ab6      	subcs	r6, r6, r2
   dae16:	4675      	movcs	r5, lr
   dae18:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   dae1c:	ea55 0e06 	orrs.w	lr, r5, r6
   dae20:	d018      	beq.n	dae54 <__aeabi_ddiv+0x114>
   dae22:	ea4f 1505 	mov.w	r5, r5, lsl #4
   dae26:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   dae2a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   dae2e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   dae32:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   dae36:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   dae3a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   dae3e:	d1c0      	bne.n	dadc2 <__aeabi_ddiv+0x82>
   dae40:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dae44:	d10b      	bne.n	dae5e <__aeabi_ddiv+0x11e>
   dae46:	ea41 0100 	orr.w	r1, r1, r0
   dae4a:	f04f 0000 	mov.w	r0, #0
   dae4e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   dae52:	e7b6      	b.n	dadc2 <__aeabi_ddiv+0x82>
   dae54:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dae58:	bf04      	itt	eq
   dae5a:	4301      	orreq	r1, r0
   dae5c:	2000      	moveq	r0, #0
   dae5e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dae62:	bf88      	it	hi
   dae64:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dae68:	f63f aeaf 	bhi.w	dabca <__aeabi_dmul+0xde>
   dae6c:	ebb5 0c03 	subs.w	ip, r5, r3
   dae70:	bf04      	itt	eq
   dae72:	ebb6 0c02 	subseq.w	ip, r6, r2
   dae76:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   dae7a:	f150 0000 	adcs.w	r0, r0, #0
   dae7e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dae82:	bd70      	pop	{r4, r5, r6, pc}
   dae84:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   dae88:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   dae8c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   dae90:	bfc2      	ittt	gt
   dae92:	ebd4 050c 	rsbsgt	r5, r4, ip
   dae96:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   dae9a:	bd70      	popgt	{r4, r5, r6, pc}
   dae9c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   daea0:	f04f 0e00 	mov.w	lr, #0
   daea4:	3c01      	subs	r4, #1
   daea6:	e690      	b.n	dabca <__aeabi_dmul+0xde>
   daea8:	ea45 0e06 	orr.w	lr, r5, r6
   daeac:	e68d      	b.n	dabca <__aeabi_dmul+0xde>
   daeae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   daeb2:	ea94 0f0c 	teq	r4, ip
   daeb6:	bf08      	it	eq
   daeb8:	ea95 0f0c 	teqeq	r5, ip
   daebc:	f43f af3b 	beq.w	dad36 <__aeabi_dmul+0x24a>
   daec0:	ea94 0f0c 	teq	r4, ip
   daec4:	d10a      	bne.n	daedc <__aeabi_ddiv+0x19c>
   daec6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   daeca:	f47f af34 	bne.w	dad36 <__aeabi_dmul+0x24a>
   daece:	ea95 0f0c 	teq	r5, ip
   daed2:	f47f af25 	bne.w	dad20 <__aeabi_dmul+0x234>
   daed6:	4610      	mov	r0, r2
   daed8:	4619      	mov	r1, r3
   daeda:	e72c      	b.n	dad36 <__aeabi_dmul+0x24a>
   daedc:	ea95 0f0c 	teq	r5, ip
   daee0:	d106      	bne.n	daef0 <__aeabi_ddiv+0x1b0>
   daee2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   daee6:	f43f aefd 	beq.w	dace4 <__aeabi_dmul+0x1f8>
   daeea:	4610      	mov	r0, r2
   daeec:	4619      	mov	r1, r3
   daeee:	e722      	b.n	dad36 <__aeabi_dmul+0x24a>
   daef0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   daef4:	bf18      	it	ne
   daef6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   daefa:	f47f aec5 	bne.w	dac88 <__aeabi_dmul+0x19c>
   daefe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   daf02:	f47f af0d 	bne.w	dad20 <__aeabi_dmul+0x234>
   daf06:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   daf0a:	f47f aeeb 	bne.w	dace4 <__aeabi_dmul+0x1f8>
   daf0e:	e712      	b.n	dad36 <__aeabi_dmul+0x24a>

000daf10 <__gedf2>:
   daf10:	f04f 3cff 	mov.w	ip, #4294967295
   daf14:	e006      	b.n	daf24 <__cmpdf2+0x4>
   daf16:	bf00      	nop

000daf18 <__ledf2>:
   daf18:	f04f 0c01 	mov.w	ip, #1
   daf1c:	e002      	b.n	daf24 <__cmpdf2+0x4>
   daf1e:	bf00      	nop

000daf20 <__cmpdf2>:
   daf20:	f04f 0c01 	mov.w	ip, #1
   daf24:	f84d cd04 	str.w	ip, [sp, #-4]!
   daf28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   daf2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   daf30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   daf34:	bf18      	it	ne
   daf36:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   daf3a:	d01b      	beq.n	daf74 <__cmpdf2+0x54>
   daf3c:	b001      	add	sp, #4
   daf3e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   daf42:	bf0c      	ite	eq
   daf44:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   daf48:	ea91 0f03 	teqne	r1, r3
   daf4c:	bf02      	ittt	eq
   daf4e:	ea90 0f02 	teqeq	r0, r2
   daf52:	2000      	moveq	r0, #0
   daf54:	4770      	bxeq	lr
   daf56:	f110 0f00 	cmn.w	r0, #0
   daf5a:	ea91 0f03 	teq	r1, r3
   daf5e:	bf58      	it	pl
   daf60:	4299      	cmppl	r1, r3
   daf62:	bf08      	it	eq
   daf64:	4290      	cmpeq	r0, r2
   daf66:	bf2c      	ite	cs
   daf68:	17d8      	asrcs	r0, r3, #31
   daf6a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   daf6e:	f040 0001 	orr.w	r0, r0, #1
   daf72:	4770      	bx	lr
   daf74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   daf78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   daf7c:	d102      	bne.n	daf84 <__cmpdf2+0x64>
   daf7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   daf82:	d107      	bne.n	daf94 <__cmpdf2+0x74>
   daf84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   daf88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   daf8c:	d1d6      	bne.n	daf3c <__cmpdf2+0x1c>
   daf8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   daf92:	d0d3      	beq.n	daf3c <__cmpdf2+0x1c>
   daf94:	f85d 0b04 	ldr.w	r0, [sp], #4
   daf98:	4770      	bx	lr
   daf9a:	bf00      	nop

000daf9c <__aeabi_cdrcmple>:
   daf9c:	4684      	mov	ip, r0
   daf9e:	4610      	mov	r0, r2
   dafa0:	4662      	mov	r2, ip
   dafa2:	468c      	mov	ip, r1
   dafa4:	4619      	mov	r1, r3
   dafa6:	4663      	mov	r3, ip
   dafa8:	e000      	b.n	dafac <__aeabi_cdcmpeq>
   dafaa:	bf00      	nop

000dafac <__aeabi_cdcmpeq>:
   dafac:	b501      	push	{r0, lr}
   dafae:	f7ff ffb7 	bl	daf20 <__cmpdf2>
   dafb2:	2800      	cmp	r0, #0
   dafb4:	bf48      	it	mi
   dafb6:	f110 0f00 	cmnmi.w	r0, #0
   dafba:	bd01      	pop	{r0, pc}

000dafbc <__aeabi_dcmpeq>:
   dafbc:	f84d ed08 	str.w	lr, [sp, #-8]!
   dafc0:	f7ff fff4 	bl	dafac <__aeabi_cdcmpeq>
   dafc4:	bf0c      	ite	eq
   dafc6:	2001      	moveq	r0, #1
   dafc8:	2000      	movne	r0, #0
   dafca:	f85d fb08 	ldr.w	pc, [sp], #8
   dafce:	bf00      	nop

000dafd0 <__aeabi_dcmplt>:
   dafd0:	f84d ed08 	str.w	lr, [sp, #-8]!
   dafd4:	f7ff ffea 	bl	dafac <__aeabi_cdcmpeq>
   dafd8:	bf34      	ite	cc
   dafda:	2001      	movcc	r0, #1
   dafdc:	2000      	movcs	r0, #0
   dafde:	f85d fb08 	ldr.w	pc, [sp], #8
   dafe2:	bf00      	nop

000dafe4 <__aeabi_dcmple>:
   dafe4:	f84d ed08 	str.w	lr, [sp, #-8]!
   dafe8:	f7ff ffe0 	bl	dafac <__aeabi_cdcmpeq>
   dafec:	bf94      	ite	ls
   dafee:	2001      	movls	r0, #1
   daff0:	2000      	movhi	r0, #0
   daff2:	f85d fb08 	ldr.w	pc, [sp], #8
   daff6:	bf00      	nop

000daff8 <__aeabi_dcmpge>:
   daff8:	f84d ed08 	str.w	lr, [sp, #-8]!
   daffc:	f7ff ffce 	bl	daf9c <__aeabi_cdrcmple>
   db000:	bf94      	ite	ls
   db002:	2001      	movls	r0, #1
   db004:	2000      	movhi	r0, #0
   db006:	f85d fb08 	ldr.w	pc, [sp], #8
   db00a:	bf00      	nop

000db00c <__aeabi_dcmpgt>:
   db00c:	f84d ed08 	str.w	lr, [sp, #-8]!
   db010:	f7ff ffc4 	bl	daf9c <__aeabi_cdrcmple>
   db014:	bf34      	ite	cc
   db016:	2001      	movcc	r0, #1
   db018:	2000      	movcs	r0, #0
   db01a:	f85d fb08 	ldr.w	pc, [sp], #8
   db01e:	bf00      	nop

000db020 <__aeabi_dcmpun>:
   db020:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   db024:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   db028:	d102      	bne.n	db030 <__aeabi_dcmpun+0x10>
   db02a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   db02e:	d10a      	bne.n	db046 <__aeabi_dcmpun+0x26>
   db030:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   db034:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   db038:	d102      	bne.n	db040 <__aeabi_dcmpun+0x20>
   db03a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   db03e:	d102      	bne.n	db046 <__aeabi_dcmpun+0x26>
   db040:	f04f 0000 	mov.w	r0, #0
   db044:	4770      	bx	lr
   db046:	f04f 0001 	mov.w	r0, #1
   db04a:	4770      	bx	lr

000db04c <__aeabi_d2iz>:
   db04c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   db050:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   db054:	d215      	bcs.n	db082 <__aeabi_d2iz+0x36>
   db056:	d511      	bpl.n	db07c <__aeabi_d2iz+0x30>
   db058:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   db05c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   db060:	d912      	bls.n	db088 <__aeabi_d2iz+0x3c>
   db062:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   db066:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   db06a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   db06e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   db072:	fa23 f002 	lsr.w	r0, r3, r2
   db076:	bf18      	it	ne
   db078:	4240      	negne	r0, r0
   db07a:	4770      	bx	lr
   db07c:	f04f 0000 	mov.w	r0, #0
   db080:	4770      	bx	lr
   db082:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   db086:	d105      	bne.n	db094 <__aeabi_d2iz+0x48>
   db088:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   db08c:	bf08      	it	eq
   db08e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   db092:	4770      	bx	lr
   db094:	f04f 0000 	mov.w	r0, #0
   db098:	4770      	bx	lr
   db09a:	bf00      	nop

000db09c <__aeabi_d2f>:
   db09c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   db0a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   db0a4:	bf24      	itt	cs
   db0a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   db0aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   db0ae:	d90d      	bls.n	db0cc <__aeabi_d2f+0x30>
   db0b0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   db0b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   db0b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   db0bc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   db0c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   db0c4:	bf08      	it	eq
   db0c6:	f020 0001 	biceq.w	r0, r0, #1
   db0ca:	4770      	bx	lr
   db0cc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   db0d0:	d121      	bne.n	db116 <__aeabi_d2f+0x7a>
   db0d2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   db0d6:	bfbc      	itt	lt
   db0d8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   db0dc:	4770      	bxlt	lr
   db0de:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   db0e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
   db0e6:	f1c2 0218 	rsb	r2, r2, #24
   db0ea:	f1c2 0c20 	rsb	ip, r2, #32
   db0ee:	fa10 f30c 	lsls.w	r3, r0, ip
   db0f2:	fa20 f002 	lsr.w	r0, r0, r2
   db0f6:	bf18      	it	ne
   db0f8:	f040 0001 	orrne.w	r0, r0, #1
   db0fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   db100:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   db104:	fa03 fc0c 	lsl.w	ip, r3, ip
   db108:	ea40 000c 	orr.w	r0, r0, ip
   db10c:	fa23 f302 	lsr.w	r3, r3, r2
   db110:	ea4f 0343 	mov.w	r3, r3, lsl #1
   db114:	e7cc      	b.n	db0b0 <__aeabi_d2f+0x14>
   db116:	ea7f 5362 	mvns.w	r3, r2, asr #21
   db11a:	d107      	bne.n	db12c <__aeabi_d2f+0x90>
   db11c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   db120:	bf1e      	ittt	ne
   db122:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   db126:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   db12a:	4770      	bxne	lr
   db12c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   db130:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   db134:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   db138:	4770      	bx	lr
   db13a:	bf00      	nop

000db13c <asctime>:
   db13c:	4b09      	ldr	r3, [pc, #36]	; (db164 <asctime+0x28>)
   db13e:	b570      	push	{r4, r5, r6, lr}
   db140:	681c      	ldr	r4, [r3, #0]
   db142:	6c25      	ldr	r5, [r4, #64]	; 0x40
   db144:	4606      	mov	r6, r0
   db146:	b93d      	cbnz	r5, db158 <asctime+0x1c>
   db148:	201a      	movs	r0, #26
   db14a:	f7fc fe43 	bl	d7dd4 <malloc>
   db14e:	221a      	movs	r2, #26
   db150:	6420      	str	r0, [r4, #64]	; 0x40
   db152:	4629      	mov	r1, r5
   db154:	f000 f956 	bl	db404 <memset>
   db158:	6c21      	ldr	r1, [r4, #64]	; 0x40
   db15a:	4630      	mov	r0, r6
   db15c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   db160:	f000 b802 	b.w	db168 <asctime_r>
   db164:	2003dc78 	.word	0x2003dc78

000db168 <asctime_r>:
   db168:	b510      	push	{r4, lr}
   db16a:	460c      	mov	r4, r1
   db16c:	6941      	ldr	r1, [r0, #20]
   db16e:	6903      	ldr	r3, [r0, #16]
   db170:	6982      	ldr	r2, [r0, #24]
   db172:	b086      	sub	sp, #24
   db174:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   db178:	9104      	str	r1, [sp, #16]
   db17a:	6801      	ldr	r1, [r0, #0]
   db17c:	9103      	str	r1, [sp, #12]
   db17e:	6841      	ldr	r1, [r0, #4]
   db180:	9102      	str	r1, [sp, #8]
   db182:	6881      	ldr	r1, [r0, #8]
   db184:	9101      	str	r1, [sp, #4]
   db186:	68c1      	ldr	r1, [r0, #12]
   db188:	9100      	str	r1, [sp, #0]
   db18a:	4907      	ldr	r1, [pc, #28]	; (db1a8 <asctime_r+0x40>)
   db18c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   db190:	440b      	add	r3, r1
   db192:	4906      	ldr	r1, [pc, #24]	; (db1ac <asctime_r+0x44>)
   db194:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   db198:	440a      	add	r2, r1
   db19a:	4620      	mov	r0, r4
   db19c:	4904      	ldr	r1, [pc, #16]	; (db1b0 <asctime_r+0x48>)
   db19e:	f7fc fe39 	bl	d7e14 <siprintf>
   db1a2:	4620      	mov	r0, r4
   db1a4:	b006      	add	sp, #24
   db1a6:	bd10      	pop	{r4, pc}
   db1a8:	000dce55 	.word	0x000dce55
   db1ac:	000dce40 	.word	0x000dce40
   db1b0:	000dce79 	.word	0x000dce79

000db1b4 <atoi>:
   db1b4:	220a      	movs	r2, #10
   db1b6:	2100      	movs	r1, #0
   db1b8:	f000 bf3a 	b.w	dc030 <strtol>

000db1bc <atol>:
   db1bc:	220a      	movs	r2, #10
   db1be:	2100      	movs	r1, #0
   db1c0:	f000 bf36 	b.w	dc030 <strtol>

000db1c4 <__cxa_atexit>:
   db1c4:	b510      	push	{r4, lr}
   db1c6:	4c05      	ldr	r4, [pc, #20]	; (db1dc <__cxa_atexit+0x18>)
   db1c8:	4613      	mov	r3, r2
   db1ca:	b12c      	cbz	r4, db1d8 <__cxa_atexit+0x14>
   db1cc:	460a      	mov	r2, r1
   db1ce:	4601      	mov	r1, r0
   db1d0:	2002      	movs	r0, #2
   db1d2:	f3af 8000 	nop.w
   db1d6:	bd10      	pop	{r4, pc}
   db1d8:	4620      	mov	r0, r4
   db1da:	bd10      	pop	{r4, pc}
   db1dc:	00000000 	.word	0x00000000

000db1e0 <localtime>:
   db1e0:	b538      	push	{r3, r4, r5, lr}
   db1e2:	4b07      	ldr	r3, [pc, #28]	; (db200 <localtime+0x20>)
   db1e4:	681c      	ldr	r4, [r3, #0]
   db1e6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   db1e8:	4605      	mov	r5, r0
   db1ea:	b91b      	cbnz	r3, db1f4 <localtime+0x14>
   db1ec:	2024      	movs	r0, #36	; 0x24
   db1ee:	f7fc fdf1 	bl	d7dd4 <malloc>
   db1f2:	63e0      	str	r0, [r4, #60]	; 0x3c
   db1f4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   db1f6:	4628      	mov	r0, r5
   db1f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   db1fc:	f000 b802 	b.w	db204 <localtime_r>
   db200:	2003dc78 	.word	0x2003dc78

000db204 <localtime_r>:
   db204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   db208:	460c      	mov	r4, r1
   db20a:	4680      	mov	r8, r0
   db20c:	f001 fa2a 	bl	dc664 <__gettzinfo>
   db210:	4621      	mov	r1, r4
   db212:	4607      	mov	r7, r0
   db214:	4640      	mov	r0, r8
   db216:	f001 fa29 	bl	dc66c <gmtime_r>
   db21a:	6946      	ldr	r6, [r0, #20]
   db21c:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   db220:	07b3      	lsls	r3, r6, #30
   db222:	4604      	mov	r4, r0
   db224:	d105      	bne.n	db232 <localtime_r+0x2e>
   db226:	2264      	movs	r2, #100	; 0x64
   db228:	fb96 f3f2 	sdiv	r3, r6, r2
   db22c:	fb02 6313 	mls	r3, r2, r3, r6
   db230:	b94b      	cbnz	r3, db246 <localtime_r+0x42>
   db232:	f44f 75c8 	mov.w	r5, #400	; 0x190
   db236:	fb96 f3f5 	sdiv	r3, r6, r5
   db23a:	fb05 6513 	mls	r5, r5, r3, r6
   db23e:	fab5 f385 	clz	r3, r5
   db242:	095b      	lsrs	r3, r3, #5
   db244:	e000      	b.n	db248 <localtime_r+0x44>
   db246:	2301      	movs	r3, #1
   db248:	4a5f      	ldr	r2, [pc, #380]	; (db3c8 <localtime_r+0x1c4>)
   db24a:	2530      	movs	r5, #48	; 0x30
   db24c:	fb05 2503 	mla	r5, r5, r3, r2
   db250:	f001 f838 	bl	dc2c4 <__tz_lock>
   db254:	f001 f838 	bl	dc2c8 <_tzset_unlocked>
   db258:	4b5c      	ldr	r3, [pc, #368]	; (db3cc <localtime_r+0x1c8>)
   db25a:	681b      	ldr	r3, [r3, #0]
   db25c:	b1f3      	cbz	r3, db29c <localtime_r+0x98>
   db25e:	687b      	ldr	r3, [r7, #4]
   db260:	429e      	cmp	r6, r3
   db262:	d105      	bne.n	db270 <localtime_r+0x6c>
   db264:	6839      	ldr	r1, [r7, #0]
   db266:	f8d8 3000 	ldr.w	r3, [r8]
   db26a:	69fa      	ldr	r2, [r7, #28]
   db26c:	b941      	cbnz	r1, db280 <localtime_r+0x7c>
   db26e:	e00a      	b.n	db286 <localtime_r+0x82>
   db270:	4630      	mov	r0, r6
   db272:	f000 ff7f 	bl	dc174 <__tzcalc_limits>
   db276:	2800      	cmp	r0, #0
   db278:	d1f4      	bne.n	db264 <localtime_r+0x60>
   db27a:	f04f 33ff 	mov.w	r3, #4294967295
   db27e:	e00d      	b.n	db29c <localtime_r+0x98>
   db280:	4293      	cmp	r3, r2
   db282:	db08      	blt.n	db296 <localtime_r+0x92>
   db284:	e001      	b.n	db28a <localtime_r+0x86>
   db286:	4293      	cmp	r3, r2
   db288:	da07      	bge.n	db29a <localtime_r+0x96>
   db28a:	6bba      	ldr	r2, [r7, #56]	; 0x38
   db28c:	4293      	cmp	r3, r2
   db28e:	bfac      	ite	ge
   db290:	2300      	movge	r3, #0
   db292:	2301      	movlt	r3, #1
   db294:	e002      	b.n	db29c <localtime_r+0x98>
   db296:	2300      	movs	r3, #0
   db298:	e000      	b.n	db29c <localtime_r+0x98>
   db29a:	2301      	movs	r3, #1
   db29c:	6223      	str	r3, [r4, #32]
   db29e:	6a23      	ldr	r3, [r4, #32]
   db2a0:	2b01      	cmp	r3, #1
   db2a2:	bf0c      	ite	eq
   db2a4:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   db2a6:	6a39      	ldrne	r1, [r7, #32]
   db2a8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   db2ac:	203c      	movs	r0, #60	; 0x3c
   db2ae:	fb91 f6f3 	sdiv	r6, r1, r3
   db2b2:	fb03 1316 	mls	r3, r3, r6, r1
   db2b6:	6861      	ldr	r1, [r4, #4]
   db2b8:	fb93 f2f0 	sdiv	r2, r3, r0
   db2bc:	fb00 3012 	mls	r0, r0, r2, r3
   db2c0:	6823      	ldr	r3, [r4, #0]
   db2c2:	1a89      	subs	r1, r1, r2
   db2c4:	68a2      	ldr	r2, [r4, #8]
   db2c6:	6061      	str	r1, [r4, #4]
   db2c8:	1a1b      	subs	r3, r3, r0
   db2ca:	1b92      	subs	r2, r2, r6
   db2cc:	2b3b      	cmp	r3, #59	; 0x3b
   db2ce:	6023      	str	r3, [r4, #0]
   db2d0:	60a2      	str	r2, [r4, #8]
   db2d2:	dd03      	ble.n	db2dc <localtime_r+0xd8>
   db2d4:	3101      	adds	r1, #1
   db2d6:	6061      	str	r1, [r4, #4]
   db2d8:	3b3c      	subs	r3, #60	; 0x3c
   db2da:	e004      	b.n	db2e6 <localtime_r+0xe2>
   db2dc:	2b00      	cmp	r3, #0
   db2de:	da03      	bge.n	db2e8 <localtime_r+0xe4>
   db2e0:	3901      	subs	r1, #1
   db2e2:	6061      	str	r1, [r4, #4]
   db2e4:	333c      	adds	r3, #60	; 0x3c
   db2e6:	6023      	str	r3, [r4, #0]
   db2e8:	6863      	ldr	r3, [r4, #4]
   db2ea:	2b3b      	cmp	r3, #59	; 0x3b
   db2ec:	dd03      	ble.n	db2f6 <localtime_r+0xf2>
   db2ee:	3201      	adds	r2, #1
   db2f0:	60a2      	str	r2, [r4, #8]
   db2f2:	3b3c      	subs	r3, #60	; 0x3c
   db2f4:	e004      	b.n	db300 <localtime_r+0xfc>
   db2f6:	2b00      	cmp	r3, #0
   db2f8:	da03      	bge.n	db302 <localtime_r+0xfe>
   db2fa:	3a01      	subs	r2, #1
   db2fc:	60a2      	str	r2, [r4, #8]
   db2fe:	333c      	adds	r3, #60	; 0x3c
   db300:	6063      	str	r3, [r4, #4]
   db302:	68a3      	ldr	r3, [r4, #8]
   db304:	2b17      	cmp	r3, #23
   db306:	dd22      	ble.n	db34e <localtime_r+0x14a>
   db308:	69e2      	ldr	r2, [r4, #28]
   db30a:	3201      	adds	r2, #1
   db30c:	61e2      	str	r2, [r4, #28]
   db30e:	69a2      	ldr	r2, [r4, #24]
   db310:	3201      	adds	r2, #1
   db312:	2a06      	cmp	r2, #6
   db314:	bfc8      	it	gt
   db316:	2200      	movgt	r2, #0
   db318:	61a2      	str	r2, [r4, #24]
   db31a:	68e2      	ldr	r2, [r4, #12]
   db31c:	3b18      	subs	r3, #24
   db31e:	3201      	adds	r2, #1
   db320:	60a3      	str	r3, [r4, #8]
   db322:	6923      	ldr	r3, [r4, #16]
   db324:	60e2      	str	r2, [r4, #12]
   db326:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   db32a:	428a      	cmp	r2, r1
   db32c:	dd46      	ble.n	db3bc <localtime_r+0x1b8>
   db32e:	3301      	adds	r3, #1
   db330:	2b0c      	cmp	r3, #12
   db332:	bf0c      	ite	eq
   db334:	6963      	ldreq	r3, [r4, #20]
   db336:	6123      	strne	r3, [r4, #16]
   db338:	eba2 0201 	sub.w	r2, r2, r1
   db33c:	60e2      	str	r2, [r4, #12]
   db33e:	bf01      	itttt	eq
   db340:	3301      	addeq	r3, #1
   db342:	2200      	moveq	r2, #0
   db344:	6122      	streq	r2, [r4, #16]
   db346:	6163      	streq	r3, [r4, #20]
   db348:	bf08      	it	eq
   db34a:	61e2      	streq	r2, [r4, #28]
   db34c:	e036      	b.n	db3bc <localtime_r+0x1b8>
   db34e:	2b00      	cmp	r3, #0
   db350:	da34      	bge.n	db3bc <localtime_r+0x1b8>
   db352:	69e2      	ldr	r2, [r4, #28]
   db354:	3a01      	subs	r2, #1
   db356:	61e2      	str	r2, [r4, #28]
   db358:	69a2      	ldr	r2, [r4, #24]
   db35a:	3a01      	subs	r2, #1
   db35c:	bf48      	it	mi
   db35e:	2206      	movmi	r2, #6
   db360:	61a2      	str	r2, [r4, #24]
   db362:	68e2      	ldr	r2, [r4, #12]
   db364:	3318      	adds	r3, #24
   db366:	3a01      	subs	r2, #1
   db368:	60e2      	str	r2, [r4, #12]
   db36a:	60a3      	str	r3, [r4, #8]
   db36c:	bb32      	cbnz	r2, db3bc <localtime_r+0x1b8>
   db36e:	6923      	ldr	r3, [r4, #16]
   db370:	3b01      	subs	r3, #1
   db372:	d401      	bmi.n	db378 <localtime_r+0x174>
   db374:	6123      	str	r3, [r4, #16]
   db376:	e01d      	b.n	db3b4 <localtime_r+0x1b0>
   db378:	230b      	movs	r3, #11
   db37a:	6123      	str	r3, [r4, #16]
   db37c:	6963      	ldr	r3, [r4, #20]
   db37e:	1e5a      	subs	r2, r3, #1
   db380:	f012 0f03 	tst.w	r2, #3
   db384:	6162      	str	r2, [r4, #20]
   db386:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   db38a:	d105      	bne.n	db398 <localtime_r+0x194>
   db38c:	2164      	movs	r1, #100	; 0x64
   db38e:	fb93 f2f1 	sdiv	r2, r3, r1
   db392:	fb01 3212 	mls	r2, r1, r2, r3
   db396:	b94a      	cbnz	r2, db3ac <localtime_r+0x1a8>
   db398:	f44f 71c8 	mov.w	r1, #400	; 0x190
   db39c:	fb93 f2f1 	sdiv	r2, r3, r1
   db3a0:	fb01 3312 	mls	r3, r1, r2, r3
   db3a4:	fab3 f383 	clz	r3, r3
   db3a8:	095b      	lsrs	r3, r3, #5
   db3aa:	e000      	b.n	db3ae <localtime_r+0x1aa>
   db3ac:	2301      	movs	r3, #1
   db3ae:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   db3b2:	61e3      	str	r3, [r4, #28]
   db3b4:	6923      	ldr	r3, [r4, #16]
   db3b6:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   db3ba:	60e3      	str	r3, [r4, #12]
   db3bc:	f000 ff83 	bl	dc2c6 <__tz_unlock>
   db3c0:	4620      	mov	r0, r4
   db3c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   db3c6:	bf00      	nop
   db3c8:	000dd000 	.word	0x000dd000
   db3cc:	2003e7e4 	.word	0x2003e7e4

000db3d0 <memcmp>:
   db3d0:	b510      	push	{r4, lr}
   db3d2:	3901      	subs	r1, #1
   db3d4:	4402      	add	r2, r0
   db3d6:	4290      	cmp	r0, r2
   db3d8:	d007      	beq.n	db3ea <memcmp+0x1a>
   db3da:	f810 3b01 	ldrb.w	r3, [r0], #1
   db3de:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   db3e2:	42a3      	cmp	r3, r4
   db3e4:	d0f7      	beq.n	db3d6 <memcmp+0x6>
   db3e6:	1b18      	subs	r0, r3, r4
   db3e8:	bd10      	pop	{r4, pc}
   db3ea:	2000      	movs	r0, #0
   db3ec:	bd10      	pop	{r4, pc}

000db3ee <memcpy>:
   db3ee:	b510      	push	{r4, lr}
   db3f0:	1e43      	subs	r3, r0, #1
   db3f2:	440a      	add	r2, r1
   db3f4:	4291      	cmp	r1, r2
   db3f6:	d004      	beq.n	db402 <memcpy+0x14>
   db3f8:	f811 4b01 	ldrb.w	r4, [r1], #1
   db3fc:	f803 4f01 	strb.w	r4, [r3, #1]!
   db400:	e7f8      	b.n	db3f4 <memcpy+0x6>
   db402:	bd10      	pop	{r4, pc}

000db404 <memset>:
   db404:	4402      	add	r2, r0
   db406:	4603      	mov	r3, r0
   db408:	4293      	cmp	r3, r2
   db40a:	d002      	beq.n	db412 <memset+0xe>
   db40c:	f803 1b01 	strb.w	r1, [r3], #1
   db410:	e7fa      	b.n	db408 <memset+0x4>
   db412:	4770      	bx	lr

000db414 <srand>:
   db414:	b538      	push	{r3, r4, r5, lr}
   db416:	4b12      	ldr	r3, [pc, #72]	; (db460 <srand+0x4c>)
   db418:	681c      	ldr	r4, [r3, #0]
   db41a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   db41c:	4605      	mov	r5, r0
   db41e:	b9d3      	cbnz	r3, db456 <srand+0x42>
   db420:	2018      	movs	r0, #24
   db422:	f7fc fcd7 	bl	d7dd4 <malloc>
   db426:	f243 330e 	movw	r3, #13070	; 0x330e
   db42a:	63a0      	str	r0, [r4, #56]	; 0x38
   db42c:	8003      	strh	r3, [r0, #0]
   db42e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   db432:	8043      	strh	r3, [r0, #2]
   db434:	f241 2334 	movw	r3, #4660	; 0x1234
   db438:	8083      	strh	r3, [r0, #4]
   db43a:	f24e 636d 	movw	r3, #58989	; 0xe66d
   db43e:	80c3      	strh	r3, [r0, #6]
   db440:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   db444:	8103      	strh	r3, [r0, #8]
   db446:	2305      	movs	r3, #5
   db448:	8143      	strh	r3, [r0, #10]
   db44a:	230b      	movs	r3, #11
   db44c:	8183      	strh	r3, [r0, #12]
   db44e:	2201      	movs	r2, #1
   db450:	2300      	movs	r3, #0
   db452:	e9c0 2304 	strd	r2, r3, [r0, #16]
   db456:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   db458:	2200      	movs	r2, #0
   db45a:	611d      	str	r5, [r3, #16]
   db45c:	615a      	str	r2, [r3, #20]
   db45e:	bd38      	pop	{r3, r4, r5, pc}
   db460:	2003dc78 	.word	0x2003dc78

000db464 <strcmp>:
   db464:	f810 2b01 	ldrb.w	r2, [r0], #1
   db468:	f811 3b01 	ldrb.w	r3, [r1], #1
   db46c:	2a01      	cmp	r2, #1
   db46e:	bf28      	it	cs
   db470:	429a      	cmpcs	r2, r3
   db472:	d0f7      	beq.n	db464 <strcmp>
   db474:	1ad0      	subs	r0, r2, r3
   db476:	4770      	bx	lr

000db478 <strcpy>:
   db478:	4603      	mov	r3, r0
   db47a:	f811 2b01 	ldrb.w	r2, [r1], #1
   db47e:	f803 2b01 	strb.w	r2, [r3], #1
   db482:	2a00      	cmp	r2, #0
   db484:	d1f9      	bne.n	db47a <strcpy+0x2>
   db486:	4770      	bx	lr

000db488 <strdup>:
   db488:	4b02      	ldr	r3, [pc, #8]	; (db494 <strdup+0xc>)
   db48a:	4601      	mov	r1, r0
   db48c:	6818      	ldr	r0, [r3, #0]
   db48e:	f000 b803 	b.w	db498 <_strdup_r>
   db492:	bf00      	nop
   db494:	2003dc78 	.word	0x2003dc78

000db498 <_strdup_r>:
   db498:	b570      	push	{r4, r5, r6, lr}
   db49a:	4606      	mov	r6, r0
   db49c:	4608      	mov	r0, r1
   db49e:	460c      	mov	r4, r1
   db4a0:	f000 fd22 	bl	dbee8 <strlen>
   db4a4:	1c45      	adds	r5, r0, #1
   db4a6:	4629      	mov	r1, r5
   db4a8:	4630      	mov	r0, r6
   db4aa:	f7fc fce3 	bl	d7e74 <_malloc_r>
   db4ae:	4606      	mov	r6, r0
   db4b0:	b118      	cbz	r0, db4ba <_strdup_r+0x22>
   db4b2:	462a      	mov	r2, r5
   db4b4:	4621      	mov	r1, r4
   db4b6:	f7ff ff9a 	bl	db3ee <memcpy>
   db4ba:	4630      	mov	r0, r6
   db4bc:	bd70      	pop	{r4, r5, r6, pc}

000db4be <iso_year_adjust>:
   db4be:	6941      	ldr	r1, [r0, #20]
   db4c0:	078b      	lsls	r3, r1, #30
   db4c2:	b510      	push	{r4, lr}
   db4c4:	d10c      	bne.n	db4e0 <iso_year_adjust+0x22>
   db4c6:	2900      	cmp	r1, #0
   db4c8:	f240 736c 	movw	r3, #1900	; 0x76c
   db4cc:	bfa8      	it	ge
   db4ce:	f06f 0363 	mvnge.w	r3, #99	; 0x63
   db4d2:	440b      	add	r3, r1
   db4d4:	2464      	movs	r4, #100	; 0x64
   db4d6:	fb93 f2f4 	sdiv	r2, r3, r4
   db4da:	fb04 3312 	mls	r3, r4, r2, r3
   db4de:	b983      	cbnz	r3, db502 <iso_year_adjust+0x44>
   db4e0:	2900      	cmp	r1, #0
   db4e2:	f240 736c 	movw	r3, #1900	; 0x76c
   db4e6:	bfa8      	it	ge
   db4e8:	f06f 0363 	mvnge.w	r3, #99	; 0x63
   db4ec:	f44f 72c8 	mov.w	r2, #400	; 0x190
   db4f0:	440b      	add	r3, r1
   db4f2:	fb93 f1f2 	sdiv	r1, r3, r2
   db4f6:	fb02 3311 	mls	r3, r2, r1, r3
   db4fa:	fab3 f283 	clz	r2, r3
   db4fe:	0952      	lsrs	r2, r2, #5
   db500:	e000      	b.n	db504 <iso_year_adjust+0x46>
   db502:	2201      	movs	r2, #1
   db504:	6983      	ldr	r3, [r0, #24]
   db506:	69c1      	ldr	r1, [r0, #28]
   db508:	005b      	lsls	r3, r3, #1
   db50a:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   db50e:	4413      	add	r3, r2
   db510:	2b21      	cmp	r3, #33	; 0x21
   db512:	dc0e      	bgt.n	db532 <iso_year_adjust+0x74>
   db514:	2b20      	cmp	r3, #32
   db516:	da2f      	bge.n	db578 <iso_year_adjust+0xba>
   db518:	2b0d      	cmp	r3, #13
   db51a:	dc02      	bgt.n	db522 <iso_year_adjust+0x64>
   db51c:	2b0a      	cmp	r3, #10
   db51e:	db05      	blt.n	db52c <iso_year_adjust+0x6e>
   db520:	e02a      	b.n	db578 <iso_year_adjust+0xba>
   db522:	2b10      	cmp	r3, #16
   db524:	db26      	blt.n	db574 <iso_year_adjust+0xb6>
   db526:	2b11      	cmp	r3, #17
   db528:	dd26      	ble.n	db578 <iso_year_adjust+0xba>
   db52a:	3b1c      	subs	r3, #28
   db52c:	2b01      	cmp	r3, #1
   db52e:	d923      	bls.n	db578 <iso_year_adjust+0xba>
   db530:	e020      	b.n	db574 <iso_year_adjust+0xb6>
   db532:	f241 62c6 	movw	r2, #5830	; 0x16c6
   db536:	4293      	cmp	r3, r2
   db538:	dc0e      	bgt.n	db558 <iso_year_adjust+0x9a>
   db53a:	f241 62c2 	movw	r2, #5826	; 0x16c2
   db53e:	4293      	cmp	r3, r2
   db540:	da16      	bge.n	db570 <iso_year_adjust+0xb2>
   db542:	f241 62a2 	movw	r2, #5794	; 0x16a2
   db546:	4293      	cmp	r3, r2
   db548:	d012      	beq.n	db570 <iso_year_adjust+0xb2>
   db54a:	db13      	blt.n	db574 <iso_year_adjust+0xb6>
   db54c:	f5a3 53b5 	sub.w	r3, r3, #5792	; 0x16a0
   db550:	3b12      	subs	r3, #18
   db552:	2b02      	cmp	r3, #2
   db554:	d90c      	bls.n	db570 <iso_year_adjust+0xb2>
   db556:	e00d      	b.n	db574 <iso_year_adjust+0xb6>
   db558:	f241 62d5 	movw	r2, #5845	; 0x16d5
   db55c:	4293      	cmp	r3, r2
   db55e:	d007      	beq.n	db570 <iso_year_adjust+0xb2>
   db560:	f241 62d7 	movw	r2, #5847	; 0x16d7
   db564:	4293      	cmp	r3, r2
   db566:	d003      	beq.n	db570 <iso_year_adjust+0xb2>
   db568:	f241 62d3 	movw	r2, #5843	; 0x16d3
   db56c:	4293      	cmp	r3, r2
   db56e:	d101      	bne.n	db574 <iso_year_adjust+0xb6>
   db570:	2001      	movs	r0, #1
   db572:	bd10      	pop	{r4, pc}
   db574:	2000      	movs	r0, #0
   db576:	bd10      	pop	{r4, pc}
   db578:	f04f 30ff 	mov.w	r0, #4294967295
   db57c:	bd10      	pop	{r4, pc}
	...

000db580 <strftime>:
   db580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db584:	b093      	sub	sp, #76	; 0x4c
   db586:	460e      	mov	r6, r1
   db588:	461d      	mov	r5, r3
   db58a:	4607      	mov	r7, r0
   db58c:	4691      	mov	r9, r2
   db58e:	f000 fde1 	bl	dc154 <__get_current_time_locale>
   db592:	2300      	movs	r3, #0
   db594:	9306      	str	r3, [sp, #24]
   db596:	461c      	mov	r4, r3
   db598:	1e73      	subs	r3, r6, #1
   db59a:	9003      	str	r0, [sp, #12]
   db59c:	9302      	str	r3, [sp, #8]
   db59e:	f899 3000 	ldrb.w	r3, [r9]
   db5a2:	2b00      	cmp	r3, #0
   db5a4:	f000 8492 	beq.w	dbecc <strftime+0x94c>
   db5a8:	2b25      	cmp	r3, #37	; 0x25
   db5aa:	d008      	beq.n	db5be <strftime+0x3e>
   db5ac:	9a02      	ldr	r2, [sp, #8]
   db5ae:	4294      	cmp	r4, r2
   db5b0:	f080 8490 	bcs.w	dbed4 <strftime+0x954>
   db5b4:	553b      	strb	r3, [r7, r4]
   db5b6:	f109 0901 	add.w	r9, r9, #1
   db5ba:	3401      	adds	r4, #1
   db5bc:	e7ef      	b.n	db59e <strftime+0x1e>
   db5be:	f899 a001 	ldrb.w	sl, [r9, #1]
   db5c2:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
   db5c6:	d007      	beq.n	db5d8 <strftime+0x58>
   db5c8:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   db5cc:	d004      	beq.n	db5d8 <strftime+0x58>
   db5ce:	f109 0901 	add.w	r9, r9, #1
   db5d2:	f04f 0a00 	mov.w	sl, #0
   db5d6:	e001      	b.n	db5dc <strftime+0x5c>
   db5d8:	f109 0902 	add.w	r9, r9, #2
   db5dc:	f899 3000 	ldrb.w	r3, [r9]
   db5e0:	3b31      	subs	r3, #49	; 0x31
   db5e2:	2b08      	cmp	r3, #8
   db5e4:	d808      	bhi.n	db5f8 <strftime+0x78>
   db5e6:	4648      	mov	r0, r9
   db5e8:	220a      	movs	r2, #10
   db5ea:	a90a      	add	r1, sp, #40	; 0x28
   db5ec:	f000 fda8 	bl	dc140 <strtoul>
   db5f0:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   db5f4:	4680      	mov	r8, r0
   db5f6:	e001      	b.n	db5fc <strftime+0x7c>
   db5f8:	f04f 0800 	mov.w	r8, #0
   db5fc:	f899 3000 	ldrb.w	r3, [r9]
   db600:	2b45      	cmp	r3, #69	; 0x45
   db602:	d001      	beq.n	db608 <strftime+0x88>
   db604:	2b4f      	cmp	r3, #79	; 0x4f
   db606:	d101      	bne.n	db60c <strftime+0x8c>
   db608:	f109 0901 	add.w	r9, r9, #1
   db60c:	f899 0000 	ldrb.w	r0, [r9]
   db610:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
   db614:	2b55      	cmp	r3, #85	; 0x55
   db616:	f200 845d 	bhi.w	dbed4 <strftime+0x954>
   db61a:	e8df f013 	tbh	[pc, r3, lsl #1]
   db61e:	044a      	.short	0x044a
   db620:	045b045b 	.word	0x045b045b
   db624:	045b045b 	.word	0x045b045b
   db628:	045b045b 	.word	0x045b045b
   db62c:	045b045b 	.word	0x045b045b
   db630:	045b045b 	.word	0x045b045b
   db634:	045b045b 	.word	0x045b045b
   db638:	045b045b 	.word	0x045b045b
   db63c:	045b045b 	.word	0x045b045b
   db640:	045b045b 	.word	0x045b045b
   db644:	045b045b 	.word	0x045b045b
   db648:	045b045b 	.word	0x045b045b
   db64c:	045b045b 	.word	0x045b045b
   db650:	045b045b 	.word	0x045b045b
   db654:	006f045b 	.word	0x006f045b
   db658:	00d400a1 	.word	0x00d400a1
   db65c:	045b011a 	.word	0x045b011a
   db660:	01a0013f 	.word	0x01a0013f
   db664:	022d0226 	.word	0x022d0226
   db668:	045b045b 	.word	0x045b045b
   db66c:	0260045b 	.word	0x0260045b
   db670:	045b045b 	.word	0x045b045b
   db674:	045b0268 	.word	0x045b0268
   db678:	031d0297 	.word	0x031d0297
   db67c:	033b0325 	.word	0x033b0325
   db680:	03860343 	.word	0x03860343
   db684:	03a000c6 	.word	0x03a000c6
   db688:	045b041f 	.word	0x045b041f
   db68c:	045b045b 	.word	0x045b045b
   db690:	045b045b 	.word	0x045b045b
   db694:	0056045b 	.word	0x0056045b
   db698:	00ba0089 	.word	0x00ba0089
   db69c:	010c010c 	.word	0x010c010c
   db6a0:	0171045b 	.word	0x0171045b
   db6a4:	045b0089 	.word	0x045b0089
   db6a8:	0226023d 	.word	0x0226023d
   db6ac:	025d022d 	.word	0x025d022d
   db6b0:	045b0262 	.word	0x045b0262
   db6b4:	045b0268 	.word	0x045b0268
   db6b8:	029c00be 	.word	0x029c00be
   db6bc:	032e031f 	.word	0x032e031f
   db6c0:	037f045b 	.word	0x037f045b
   db6c4:	039200c2 	.word	0x039200c2
   db6c8:	03e7      	.short	0x03e7
   db6ca:	69ab      	ldr	r3, [r5, #24]
   db6cc:	9a03      	ldr	r2, [sp, #12]
   db6ce:	3318      	adds	r3, #24
   db6d0:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   db6d4:	4640      	mov	r0, r8
   db6d6:	f000 fc07 	bl	dbee8 <strlen>
   db6da:	f108 38ff 	add.w	r8, r8, #4294967295
   db6de:	193b      	adds	r3, r7, r4
   db6e0:	4420      	add	r0, r4
   db6e2:	4284      	cmp	r4, r0
   db6e4:	f000 83eb 	beq.w	dbebe <strftime+0x93e>
   db6e8:	9a02      	ldr	r2, [sp, #8]
   db6ea:	4294      	cmp	r4, r2
   db6ec:	f080 83f2 	bcs.w	dbed4 <strftime+0x954>
   db6f0:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   db6f4:	f803 2b01 	strb.w	r2, [r3], #1
   db6f8:	3401      	adds	r4, #1
   db6fa:	e7f2      	b.n	db6e2 <strftime+0x162>
   db6fc:	69ab      	ldr	r3, [r5, #24]
   db6fe:	9a03      	ldr	r2, [sp, #12]
   db700:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   db704:	f8d3 807c 	ldr.w	r8, [r3, #124]	; 0x7c
   db708:	4640      	mov	r0, r8
   db70a:	f000 fbed 	bl	dbee8 <strlen>
   db70e:	f108 38ff 	add.w	r8, r8, #4294967295
   db712:	193b      	adds	r3, r7, r4
   db714:	4420      	add	r0, r4
   db716:	4284      	cmp	r4, r0
   db718:	f000 83d1 	beq.w	dbebe <strftime+0x93e>
   db71c:	9a02      	ldr	r2, [sp, #8]
   db71e:	4294      	cmp	r4, r2
   db720:	f080 83d8 	bcs.w	dbed4 <strftime+0x954>
   db724:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   db728:	f803 2b01 	strb.w	r2, [r3], #1
   db72c:	3401      	adds	r4, #1
   db72e:	e7f2      	b.n	db716 <strftime+0x196>
   db730:	692b      	ldr	r3, [r5, #16]
   db732:	9a03      	ldr	r2, [sp, #12]
   db734:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   db738:	4640      	mov	r0, r8
   db73a:	f000 fbd5 	bl	dbee8 <strlen>
   db73e:	f108 38ff 	add.w	r8, r8, #4294967295
   db742:	193b      	adds	r3, r7, r4
   db744:	4420      	add	r0, r4
   db746:	4284      	cmp	r4, r0
   db748:	f000 83b9 	beq.w	dbebe <strftime+0x93e>
   db74c:	9a02      	ldr	r2, [sp, #8]
   db74e:	4294      	cmp	r4, r2
   db750:	f080 83c0 	bcs.w	dbed4 <strftime+0x954>
   db754:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   db758:	f803 2b01 	strb.w	r2, [r3], #1
   db75c:	3401      	adds	r4, #1
   db75e:	e7f2      	b.n	db746 <strftime+0x1c6>
   db760:	692b      	ldr	r3, [r5, #16]
   db762:	9a03      	ldr	r2, [sp, #12]
   db764:	330c      	adds	r3, #12
   db766:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   db76a:	4640      	mov	r0, r8
   db76c:	f000 fbbc 	bl	dbee8 <strlen>
   db770:	f108 38ff 	add.w	r8, r8, #4294967295
   db774:	193b      	adds	r3, r7, r4
   db776:	4420      	add	r0, r4
   db778:	4284      	cmp	r4, r0
   db77a:	f000 83a0 	beq.w	dbebe <strftime+0x93e>
   db77e:	9a02      	ldr	r2, [sp, #8]
   db780:	4294      	cmp	r4, r2
   db782:	f080 83a7 	bcs.w	dbed4 <strftime+0x954>
   db786:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   db78a:	f803 2b01 	strb.w	r2, [r3], #1
   db78e:	3401      	adds	r4, #1
   db790:	e7f2      	b.n	db778 <strftime+0x1f8>
   db792:	9b03      	ldr	r3, [sp, #12]
   db794:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
   db798:	e00a      	b.n	db7b0 <strftime+0x230>
   db79a:	9b03      	ldr	r3, [sp, #12]
   db79c:	f8d3 80e4 	ldr.w	r8, [r3, #228]	; 0xe4
   db7a0:	e006      	b.n	db7b0 <strftime+0x230>
   db7a2:	9b03      	ldr	r3, [sp, #12]
   db7a4:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
   db7a8:	e002      	b.n	db7b0 <strftime+0x230>
   db7aa:	9b03      	ldr	r3, [sp, #12]
   db7ac:	f8d3 8098 	ldr.w	r8, [r3, #152]	; 0x98
   db7b0:	4640      	mov	r0, r8
   db7b2:	f000 fb99 	bl	dbee8 <strlen>
   db7b6:	f898 3000 	ldrb.w	r3, [r8]
   db7ba:	2b00      	cmp	r3, #0
   db7bc:	f000 837f 	beq.w	dbebe <strftime+0x93e>
   db7c0:	462b      	mov	r3, r5
   db7c2:	4642      	mov	r2, r8
   db7c4:	e093      	b.n	db8ee <strftime+0x36e>
   db7c6:	49b6      	ldr	r1, [pc, #728]	; (dbaa0 <strftime+0x520>)
   db7c8:	f8d5 b014 	ldr.w	fp, [r5, #20]
   db7cc:	458b      	cmp	fp, r1
   db7ce:	bfac      	ite	ge
   db7d0:	2100      	movge	r1, #0
   db7d2:	2101      	movlt	r1, #1
   db7d4:	f1bb 0f00 	cmp.w	fp, #0
   db7d8:	db04      	blt.n	db7e4 <strftime+0x264>
   db7da:	2064      	movs	r0, #100	; 0x64
   db7dc:	fb9b f0f0 	sdiv	r0, fp, r0
   db7e0:	3013      	adds	r0, #19
   db7e2:	e008      	b.n	db7f6 <strftime+0x276>
   db7e4:	f20b 706c 	addw	r0, fp, #1900	; 0x76c
   db7e8:	9107      	str	r1, [sp, #28]
   db7ea:	f000 fef3 	bl	dc5d4 <abs>
   db7ee:	9907      	ldr	r1, [sp, #28]
   db7f0:	2364      	movs	r3, #100	; 0x64
   db7f2:	fb90 f0f3 	sdiv	r0, r0, r3
   db7f6:	f1ba 0f00 	cmp.w	sl, #0
   db7fa:	d008      	beq.n	db80e <strftime+0x28e>
   db7fc:	2863      	cmp	r0, #99	; 0x63
   db7fe:	dd09      	ble.n	db814 <strftime+0x294>
   db800:	4ba8      	ldr	r3, [pc, #672]	; (dbaa4 <strftime+0x524>)
   db802:	4aa9      	ldr	r2, [pc, #676]	; (dbaa8 <strftime+0x528>)
   db804:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   db808:	bf18      	it	ne
   db80a:	4613      	movne	r3, r2
   db80c:	e003      	b.n	db816 <strftime+0x296>
   db80e:	4ba6      	ldr	r3, [pc, #664]	; (dbaa8 <strftime+0x528>)
   db810:	4aa6      	ldr	r2, [pc, #664]	; (dbaac <strftime+0x52c>)
   db812:	e001      	b.n	db818 <strftime+0x298>
   db814:	4ba4      	ldr	r3, [pc, #656]	; (dbaa8 <strftime+0x528>)
   db816:	4aa6      	ldr	r2, [pc, #664]	; (dbab0 <strftime+0x530>)
   db818:	9001      	str	r0, [sp, #4]
   db81a:	f1b8 0f01 	cmp.w	r8, #1
   db81e:	bf98      	it	ls
   db820:	f04f 0802 	movls.w	r8, #2
   db824:	ebc1 0108 	rsb	r1, r1, r8
   db828:	9100      	str	r1, [sp, #0]
   db82a:	489d      	ldr	r0, [pc, #628]	; (dbaa0 <strftime+0x520>)
   db82c:	49a1      	ldr	r1, [pc, #644]	; (dbab4 <strftime+0x534>)
   db82e:	4583      	cmp	fp, r0
   db830:	bfb8      	it	lt
   db832:	460b      	movlt	r3, r1
   db834:	e21e      	b.n	dbc74 <strftime+0x6f4>
   db836:	4aa0      	ldr	r2, [pc, #640]	; (dbab8 <strftime+0x538>)
   db838:	49a0      	ldr	r1, [pc, #640]	; (dbabc <strftime+0x53c>)
   db83a:	68eb      	ldr	r3, [r5, #12]
   db83c:	2864      	cmp	r0, #100	; 0x64
   db83e:	bf08      	it	eq
   db840:	460a      	moveq	r2, r1
   db842:	1b31      	subs	r1, r6, r4
   db844:	1938      	adds	r0, r7, r4
   db846:	f7fc fafd 	bl	d7e44 <sniprintf>
   db84a:	2800      	cmp	r0, #0
   db84c:	f280 8302 	bge.w	dbe54 <strftime+0x8d4>
   db850:	e340      	b.n	dbed4 <strftime+0x954>
   db852:	6968      	ldr	r0, [r5, #20]
   db854:	692b      	ldr	r3, [r5, #16]
   db856:	2800      	cmp	r0, #0
   db858:	f103 0b01 	add.w	fp, r3, #1
   db85c:	eb07 0804 	add.w	r8, r7, r4
   db860:	ebc4 0a06 	rsb	sl, r4, r6
   db864:	68eb      	ldr	r3, [r5, #12]
   db866:	db05      	blt.n	db874 <strftime+0x2f4>
   db868:	2264      	movs	r2, #100	; 0x64
   db86a:	fb90 f1f2 	sdiv	r1, r0, r2
   db86e:	fb02 0011 	mls	r0, r2, r1, r0
   db872:	e00a      	b.n	db88a <strftime+0x30a>
   db874:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   db878:	9307      	str	r3, [sp, #28]
   db87a:	f000 feab 	bl	dc5d4 <abs>
   db87e:	2264      	movs	r2, #100	; 0x64
   db880:	9b07      	ldr	r3, [sp, #28]
   db882:	fb90 f1f2 	sdiv	r1, r0, r2
   db886:	fb01 0012 	mls	r0, r1, r2, r0
   db88a:	4a8d      	ldr	r2, [pc, #564]	; (dbac0 <strftime+0x540>)
   db88c:	9001      	str	r0, [sp, #4]
   db88e:	9300      	str	r3, [sp, #0]
   db890:	4651      	mov	r1, sl
   db892:	465b      	mov	r3, fp
   db894:	4640      	mov	r0, r8
   db896:	f7fc fad5 	bl	d7e44 <sniprintf>
   db89a:	e7d6      	b.n	db84a <strftime+0x2ca>
   db89c:	2325      	movs	r3, #37	; 0x25
   db89e:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   db8a2:	f1ba 0f00 	cmp.w	sl, #0
   db8a6:	d007      	beq.n	db8b8 <strftime+0x338>
   db8a8:	f1b8 0f05 	cmp.w	r8, #5
   db8ac:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
   db8b0:	bf98      	it	ls
   db8b2:	f04f 0806 	movls.w	r8, #6
   db8b6:	e004      	b.n	db8c2 <strftime+0x342>
   db8b8:	232b      	movs	r3, #43	; 0x2b
   db8ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   db8be:	f04f 080a 	mov.w	r8, #10
   db8c2:	f1b8 0306 	subs.w	r3, r8, #6
   db8c6:	d102      	bne.n	db8ce <strftime+0x34e>
   db8c8:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
   db8cc:	e00a      	b.n	db8e4 <strftime+0x364>
   db8ce:	4a7d      	ldr	r2, [pc, #500]	; (dbac4 <strftime+0x544>)
   db8d0:	211e      	movs	r1, #30
   db8d2:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
   db8d6:	f7fc fab5 	bl	d7e44 <sniprintf>
   db8da:	2800      	cmp	r0, #0
   db8dc:	ddf4      	ble.n	db8c8 <strftime+0x348>
   db8de:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
   db8e2:	4418      	add	r0, r3
   db8e4:	4978      	ldr	r1, [pc, #480]	; (dbac8 <strftime+0x548>)
   db8e6:	f7ff fdc7 	bl	db478 <strcpy>
   db8ea:	462b      	mov	r3, r5
   db8ec:	aa0a      	add	r2, sp, #40	; 0x28
   db8ee:	1b31      	subs	r1, r6, r4
   db8f0:	1938      	adds	r0, r7, r4
   db8f2:	f7ff fe45 	bl	db580 <strftime>
   db8f6:	2800      	cmp	r0, #0
   db8f8:	f340 82ec 	ble.w	dbed4 <strftime+0x954>
   db8fc:	4404      	add	r4, r0
   db8fe:	e2de      	b.n	dbebe <strftime+0x93e>
   db900:	4628      	mov	r0, r5
   db902:	f7ff fddc 	bl	db4be <iso_year_adjust>
   db906:	4680      	mov	r8, r0
   db908:	6968      	ldr	r0, [r5, #20]
   db90a:	2800      	cmp	r0, #0
   db90c:	db05      	blt.n	db91a <strftime+0x39a>
   db90e:	2264      	movs	r2, #100	; 0x64
   db910:	fb90 f1f2 	sdiv	r1, r0, r2
   db914:	fb02 0011 	mls	r0, r2, r1, r0
   db918:	e008      	b.n	db92c <strftime+0x3ac>
   db91a:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   db91e:	f000 fe59 	bl	dc5d4 <abs>
   db922:	2264      	movs	r2, #100	; 0x64
   db924:	fb90 f3f2 	sdiv	r3, r0, r2
   db928:	fb03 0012 	mls	r0, r3, r2, r0
   db92c:	f1b8 0f00 	cmp.w	r8, #0
   db930:	da06      	bge.n	db940 <strftime+0x3c0>
   db932:	696a      	ldr	r2, [r5, #20]
   db934:	4b65      	ldr	r3, [pc, #404]	; (dbacc <strftime+0x54c>)
   db936:	429a      	cmp	r2, r3
   db938:	bfb8      	it	lt
   db93a:	f04f 0801 	movlt.w	r8, #1
   db93e:	e006      	b.n	db94e <strftime+0x3ce>
   db940:	d005      	beq.n	db94e <strftime+0x3ce>
   db942:	696a      	ldr	r2, [r5, #20]
   db944:	4b56      	ldr	r3, [pc, #344]	; (dbaa0 <strftime+0x520>)
   db946:	429a      	cmp	r2, r3
   db948:	bfb8      	it	lt
   db94a:	f04f 38ff 	movlt.w	r8, #4294967295
   db94e:	2364      	movs	r3, #100	; 0x64
   db950:	4440      	add	r0, r8
   db952:	fb90 f2f3 	sdiv	r2, r0, r3
   db956:	fb03 0012 	mls	r0, r3, r2, r0
   db95a:	4418      	add	r0, r3
   db95c:	e1f9      	b.n	dbd52 <strftime+0x7d2>
   db95e:	4b50      	ldr	r3, [pc, #320]	; (dbaa0 <strftime+0x520>)
   db960:	6969      	ldr	r1, [r5, #20]
   db962:	9108      	str	r1, [sp, #32]
   db964:	4299      	cmp	r1, r3
   db966:	bfac      	ite	ge
   db968:	2300      	movge	r3, #0
   db96a:	2301      	movlt	r3, #1
   db96c:	4628      	mov	r0, r5
   db96e:	9307      	str	r3, [sp, #28]
   db970:	f7ff fda5 	bl	db4be <iso_year_adjust>
   db974:	9908      	ldr	r1, [sp, #32]
   db976:	2900      	cmp	r1, #0
   db978:	4683      	mov	fp, r0
   db97a:	db04      	blt.n	db986 <strftime+0x406>
   db97c:	2364      	movs	r3, #100	; 0x64
   db97e:	fb91 f3f3 	sdiv	r3, r1, r3
   db982:	3313      	adds	r3, #19
   db984:	e008      	b.n	db998 <strftime+0x418>
   db986:	f201 706c 	addw	r0, r1, #1900	; 0x76c
   db98a:	9108      	str	r1, [sp, #32]
   db98c:	f000 fe22 	bl	dc5d4 <abs>
   db990:	9908      	ldr	r1, [sp, #32]
   db992:	2364      	movs	r3, #100	; 0x64
   db994:	fb90 f3f3 	sdiv	r3, r0, r3
   db998:	6968      	ldr	r0, [r5, #20]
   db99a:	2800      	cmp	r0, #0
   db99c:	db06      	blt.n	db9ac <strftime+0x42c>
   db99e:	f04f 0e64 	mov.w	lr, #100	; 0x64
   db9a2:	fb90 fcfe 	sdiv	ip, r0, lr
   db9a6:	fb0e 001c 	mls	r0, lr, ip, r0
   db9aa:	e00d      	b.n	db9c8 <strftime+0x448>
   db9ac:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   db9b0:	9109      	str	r1, [sp, #36]	; 0x24
   db9b2:	9308      	str	r3, [sp, #32]
   db9b4:	f000 fe0e 	bl	dc5d4 <abs>
   db9b8:	f04f 0e64 	mov.w	lr, #100	; 0x64
   db9bc:	9909      	ldr	r1, [sp, #36]	; 0x24
   db9be:	9b08      	ldr	r3, [sp, #32]
   db9c0:	fb90 fcfe 	sdiv	ip, r0, lr
   db9c4:	fb0c 001e 	mls	r0, ip, lr, r0
   db9c8:	f1bb 0f00 	cmp.w	fp, #0
   db9cc:	da08      	bge.n	db9e0 <strftime+0x460>
   db9ce:	6969      	ldr	r1, [r5, #20]
   db9d0:	4a3e      	ldr	r2, [pc, #248]	; (dbacc <strftime+0x54c>)
   db9d2:	4291      	cmp	r1, r2
   db9d4:	da0a      	bge.n	db9ec <strftime+0x46c>
   db9d6:	f04f 0b01 	mov.w	fp, #1
   db9da:	f8cd b01c 	str.w	fp, [sp, #28]
   db9de:	e005      	b.n	db9ec <strftime+0x46c>
   db9e0:	d004      	beq.n	db9ec <strftime+0x46c>
   db9e2:	4a2f      	ldr	r2, [pc, #188]	; (dbaa0 <strftime+0x520>)
   db9e4:	4291      	cmp	r1, r2
   db9e6:	bfb8      	it	lt
   db9e8:	f04f 3bff 	movlt.w	fp, #4294967295
   db9ec:	eb0b 0200 	add.w	r2, fp, r0
   db9f0:	1c50      	adds	r0, r2, #1
   db9f2:	d102      	bne.n	db9fa <strftime+0x47a>
   db9f4:	3b01      	subs	r3, #1
   db9f6:	2263      	movs	r2, #99	; 0x63
   db9f8:	e003      	b.n	dba02 <strftime+0x482>
   db9fa:	2a64      	cmp	r2, #100	; 0x64
   db9fc:	bf04      	itt	eq
   db9fe:	3301      	addeq	r3, #1
   dba00:	2200      	moveq	r2, #0
   dba02:	2064      	movs	r0, #100	; 0x64
   dba04:	fb00 2303 	mla	r3, r0, r3, r2
   dba08:	9a07      	ldr	r2, [sp, #28]
   dba0a:	b142      	cbz	r2, dba1e <strftime+0x49e>
   dba0c:	222d      	movs	r2, #45	; 0x2d
   dba0e:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   dba12:	f1b8 0f00 	cmp.w	r8, #0
   dba16:	d013      	beq.n	dba40 <strftime+0x4c0>
   dba18:	f108 38ff 	add.w	r8, r8, #4294967295
   dba1c:	e010      	b.n	dba40 <strftime+0x4c0>
   dba1e:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   dba22:	d110      	bne.n	dba46 <strftime+0x4c6>
   dba24:	f242 720f 	movw	r2, #9999	; 0x270f
   dba28:	4293      	cmp	r3, r2
   dba2a:	d90c      	bls.n	dba46 <strftime+0x4c6>
   dba2c:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
   dba30:	f1b8 0f00 	cmp.w	r8, #0
   dba34:	d1f0      	bne.n	dba18 <strftime+0x498>
   dba36:	aa12      	add	r2, sp, #72	; 0x48
   dba38:	2125      	movs	r1, #37	; 0x25
   dba3a:	f802 1d1f 	strb.w	r1, [r2, #-31]!
   dba3e:	e00a      	b.n	dba56 <strftime+0x4d6>
   dba40:	f10d 0229 	add.w	r2, sp, #41	; 0x29
   dba44:	e000      	b.n	dba48 <strftime+0x4c8>
   dba46:	aa0a      	add	r2, sp, #40	; 0x28
   dba48:	2125      	movs	r1, #37	; 0x25
   dba4a:	7011      	strb	r1, [r2, #0]
   dba4c:	f1ba 0f00 	cmp.w	sl, #0
   dba50:	d101      	bne.n	dba56 <strftime+0x4d6>
   dba52:	1c50      	adds	r0, r2, #1
   dba54:	e002      	b.n	dba5c <strftime+0x4dc>
   dba56:	2130      	movs	r1, #48	; 0x30
   dba58:	1c90      	adds	r0, r2, #2
   dba5a:	7051      	strb	r1, [r2, #1]
   dba5c:	491c      	ldr	r1, [pc, #112]	; (dbad0 <strftime+0x550>)
   dba5e:	9307      	str	r3, [sp, #28]
   dba60:	f7ff fd0a 	bl	db478 <strcpy>
   dba64:	9b07      	ldr	r3, [sp, #28]
   dba66:	9300      	str	r3, [sp, #0]
   dba68:	e1ad      	b.n	dbdc6 <strftime+0x846>
   dba6a:	4a14      	ldr	r2, [pc, #80]	; (dbabc <strftime+0x53c>)
   dba6c:	4912      	ldr	r1, [pc, #72]	; (dbab8 <strftime+0x538>)
   dba6e:	68ab      	ldr	r3, [r5, #8]
   dba70:	286b      	cmp	r0, #107	; 0x6b
   dba72:	bf08      	it	eq
   dba74:	460a      	moveq	r2, r1
   dba76:	e6e4      	b.n	db842 <strftime+0x2c2>
   dba78:	68a9      	ldr	r1, [r5, #8]
   dba7a:	230c      	movs	r3, #12
   dba7c:	b131      	cbz	r1, dba8c <strftime+0x50c>
   dba7e:	4299      	cmp	r1, r3
   dba80:	bf0e      	itee	eq
   dba82:	460b      	moveq	r3, r1
   dba84:	fb91 f2f3 	sdivne	r2, r1, r3
   dba88:	fb03 1312 	mlsne	r3, r3, r2, r1
   dba8c:	4a0a      	ldr	r2, [pc, #40]	; (dbab8 <strftime+0x538>)
   dba8e:	490b      	ldr	r1, [pc, #44]	; (dbabc <strftime+0x53c>)
   dba90:	2849      	cmp	r0, #73	; 0x49
   dba92:	bf08      	it	eq
   dba94:	460a      	moveq	r2, r1
   dba96:	e6d4      	b.n	db842 <strftime+0x2c2>
   dba98:	69eb      	ldr	r3, [r5, #28]
   dba9a:	4a0e      	ldr	r2, [pc, #56]	; (dbad4 <strftime+0x554>)
   dba9c:	3301      	adds	r3, #1
   dba9e:	e6d0      	b.n	db842 <strftime+0x2c2>
   dbaa0:	fffff894 	.word	0xfffff894
   dbaa4:	000dd06f 	.word	0x000dd06f
   dbaa8:	000dcbdb 	.word	0x000dcbdb
   dbaac:	000dd060 	.word	0x000dd060
   dbab0:	000dd067 	.word	0x000dd067
   dbab4:	000dd071 	.word	0x000dd071
   dbab8:	000dd073 	.word	0x000dd073
   dbabc:	000dd081 	.word	0x000dd081
   dbac0:	000dd077 	.word	0x000dd077
   dbac4:	000dd086 	.word	0x000dd086
   dbac8:	000dd08a 	.word	0x000dd08a
   dbacc:	fffff895 	.word	0xfffff895
   dbad0:	000dd092 	.word	0x000dd092
   dbad4:	000dd096 	.word	0x000dd096
   dbad8:	692b      	ldr	r3, [r5, #16]
   dbada:	3301      	adds	r3, #1
   dbadc:	e13d      	b.n	dbd5a <strftime+0x7da>
   dbade:	686b      	ldr	r3, [r5, #4]
   dbae0:	e13b      	b.n	dbd5a <strftime+0x7da>
   dbae2:	9b02      	ldr	r3, [sp, #8]
   dbae4:	429c      	cmp	r4, r3
   dbae6:	f080 81f5 	bcs.w	dbed4 <strftime+0x954>
   dbaea:	230a      	movs	r3, #10
   dbaec:	e1e5      	b.n	dbeba <strftime+0x93a>
   dbaee:	68ab      	ldr	r3, [r5, #8]
   dbaf0:	9a03      	ldr	r2, [sp, #12]
   dbaf2:	2b0b      	cmp	r3, #11
   dbaf4:	bfcc      	ite	gt
   dbaf6:	23a4      	movgt	r3, #164	; 0xa4
   dbaf8:	23a0      	movle	r3, #160	; 0xa0
   dbafa:	4413      	add	r3, r2
   dbafc:	f8d3 8004 	ldr.w	r8, [r3, #4]
   dbb00:	4640      	mov	r0, r8
   dbb02:	f000 f9f1 	bl	dbee8 <strlen>
   dbb06:	4bb2      	ldr	r3, [pc, #712]	; (dbdd0 <strftime+0x850>)
   dbb08:	f8d3 e000 	ldr.w	lr, [r3]
   dbb0c:	1939      	adds	r1, r7, r4
   dbb0e:	4642      	mov	r2, r8
   dbb10:	4420      	add	r0, r4
   dbb12:	4284      	cmp	r4, r0
   dbb14:	f000 81d3 	beq.w	dbebe <strftime+0x93e>
   dbb18:	9b02      	ldr	r3, [sp, #8]
   dbb1a:	429c      	cmp	r4, r3
   dbb1c:	f080 81da 	bcs.w	dbed4 <strftime+0x954>
   dbb20:	f899 3000 	ldrb.w	r3, [r9]
   dbb24:	2b50      	cmp	r3, #80	; 0x50
   dbb26:	f104 0401 	add.w	r4, r4, #1
   dbb2a:	7813      	ldrb	r3, [r2, #0]
   dbb2c:	d10a      	bne.n	dbb44 <strftime+0x5c4>
   dbb2e:	eb0e 0c03 	add.w	ip, lr, r3
   dbb32:	f89c c001 	ldrb.w	ip, [ip, #1]
   dbb36:	f00c 0c03 	and.w	ip, ip, #3
   dbb3a:	f1bc 0f01 	cmp.w	ip, #1
   dbb3e:	bf08      	it	eq
   dbb40:	3320      	addeq	r3, #32
   dbb42:	b2db      	uxtb	r3, r3
   dbb44:	f801 3b01 	strb.w	r3, [r1], #1
   dbb48:	3201      	adds	r2, #1
   dbb4a:	e7e2      	b.n	dbb12 <strftime+0x592>
   dbb4c:	686b      	ldr	r3, [r5, #4]
   dbb4e:	9300      	str	r3, [sp, #0]
   dbb50:	4aa0      	ldr	r2, [pc, #640]	; (dbdd4 <strftime+0x854>)
   dbb52:	68ab      	ldr	r3, [r5, #8]
   dbb54:	e139      	b.n	dbdca <strftime+0x84a>
   dbb56:	6a2b      	ldr	r3, [r5, #32]
   dbb58:	2b00      	cmp	r3, #0
   dbb5a:	db17      	blt.n	dbb8c <strftime+0x60c>
   dbb5c:	f000 fbb2 	bl	dc2c4 <__tz_lock>
   dbb60:	9b06      	ldr	r3, [sp, #24]
   dbb62:	b91b      	cbnz	r3, dbb6c <strftime+0x5ec>
   dbb64:	f000 fbb0 	bl	dc2c8 <_tzset_unlocked>
   dbb68:	2301      	movs	r3, #1
   dbb6a:	9306      	str	r3, [sp, #24]
   dbb6c:	f000 fd7a 	bl	dc664 <__gettzinfo>
   dbb70:	6a2b      	ldr	r3, [r5, #32]
   dbb72:	2b00      	cmp	r3, #0
   dbb74:	bfd4      	ite	le
   dbb76:	2300      	movle	r3, #0
   dbb78:	2301      	movgt	r3, #1
   dbb7a:	221c      	movs	r2, #28
   dbb7c:	fb02 0003 	mla	r0, r2, r3, r0
   dbb80:	6a03      	ldr	r3, [r0, #32]
   dbb82:	f1c3 0800 	rsb	r8, r3, #0
   dbb86:	f000 fb9e 	bl	dc2c6 <__tz_unlock>
   dbb8a:	e001      	b.n	dbb90 <strftime+0x610>
   dbb8c:	f04f 0800 	mov.w	r8, #0
   dbb90:	f8d5 e014 	ldr.w	lr, [r5, #20]
   dbb94:	4670      	mov	r0, lr
   dbb96:	f1be 0245 	subs.w	r2, lr, #69	; 0x45
   dbb9a:	ea4f 71e0 	mov.w	r1, r0, asr #31
   dbb9e:	f141 33ff 	adc.w	r3, r1, #4294967295
   dbba2:	2a00      	cmp	r2, #0
   dbba4:	f173 0b00 	sbcs.w	fp, r3, #0
   dbba8:	ebc4 0c06 	rsb	ip, r4, r6
   dbbac:	eb07 0a04 	add.w	sl, r7, r4
   dbbb0:	da03      	bge.n	dbbba <strftime+0x63a>
   dbbb2:	f1be 0242 	subs.w	r2, lr, #66	; 0x42
   dbbb6:	f141 33ff 	adc.w	r3, r1, #4294967295
   dbbba:	0891      	lsrs	r1, r2, #2
   dbbbc:	ea41 7183 	orr.w	r1, r1, r3, lsl #30
   dbbc0:	109b      	asrs	r3, r3, #2
   dbbc2:	9104      	str	r1, [sp, #16]
   dbbc4:	9305      	str	r3, [sp, #20]
   dbbc6:	f10e 31ff 	add.w	r1, lr, #4294967295
   dbbca:	2364      	movs	r3, #100	; 0x64
   dbbcc:	fb91 f1f3 	sdiv	r1, r1, r3
   dbbd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   dbbd4:	1a52      	subs	r2, r2, r1
   dbbd6:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
   dbbda:	f20e 102b 	addw	r0, lr, #299	; 0x12b
   dbbde:	f44f 71c8 	mov.w	r1, #400	; 0x190
   dbbe2:	fb90 f1f1 	sdiv	r1, r0, r1
   dbbe6:	1852      	adds	r2, r2, r1
   dbbe8:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   dbbec:	f1ae 0e46 	sub.w	lr, lr, #70	; 0x46
   dbbf0:	f240 116d 	movw	r1, #365	; 0x16d
   dbbf4:	fb01 fe0e 	mul.w	lr, r1, lr
   dbbf8:	69e9      	ldr	r1, [r5, #28]
   dbbfa:	eb12 020e 	adds.w	r2, r2, lr
   dbbfe:	eb43 73ee 	adc.w	r3, r3, lr, asr #31
   dbc02:	1852      	adds	r2, r2, r1
   dbc04:	f04f 0e18 	mov.w	lr, #24
   dbc08:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   dbc0c:	fba2 010e 	umull	r0, r1, r2, lr
   dbc10:	fb0e 1103 	mla	r1, lr, r3, r1
   dbc14:	68ab      	ldr	r3, [r5, #8]
   dbc16:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
   dbc1a:	18c0      	adds	r0, r0, r3
   dbc1c:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   dbc20:	fba0 230e 	umull	r2, r3, r0, lr
   dbc24:	fb0e 3301 	mla	r3, lr, r1, r3
   dbc28:	6869      	ldr	r1, [r5, #4]
   dbc2a:	1852      	adds	r2, r2, r1
   dbc2c:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   dbc30:	fba2 010e 	umull	r0, r1, r2, lr
   dbc34:	fb0e 1103 	mla	r1, lr, r3, r1
   dbc38:	682b      	ldr	r3, [r5, #0]
   dbc3a:	4a67      	ldr	r2, [pc, #412]	; (dbdd8 <strftime+0x858>)
   dbc3c:	18c0      	adds	r0, r0, r3
   dbc3e:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   dbc42:	ebb0 0008 	subs.w	r0, r0, r8
   dbc46:	eb61 71e8 	sbc.w	r1, r1, r8, asr #31
   dbc4a:	e9cd 0100 	strd	r0, r1, [sp]
   dbc4e:	4661      	mov	r1, ip
   dbc50:	4650      	mov	r0, sl
   dbc52:	f7fc f8f7 	bl	d7e44 <sniprintf>
   dbc56:	e5f8      	b.n	db84a <strftime+0x2ca>
   dbc58:	682b      	ldr	r3, [r5, #0]
   dbc5a:	e07e      	b.n	dbd5a <strftime+0x7da>
   dbc5c:	9b02      	ldr	r3, [sp, #8]
   dbc5e:	429c      	cmp	r4, r3
   dbc60:	f080 8138 	bcs.w	dbed4 <strftime+0x954>
   dbc64:	2309      	movs	r3, #9
   dbc66:	e128      	b.n	dbeba <strftime+0x93a>
   dbc68:	682b      	ldr	r3, [r5, #0]
   dbc6a:	9301      	str	r3, [sp, #4]
   dbc6c:	686b      	ldr	r3, [r5, #4]
   dbc6e:	9300      	str	r3, [sp, #0]
   dbc70:	4a5a      	ldr	r2, [pc, #360]	; (dbddc <strftime+0x85c>)
   dbc72:	68ab      	ldr	r3, [r5, #8]
   dbc74:	1b31      	subs	r1, r6, r4
   dbc76:	1938      	adds	r0, r7, r4
   dbc78:	e60d      	b.n	db896 <strftime+0x316>
   dbc7a:	9b02      	ldr	r3, [sp, #8]
   dbc7c:	429c      	cmp	r4, r3
   dbc7e:	f080 8129 	bcs.w	dbed4 <strftime+0x954>
   dbc82:	69ab      	ldr	r3, [r5, #24]
   dbc84:	1c62      	adds	r2, r4, #1
   dbc86:	b90b      	cbnz	r3, dbc8c <strftime+0x70c>
   dbc88:	2337      	movs	r3, #55	; 0x37
   dbc8a:	e000      	b.n	dbc8e <strftime+0x70e>
   dbc8c:	3330      	adds	r3, #48	; 0x30
   dbc8e:	553b      	strb	r3, [r7, r4]
   dbc90:	4614      	mov	r4, r2
   dbc92:	e114      	b.n	dbebe <strftime+0x93e>
   dbc94:	69eb      	ldr	r3, [r5, #28]
   dbc96:	69aa      	ldr	r2, [r5, #24]
   dbc98:	3307      	adds	r3, #7
   dbc9a:	1a9b      	subs	r3, r3, r2
   dbc9c:	2207      	movs	r2, #7
   dbc9e:	fb93 f3f2 	sdiv	r3, r3, r2
   dbca2:	e05a      	b.n	dbd5a <strftime+0x7da>
   dbca4:	4628      	mov	r0, r5
   dbca6:	f7ff fc0a 	bl	db4be <iso_year_adjust>
   dbcaa:	69aa      	ldr	r2, [r5, #24]
   dbcac:	b10a      	cbz	r2, dbcb2 <strftime+0x732>
   dbcae:	1e53      	subs	r3, r2, #1
   dbcb0:	e000      	b.n	dbcb4 <strftime+0x734>
   dbcb2:	2306      	movs	r3, #6
   dbcb4:	2800      	cmp	r0, #0
   dbcb6:	dc2f      	bgt.n	dbd18 <strftime+0x798>
   dbcb8:	69ea      	ldr	r2, [r5, #28]
   dbcba:	d101      	bne.n	dbcc0 <strftime+0x740>
   dbcbc:	320a      	adds	r2, #10
   dbcbe:	e03b      	b.n	dbd38 <strftime+0x7b8>
   dbcc0:	1a9a      	subs	r2, r3, r2
   dbcc2:	696b      	ldr	r3, [r5, #20]
   dbcc4:	f240 716b 	movw	r1, #1899	; 0x76b
   dbcc8:	2b00      	cmp	r3, #0
   dbcca:	bfb4      	ite	lt
   dbccc:	4608      	movlt	r0, r1
   dbcce:	f06f 0064 	mvnge.w	r0, #100	; 0x64
   dbcd2:	4418      	add	r0, r3
   dbcd4:	0781      	lsls	r1, r0, #30
   dbcd6:	d107      	bne.n	dbce8 <strftime+0x768>
   dbcd8:	4601      	mov	r1, r0
   dbcda:	f04f 0e64 	mov.w	lr, #100	; 0x64
   dbcde:	fb90 f0fe 	sdiv	r0, r0, lr
   dbce2:	fb0e 1110 	mls	r1, lr, r0, r1
   dbce6:	b981      	cbnz	r1, dbd0a <strftime+0x78a>
   dbce8:	2b00      	cmp	r3, #0
   dbcea:	f240 716b 	movw	r1, #1899	; 0x76b
   dbcee:	bfa8      	it	ge
   dbcf0:	f06f 0164 	mvnge.w	r1, #100	; 0x64
   dbcf4:	4419      	add	r1, r3
   dbcf6:	f44f 73c8 	mov.w	r3, #400	; 0x190
   dbcfa:	fb91 f0f3 	sdiv	r0, r1, r3
   dbcfe:	fb03 1110 	mls	r1, r3, r0, r1
   dbd02:	fab1 f181 	clz	r1, r1
   dbd06:	0949      	lsrs	r1, r1, #5
   dbd08:	e000      	b.n	dbd0c <strftime+0x78c>
   dbd0a:	2101      	movs	r1, #1
   dbd0c:	1a52      	subs	r2, r2, r1
   dbd0e:	2a05      	cmp	r2, #5
   dbd10:	bfb4      	ite	lt
   dbd12:	2335      	movlt	r3, #53	; 0x35
   dbd14:	2334      	movge	r3, #52	; 0x34
   dbd16:	e020      	b.n	dbd5a <strftime+0x7da>
   dbd18:	2301      	movs	r3, #1
   dbd1a:	e01e      	b.n	dbd5a <strftime+0x7da>
   dbd1c:	9b02      	ldr	r3, [sp, #8]
   dbd1e:	429c      	cmp	r4, r3
   dbd20:	f080 80d8 	bcs.w	dbed4 <strftime+0x954>
   dbd24:	69ab      	ldr	r3, [r5, #24]
   dbd26:	3330      	adds	r3, #48	; 0x30
   dbd28:	e0c7      	b.n	dbeba <strftime+0x93a>
   dbd2a:	69aa      	ldr	r2, [r5, #24]
   dbd2c:	b10a      	cbz	r2, dbd32 <strftime+0x7b2>
   dbd2e:	1e53      	subs	r3, r2, #1
   dbd30:	e000      	b.n	dbd34 <strftime+0x7b4>
   dbd32:	2306      	movs	r3, #6
   dbd34:	69ea      	ldr	r2, [r5, #28]
   dbd36:	3207      	adds	r2, #7
   dbd38:	1ad2      	subs	r2, r2, r3
   dbd3a:	2307      	movs	r3, #7
   dbd3c:	fb92 f3f3 	sdiv	r3, r2, r3
   dbd40:	e00b      	b.n	dbd5a <strftime+0x7da>
   dbd42:	6968      	ldr	r0, [r5, #20]
   dbd44:	2800      	cmp	r0, #0
   dbd46:	da03      	bge.n	dbd50 <strftime+0x7d0>
   dbd48:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   dbd4c:	f000 fc42 	bl	dc5d4 <abs>
   dbd50:	2364      	movs	r3, #100	; 0x64
   dbd52:	fb90 f2f3 	sdiv	r2, r0, r3
   dbd56:	fb02 0313 	mls	r3, r2, r3, r0
   dbd5a:	4a21      	ldr	r2, [pc, #132]	; (dbde0 <strftime+0x860>)
   dbd5c:	e571      	b.n	db842 <strftime+0x2c2>
   dbd5e:	696b      	ldr	r3, [r5, #20]
   dbd60:	4a20      	ldr	r2, [pc, #128]	; (dbde4 <strftime+0x864>)
   dbd62:	4293      	cmp	r3, r2
   dbd64:	f203 7b6c 	addw	fp, r3, #1900	; 0x76c
   dbd68:	da05      	bge.n	dbd76 <strftime+0x7f6>
   dbd6a:	232d      	movs	r3, #45	; 0x2d
   dbd6c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   dbd70:	f1cb 0b00 	rsb	fp, fp, #0
   dbd74:	e008      	b.n	dbd88 <strftime+0x808>
   dbd76:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   dbd7a:	d10d      	bne.n	dbd98 <strftime+0x818>
   dbd7c:	f242 730f 	movw	r3, #9999	; 0x270f
   dbd80:	459b      	cmp	fp, r3
   dbd82:	d911      	bls.n	dbda8 <strftime+0x828>
   dbd84:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
   dbd88:	f1b8 0f00 	cmp.w	r8, #0
   dbd8c:	d001      	beq.n	dbd92 <strftime+0x812>
   dbd8e:	f108 38ff 	add.w	r8, r8, #4294967295
   dbd92:	f10d 0329 	add.w	r3, sp, #41	; 0x29
   dbd96:	e000      	b.n	dbd9a <strftime+0x81a>
   dbd98:	ab0a      	add	r3, sp, #40	; 0x28
   dbd9a:	2225      	movs	r2, #37	; 0x25
   dbd9c:	701a      	strb	r2, [r3, #0]
   dbd9e:	f1ba 0f00 	cmp.w	sl, #0
   dbda2:	d108      	bne.n	dbdb6 <strftime+0x836>
   dbda4:	1c58      	adds	r0, r3, #1
   dbda6:	e009      	b.n	dbdbc <strftime+0x83c>
   dbda8:	f1b8 0f00 	cmp.w	r8, #0
   dbdac:	d1f4      	bne.n	dbd98 <strftime+0x818>
   dbdae:	2325      	movs	r3, #37	; 0x25
   dbdb0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   dbdb4:	ab0a      	add	r3, sp, #40	; 0x28
   dbdb6:	2230      	movs	r2, #48	; 0x30
   dbdb8:	1c98      	adds	r0, r3, #2
   dbdba:	705a      	strb	r2, [r3, #1]
   dbdbc:	490a      	ldr	r1, [pc, #40]	; (dbde8 <strftime+0x868>)
   dbdbe:	f7ff fb5b 	bl	db478 <strcpy>
   dbdc2:	f8cd b000 	str.w	fp, [sp]
   dbdc6:	4643      	mov	r3, r8
   dbdc8:	aa0a      	add	r2, sp, #40	; 0x28
   dbdca:	1b31      	subs	r1, r6, r4
   dbdcc:	1938      	adds	r0, r7, r4
   dbdce:	e03e      	b.n	dbe4e <strftime+0x8ce>
   dbdd0:	2003dc14 	.word	0x2003dc14
   dbdd4:	000dd0a5 	.word	0x000dd0a5
   dbdd8:	000dd09b 	.word	0x000dd09b
   dbddc:	000dd0a0 	.word	0x000dd0a0
   dbde0:	000dd081 	.word	0x000dd081
   dbde4:	fffff894 	.word	0xfffff894
   dbde8:	000dd092 	.word	0x000dd092
   dbdec:	6a2b      	ldr	r3, [r5, #32]
   dbdee:	2b00      	cmp	r3, #0
   dbdf0:	db65      	blt.n	dbebe <strftime+0x93e>
   dbdf2:	f000 fa67 	bl	dc2c4 <__tz_lock>
   dbdf6:	9b06      	ldr	r3, [sp, #24]
   dbdf8:	b91b      	cbnz	r3, dbe02 <strftime+0x882>
   dbdfa:	f000 fa65 	bl	dc2c8 <_tzset_unlocked>
   dbdfe:	2301      	movs	r3, #1
   dbe00:	9306      	str	r3, [sp, #24]
   dbe02:	f000 fc2f 	bl	dc664 <__gettzinfo>
   dbe06:	6a2b      	ldr	r3, [r5, #32]
   dbe08:	2b00      	cmp	r3, #0
   dbe0a:	bfd4      	ite	le
   dbe0c:	2300      	movle	r3, #0
   dbe0e:	2301      	movgt	r3, #1
   dbe10:	221c      	movs	r2, #28
   dbe12:	fb02 0003 	mla	r0, r2, r3, r0
   dbe16:	eb07 0a04 	add.w	sl, r7, r4
   dbe1a:	6a03      	ldr	r3, [r0, #32]
   dbe1c:	f1c3 0800 	rsb	r8, r3, #0
   dbe20:	f000 fa51 	bl	dc2c6 <__tz_unlock>
   dbe24:	233c      	movs	r3, #60	; 0x3c
   dbe26:	fb98 f0f3 	sdiv	r0, r8, r3
   dbe2a:	9307      	str	r3, [sp, #28]
   dbe2c:	f000 fcb6 	bl	dc79c <labs>
   dbe30:	9b07      	ldr	r3, [sp, #28]
   dbe32:	fb90 f2f3 	sdiv	r2, r0, r3
   dbe36:	ebc4 0b06 	rsb	fp, r4, r6
   dbe3a:	fb02 0013 	mls	r0, r2, r3, r0
   dbe3e:	4a28      	ldr	r2, [pc, #160]	; (dbee0 <strftime+0x960>)
   dbe40:	9000      	str	r0, [sp, #0]
   dbe42:	4659      	mov	r1, fp
   dbe44:	4650      	mov	r0, sl
   dbe46:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   dbe4a:	fb98 f3f3 	sdiv	r3, r8, r3
   dbe4e:	f7fb fff9 	bl	d7e44 <sniprintf>
   dbe52:	e4fa      	b.n	db84a <strftime+0x2ca>
   dbe54:	4404      	add	r4, r0
   dbe56:	42a6      	cmp	r6, r4
   dbe58:	d831      	bhi.n	dbebe <strftime+0x93e>
   dbe5a:	e03b      	b.n	dbed4 <strftime+0x954>
   dbe5c:	6a2b      	ldr	r3, [r5, #32]
   dbe5e:	2b00      	cmp	r3, #0
   dbe60:	db2d      	blt.n	dbebe <strftime+0x93e>
   dbe62:	f000 fa2f 	bl	dc2c4 <__tz_lock>
   dbe66:	9b06      	ldr	r3, [sp, #24]
   dbe68:	b91b      	cbnz	r3, dbe72 <strftime+0x8f2>
   dbe6a:	f000 fa2d 	bl	dc2c8 <_tzset_unlocked>
   dbe6e:	2301      	movs	r3, #1
   dbe70:	9306      	str	r3, [sp, #24]
   dbe72:	6a2b      	ldr	r3, [r5, #32]
   dbe74:	4a1b      	ldr	r2, [pc, #108]	; (dbee4 <strftime+0x964>)
   dbe76:	2b00      	cmp	r3, #0
   dbe78:	bfd4      	ite	le
   dbe7a:	2300      	movle	r3, #0
   dbe7c:	2301      	movgt	r3, #1
   dbe7e:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   dbe82:	4640      	mov	r0, r8
   dbe84:	f000 f830 	bl	dbee8 <strlen>
   dbe88:	f108 38ff 	add.w	r8, r8, #4294967295
   dbe8c:	193b      	adds	r3, r7, r4
   dbe8e:	4420      	add	r0, r4
   dbe90:	4284      	cmp	r4, r0
   dbe92:	d00b      	beq.n	dbeac <strftime+0x92c>
   dbe94:	9a02      	ldr	r2, [sp, #8]
   dbe96:	4294      	cmp	r4, r2
   dbe98:	d205      	bcs.n	dbea6 <strftime+0x926>
   dbe9a:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   dbe9e:	f803 2b01 	strb.w	r2, [r3], #1
   dbea2:	3401      	adds	r4, #1
   dbea4:	e7f4      	b.n	dbe90 <strftime+0x910>
   dbea6:	f000 fa0e 	bl	dc2c6 <__tz_unlock>
   dbeaa:	e013      	b.n	dbed4 <strftime+0x954>
   dbeac:	f000 fa0b 	bl	dc2c6 <__tz_unlock>
   dbeb0:	e005      	b.n	dbebe <strftime+0x93e>
   dbeb2:	9b02      	ldr	r3, [sp, #8]
   dbeb4:	429c      	cmp	r4, r3
   dbeb6:	d20d      	bcs.n	dbed4 <strftime+0x954>
   dbeb8:	2325      	movs	r3, #37	; 0x25
   dbeba:	553b      	strb	r3, [r7, r4]
   dbebc:	3401      	adds	r4, #1
   dbebe:	f899 3000 	ldrb.w	r3, [r9]
   dbec2:	b11b      	cbz	r3, dbecc <strftime+0x94c>
   dbec4:	f109 0901 	add.w	r9, r9, #1
   dbec8:	f7ff bb69 	b.w	db59e <strftime+0x1e>
   dbecc:	b126      	cbz	r6, dbed8 <strftime+0x958>
   dbece:	2300      	movs	r3, #0
   dbed0:	553b      	strb	r3, [r7, r4]
   dbed2:	e001      	b.n	dbed8 <strftime+0x958>
   dbed4:	2000      	movs	r0, #0
   dbed6:	e000      	b.n	dbeda <strftime+0x95a>
   dbed8:	4620      	mov	r0, r4
   dbeda:	b013      	add	sp, #76	; 0x4c
   dbedc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dbee0:	000dd0af 	.word	0x000dd0af
   dbee4:	2003dc7c 	.word	0x2003dc7c

000dbee8 <strlen>:
   dbee8:	4603      	mov	r3, r0
   dbeea:	f813 2b01 	ldrb.w	r2, [r3], #1
   dbeee:	2a00      	cmp	r2, #0
   dbef0:	d1fb      	bne.n	dbeea <strlen+0x2>
   dbef2:	1a18      	subs	r0, r3, r0
   dbef4:	3801      	subs	r0, #1
   dbef6:	4770      	bx	lr

000dbef8 <strncmp>:
   dbef8:	b530      	push	{r4, r5, lr}
   dbefa:	b182      	cbz	r2, dbf1e <strncmp+0x26>
   dbefc:	1e45      	subs	r5, r0, #1
   dbefe:	3901      	subs	r1, #1
   dbf00:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   dbf04:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   dbf08:	42a3      	cmp	r3, r4
   dbf0a:	d106      	bne.n	dbf1a <strncmp+0x22>
   dbf0c:	43ec      	mvns	r4, r5
   dbf0e:	4414      	add	r4, r2
   dbf10:	42e0      	cmn	r0, r4
   dbf12:	d001      	beq.n	dbf18 <strncmp+0x20>
   dbf14:	2b00      	cmp	r3, #0
   dbf16:	d1f3      	bne.n	dbf00 <strncmp+0x8>
   dbf18:	461c      	mov	r4, r3
   dbf1a:	1b18      	subs	r0, r3, r4
   dbf1c:	bd30      	pop	{r4, r5, pc}
   dbf1e:	4610      	mov	r0, r2
   dbf20:	bd30      	pop	{r4, r5, pc}
	...

000dbf24 <_strtol_r>:
   dbf24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dbf28:	4680      	mov	r8, r0
   dbf2a:	4840      	ldr	r0, [pc, #256]	; (dc02c <_strtol_r+0x108>)
   dbf2c:	f8d0 9000 	ldr.w	r9, [r0]
   dbf30:	460f      	mov	r7, r1
   dbf32:	463d      	mov	r5, r7
   dbf34:	f815 4b01 	ldrb.w	r4, [r5], #1
   dbf38:	eb09 0004 	add.w	r0, r9, r4
   dbf3c:	7840      	ldrb	r0, [r0, #1]
   dbf3e:	f000 0008 	and.w	r0, r0, #8
   dbf42:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   dbf46:	b108      	cbz	r0, dbf4c <_strtol_r+0x28>
   dbf48:	462f      	mov	r7, r5
   dbf4a:	e7f2      	b.n	dbf32 <_strtol_r+0xe>
   dbf4c:	2c2d      	cmp	r4, #45	; 0x2d
   dbf4e:	d103      	bne.n	dbf58 <_strtol_r+0x34>
   dbf50:	1cbd      	adds	r5, r7, #2
   dbf52:	787c      	ldrb	r4, [r7, #1]
   dbf54:	2601      	movs	r6, #1
   dbf56:	e003      	b.n	dbf60 <_strtol_r+0x3c>
   dbf58:	2c2b      	cmp	r4, #43	; 0x2b
   dbf5a:	bf04      	itt	eq
   dbf5c:	787c      	ldrbeq	r4, [r7, #1]
   dbf5e:	1cbd      	addeq	r5, r7, #2
   dbf60:	b113      	cbz	r3, dbf68 <_strtol_r+0x44>
   dbf62:	2b10      	cmp	r3, #16
   dbf64:	d10a      	bne.n	dbf7c <_strtol_r+0x58>
   dbf66:	e05b      	b.n	dc020 <_strtol_r+0xfc>
   dbf68:	2c30      	cmp	r4, #48	; 0x30
   dbf6a:	d157      	bne.n	dc01c <_strtol_r+0xf8>
   dbf6c:	7828      	ldrb	r0, [r5, #0]
   dbf6e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   dbf72:	2858      	cmp	r0, #88	; 0x58
   dbf74:	d14d      	bne.n	dc012 <_strtol_r+0xee>
   dbf76:	786c      	ldrb	r4, [r5, #1]
   dbf78:	2310      	movs	r3, #16
   dbf7a:	3502      	adds	r5, #2
   dbf7c:	2e00      	cmp	r6, #0
   dbf7e:	bf14      	ite	ne
   dbf80:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   dbf84:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   dbf88:	2700      	movs	r7, #0
   dbf8a:	fbbc faf3 	udiv	sl, ip, r3
   dbf8e:	4638      	mov	r0, r7
   dbf90:	fb03 cc1a 	mls	ip, r3, sl, ip
   dbf94:	eb09 0e04 	add.w	lr, r9, r4
   dbf98:	f89e e001 	ldrb.w	lr, [lr, #1]
   dbf9c:	f01e 0f04 	tst.w	lr, #4
   dbfa0:	d001      	beq.n	dbfa6 <_strtol_r+0x82>
   dbfa2:	3c30      	subs	r4, #48	; 0x30
   dbfa4:	e00b      	b.n	dbfbe <_strtol_r+0x9a>
   dbfa6:	f01e 0e03 	ands.w	lr, lr, #3
   dbfaa:	d01b      	beq.n	dbfe4 <_strtol_r+0xc0>
   dbfac:	f1be 0f01 	cmp.w	lr, #1
   dbfb0:	bf0c      	ite	eq
   dbfb2:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   dbfb6:	f04f 0e57 	movne.w	lr, #87	; 0x57
   dbfba:	ebce 0404 	rsb	r4, lr, r4
   dbfbe:	42a3      	cmp	r3, r4
   dbfc0:	dd10      	ble.n	dbfe4 <_strtol_r+0xc0>
   dbfc2:	f1b7 3fff 	cmp.w	r7, #4294967295
   dbfc6:	d00a      	beq.n	dbfde <_strtol_r+0xba>
   dbfc8:	4550      	cmp	r0, sl
   dbfca:	d806      	bhi.n	dbfda <_strtol_r+0xb6>
   dbfcc:	d101      	bne.n	dbfd2 <_strtol_r+0xae>
   dbfce:	4564      	cmp	r4, ip
   dbfd0:	dc03      	bgt.n	dbfda <_strtol_r+0xb6>
   dbfd2:	fb03 4000 	mla	r0, r3, r0, r4
   dbfd6:	2701      	movs	r7, #1
   dbfd8:	e001      	b.n	dbfde <_strtol_r+0xba>
   dbfda:	f04f 37ff 	mov.w	r7, #4294967295
   dbfde:	f815 4b01 	ldrb.w	r4, [r5], #1
   dbfe2:	e7d7      	b.n	dbf94 <_strtol_r+0x70>
   dbfe4:	1c7b      	adds	r3, r7, #1
   dbfe6:	d10c      	bne.n	dc002 <_strtol_r+0xde>
   dbfe8:	2e00      	cmp	r6, #0
   dbfea:	f04f 0322 	mov.w	r3, #34	; 0x22
   dbfee:	bf14      	ite	ne
   dbff0:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   dbff4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   dbff8:	f8c8 3000 	str.w	r3, [r8]
   dbffc:	b92a      	cbnz	r2, dc00a <_strtol_r+0xe6>
   dbffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc002:	b106      	cbz	r6, dc006 <_strtol_r+0xe2>
   dc004:	4240      	negs	r0, r0
   dc006:	b172      	cbz	r2, dc026 <_strtol_r+0x102>
   dc008:	b107      	cbz	r7, dc00c <_strtol_r+0xe8>
   dc00a:	1e69      	subs	r1, r5, #1
   dc00c:	6011      	str	r1, [r2, #0]
   dc00e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc012:	2430      	movs	r4, #48	; 0x30
   dc014:	2b00      	cmp	r3, #0
   dc016:	d1b1      	bne.n	dbf7c <_strtol_r+0x58>
   dc018:	2308      	movs	r3, #8
   dc01a:	e7af      	b.n	dbf7c <_strtol_r+0x58>
   dc01c:	230a      	movs	r3, #10
   dc01e:	e7ad      	b.n	dbf7c <_strtol_r+0x58>
   dc020:	2c30      	cmp	r4, #48	; 0x30
   dc022:	d0a3      	beq.n	dbf6c <_strtol_r+0x48>
   dc024:	e7aa      	b.n	dbf7c <_strtol_r+0x58>
   dc026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc02a:	bf00      	nop
   dc02c:	2003dc14 	.word	0x2003dc14

000dc030 <strtol>:
   dc030:	4613      	mov	r3, r2
   dc032:	460a      	mov	r2, r1
   dc034:	4601      	mov	r1, r0
   dc036:	4802      	ldr	r0, [pc, #8]	; (dc040 <strtol+0x10>)
   dc038:	6800      	ldr	r0, [r0, #0]
   dc03a:	f7ff bf73 	b.w	dbf24 <_strtol_r>
   dc03e:	bf00      	nop
   dc040:	2003dc78 	.word	0x2003dc78

000dc044 <_strtoul_r>:
   dc044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dc048:	4680      	mov	r8, r0
   dc04a:	483c      	ldr	r0, [pc, #240]	; (dc13c <_strtoul_r+0xf8>)
   dc04c:	f8d0 9000 	ldr.w	r9, [r0]
   dc050:	460e      	mov	r6, r1
   dc052:	4635      	mov	r5, r6
   dc054:	f815 4b01 	ldrb.w	r4, [r5], #1
   dc058:	eb09 0004 	add.w	r0, r9, r4
   dc05c:	7840      	ldrb	r0, [r0, #1]
   dc05e:	f000 0008 	and.w	r0, r0, #8
   dc062:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   dc066:	b108      	cbz	r0, dc06c <_strtoul_r+0x28>
   dc068:	462e      	mov	r6, r5
   dc06a:	e7f2      	b.n	dc052 <_strtoul_r+0xe>
   dc06c:	2c2d      	cmp	r4, #45	; 0x2d
   dc06e:	d103      	bne.n	dc078 <_strtoul_r+0x34>
   dc070:	1cb5      	adds	r5, r6, #2
   dc072:	7874      	ldrb	r4, [r6, #1]
   dc074:	2701      	movs	r7, #1
   dc076:	e003      	b.n	dc080 <_strtoul_r+0x3c>
   dc078:	2c2b      	cmp	r4, #43	; 0x2b
   dc07a:	bf04      	itt	eq
   dc07c:	7874      	ldrbeq	r4, [r6, #1]
   dc07e:	1cb5      	addeq	r5, r6, #2
   dc080:	b113      	cbz	r3, dc088 <_strtoul_r+0x44>
   dc082:	2b10      	cmp	r3, #16
   dc084:	d10a      	bne.n	dc09c <_strtoul_r+0x58>
   dc086:	e053      	b.n	dc130 <_strtoul_r+0xec>
   dc088:	2c30      	cmp	r4, #48	; 0x30
   dc08a:	d14f      	bne.n	dc12c <_strtoul_r+0xe8>
   dc08c:	7828      	ldrb	r0, [r5, #0]
   dc08e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   dc092:	2858      	cmp	r0, #88	; 0x58
   dc094:	d145      	bne.n	dc122 <_strtoul_r+0xde>
   dc096:	786c      	ldrb	r4, [r5, #1]
   dc098:	2310      	movs	r3, #16
   dc09a:	3502      	adds	r5, #2
   dc09c:	f04f 3cff 	mov.w	ip, #4294967295
   dc0a0:	2600      	movs	r6, #0
   dc0a2:	fbbc fcf3 	udiv	ip, ip, r3
   dc0a6:	fb03 fa0c 	mul.w	sl, r3, ip
   dc0aa:	ea6f 0a0a 	mvn.w	sl, sl
   dc0ae:	4630      	mov	r0, r6
   dc0b0:	eb09 0e04 	add.w	lr, r9, r4
   dc0b4:	f89e e001 	ldrb.w	lr, [lr, #1]
   dc0b8:	f01e 0f04 	tst.w	lr, #4
   dc0bc:	d001      	beq.n	dc0c2 <_strtoul_r+0x7e>
   dc0be:	3c30      	subs	r4, #48	; 0x30
   dc0c0:	e00b      	b.n	dc0da <_strtoul_r+0x96>
   dc0c2:	f01e 0e03 	ands.w	lr, lr, #3
   dc0c6:	d01a      	beq.n	dc0fe <_strtoul_r+0xba>
   dc0c8:	f1be 0f01 	cmp.w	lr, #1
   dc0cc:	bf0c      	ite	eq
   dc0ce:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   dc0d2:	f04f 0e57 	movne.w	lr, #87	; 0x57
   dc0d6:	ebce 0404 	rsb	r4, lr, r4
   dc0da:	42a3      	cmp	r3, r4
   dc0dc:	dd0f      	ble.n	dc0fe <_strtoul_r+0xba>
   dc0de:	2e00      	cmp	r6, #0
   dc0e0:	db08      	blt.n	dc0f4 <_strtoul_r+0xb0>
   dc0e2:	4560      	cmp	r0, ip
   dc0e4:	d806      	bhi.n	dc0f4 <_strtoul_r+0xb0>
   dc0e6:	d101      	bne.n	dc0ec <_strtoul_r+0xa8>
   dc0e8:	4554      	cmp	r4, sl
   dc0ea:	dc03      	bgt.n	dc0f4 <_strtoul_r+0xb0>
   dc0ec:	fb03 4000 	mla	r0, r3, r0, r4
   dc0f0:	2601      	movs	r6, #1
   dc0f2:	e001      	b.n	dc0f8 <_strtoul_r+0xb4>
   dc0f4:	f04f 36ff 	mov.w	r6, #4294967295
   dc0f8:	f815 4b01 	ldrb.w	r4, [r5], #1
   dc0fc:	e7d8      	b.n	dc0b0 <_strtoul_r+0x6c>
   dc0fe:	2e00      	cmp	r6, #0
   dc100:	da07      	bge.n	dc112 <_strtoul_r+0xce>
   dc102:	2322      	movs	r3, #34	; 0x22
   dc104:	f8c8 3000 	str.w	r3, [r8]
   dc108:	f04f 30ff 	mov.w	r0, #4294967295
   dc10c:	b92a      	cbnz	r2, dc11a <_strtoul_r+0xd6>
   dc10e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc112:	b107      	cbz	r7, dc116 <_strtoul_r+0xd2>
   dc114:	4240      	negs	r0, r0
   dc116:	b172      	cbz	r2, dc136 <_strtoul_r+0xf2>
   dc118:	b106      	cbz	r6, dc11c <_strtoul_r+0xd8>
   dc11a:	1e69      	subs	r1, r5, #1
   dc11c:	6011      	str	r1, [r2, #0]
   dc11e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc122:	2430      	movs	r4, #48	; 0x30
   dc124:	2b00      	cmp	r3, #0
   dc126:	d1b9      	bne.n	dc09c <_strtoul_r+0x58>
   dc128:	2308      	movs	r3, #8
   dc12a:	e7b7      	b.n	dc09c <_strtoul_r+0x58>
   dc12c:	230a      	movs	r3, #10
   dc12e:	e7b5      	b.n	dc09c <_strtoul_r+0x58>
   dc130:	2c30      	cmp	r4, #48	; 0x30
   dc132:	d0ab      	beq.n	dc08c <_strtoul_r+0x48>
   dc134:	e7b2      	b.n	dc09c <_strtoul_r+0x58>
   dc136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc13a:	bf00      	nop
   dc13c:	2003dc14 	.word	0x2003dc14

000dc140 <strtoul>:
   dc140:	4613      	mov	r3, r2
   dc142:	460a      	mov	r2, r1
   dc144:	4601      	mov	r1, r0
   dc146:	4802      	ldr	r0, [pc, #8]	; (dc150 <strtoul+0x10>)
   dc148:	6800      	ldr	r0, [r0, #0]
   dc14a:	f7ff bf7b 	b.w	dc044 <_strtoul_r>
   dc14e:	bf00      	nop
   dc150:	2003dc78 	.word	0x2003dc78

000dc154 <__get_current_time_locale>:
   dc154:	4b04      	ldr	r3, [pc, #16]	; (dc168 <__get_current_time_locale+0x14>)
   dc156:	4a05      	ldr	r2, [pc, #20]	; (dc16c <__get_current_time_locale+0x18>)
   dc158:	6818      	ldr	r0, [r3, #0]
   dc15a:	4b05      	ldr	r3, [pc, #20]	; (dc170 <__get_current_time_locale+0x1c>)
   dc15c:	2800      	cmp	r0, #0
   dc15e:	bf14      	ite	ne
   dc160:	4610      	movne	r0, r2
   dc162:	4618      	moveq	r0, r3
   dc164:	4770      	bx	lr
   dc166:	bf00      	nop
   dc168:	2003e6c8 	.word	0x2003e6c8
   dc16c:	2003e6cc 	.word	0x2003e6cc
   dc170:	000dd1ec 	.word	0x000dd1ec

000dc174 <__tzcalc_limits>:
   dc174:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc178:	4604      	mov	r4, r0
   dc17a:	f000 fa73 	bl	dc664 <__gettzinfo>
   dc17e:	f240 73b1 	movw	r3, #1969	; 0x7b1
   dc182:	429c      	cmp	r4, r3
   dc184:	f340 8096 	ble.w	dc2b4 <__tzcalc_limits+0x140>
   dc188:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   dc18c:	18e3      	adds	r3, r4, r3
   dc18e:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   dc192:	109b      	asrs	r3, r3, #2
   dc194:	f240 156d 	movw	r5, #365	; 0x16d
   dc198:	fb05 3502 	mla	r5, r5, r2, r3
   dc19c:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   dc1a0:	f06f 0363 	mvn.w	r3, #99	; 0x63
   dc1a4:	fb92 f3f3 	sdiv	r3, r2, r3
   dc1a8:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   dc1ac:	442b      	add	r3, r5
   dc1ae:	18a5      	adds	r5, r4, r2
   dc1b0:	f44f 72c8 	mov.w	r2, #400	; 0x190
   dc1b4:	fb95 f5f2 	sdiv	r5, r5, r2
   dc1b8:	441d      	add	r5, r3
   dc1ba:	2364      	movs	r3, #100	; 0x64
   dc1bc:	fb94 f7f2 	sdiv	r7, r4, r2
   dc1c0:	fb94 f6f3 	sdiv	r6, r4, r3
   dc1c4:	fb02 4717 	mls	r7, r2, r7, r4
   dc1c8:	fb03 4616 	mls	r6, r3, r6, r4
   dc1cc:	f100 0338 	add.w	r3, r0, #56	; 0x38
   dc1d0:	fab7 fe87 	clz	lr, r7
   dc1d4:	9301      	str	r3, [sp, #4]
   dc1d6:	f004 0303 	and.w	r3, r4, #3
   dc1da:	6044      	str	r4, [r0, #4]
   dc1dc:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   dc1e0:	4601      	mov	r1, r0
   dc1e2:	9300      	str	r3, [sp, #0]
   dc1e4:	f04f 0c07 	mov.w	ip, #7
   dc1e8:	7a0b      	ldrb	r3, [r1, #8]
   dc1ea:	2b4a      	cmp	r3, #74	; 0x4a
   dc1ec:	d10e      	bne.n	dc20c <__tzcalc_limits+0x98>
   dc1ee:	694b      	ldr	r3, [r1, #20]
   dc1f0:	9a00      	ldr	r2, [sp, #0]
   dc1f2:	18ec      	adds	r4, r5, r3
   dc1f4:	b902      	cbnz	r2, dc1f8 <__tzcalc_limits+0x84>
   dc1f6:	b906      	cbnz	r6, dc1fa <__tzcalc_limits+0x86>
   dc1f8:	b927      	cbnz	r7, dc204 <__tzcalc_limits+0x90>
   dc1fa:	2b3b      	cmp	r3, #59	; 0x3b
   dc1fc:	bfd4      	ite	le
   dc1fe:	2300      	movle	r3, #0
   dc200:	2301      	movgt	r3, #1
   dc202:	e000      	b.n	dc206 <__tzcalc_limits+0x92>
   dc204:	2300      	movs	r3, #0
   dc206:	4423      	add	r3, r4
   dc208:	3b01      	subs	r3, #1
   dc20a:	e03f      	b.n	dc28c <__tzcalc_limits+0x118>
   dc20c:	2b44      	cmp	r3, #68	; 0x44
   dc20e:	d102      	bne.n	dc216 <__tzcalc_limits+0xa2>
   dc210:	694b      	ldr	r3, [r1, #20]
   dc212:	442b      	add	r3, r5
   dc214:	e03a      	b.n	dc28c <__tzcalc_limits+0x118>
   dc216:	9b00      	ldr	r3, [sp, #0]
   dc218:	b92b      	cbnz	r3, dc226 <__tzcalc_limits+0xb2>
   dc21a:	2e00      	cmp	r6, #0
   dc21c:	bf0c      	ite	eq
   dc21e:	46f0      	moveq	r8, lr
   dc220:	f04f 0801 	movne.w	r8, #1
   dc224:	e000      	b.n	dc228 <__tzcalc_limits+0xb4>
   dc226:	46f0      	mov	r8, lr
   dc228:	4b24      	ldr	r3, [pc, #144]	; (dc2bc <__tzcalc_limits+0x148>)
   dc22a:	68cc      	ldr	r4, [r1, #12]
   dc22c:	2230      	movs	r2, #48	; 0x30
   dc22e:	fb02 3808 	mla	r8, r2, r8, r3
   dc232:	f1a8 0a04 	sub.w	sl, r8, #4
   dc236:	46a9      	mov	r9, r5
   dc238:	2301      	movs	r3, #1
   dc23a:	42a3      	cmp	r3, r4
   dc23c:	da04      	bge.n	dc248 <__tzcalc_limits+0xd4>
   dc23e:	f85a bf04 	ldr.w	fp, [sl, #4]!
   dc242:	3301      	adds	r3, #1
   dc244:	44d9      	add	r9, fp
   dc246:	e7f8      	b.n	dc23a <__tzcalc_limits+0xc6>
   dc248:	f109 0304 	add.w	r3, r9, #4
   dc24c:	fb93 fbfc 	sdiv	fp, r3, ip
   dc250:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   dc254:	2c01      	cmp	r4, #1
   dc256:	ebca 0a03 	rsb	sl, sl, r3
   dc25a:	694b      	ldr	r3, [r1, #20]
   dc25c:	bfb8      	it	lt
   dc25e:	2401      	movlt	r4, #1
   dc260:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   dc264:	ebb3 0a0a 	subs.w	sl, r3, sl
   dc268:	690b      	ldr	r3, [r1, #16]
   dc26a:	f104 34ff 	add.w	r4, r4, #4294967295
   dc26e:	f103 33ff 	add.w	r3, r3, #4294967295
   dc272:	bf48      	it	mi
   dc274:	f10a 0a07 	addmi.w	sl, sl, #7
   dc278:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   dc27c:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   dc280:	4453      	add	r3, sl
   dc282:	42a3      	cmp	r3, r4
   dc284:	db01      	blt.n	dc28a <__tzcalc_limits+0x116>
   dc286:	3b07      	subs	r3, #7
   dc288:	e7fb      	b.n	dc282 <__tzcalc_limits+0x10e>
   dc28a:	444b      	add	r3, r9
   dc28c:	698c      	ldr	r4, [r1, #24]
   dc28e:	4a0c      	ldr	r2, [pc, #48]	; (dc2c0 <__tzcalc_limits+0x14c>)
   dc290:	fb02 4303 	mla	r3, r2, r3, r4
   dc294:	6a0c      	ldr	r4, [r1, #32]
   dc296:	4423      	add	r3, r4
   dc298:	f841 3f1c 	str.w	r3, [r1, #28]!
   dc29c:	9b01      	ldr	r3, [sp, #4]
   dc29e:	4299      	cmp	r1, r3
   dc2a0:	d1a2      	bne.n	dc1e8 <__tzcalc_limits+0x74>
   dc2a2:	69c3      	ldr	r3, [r0, #28]
   dc2a4:	6b82      	ldr	r2, [r0, #56]	; 0x38
   dc2a6:	4293      	cmp	r3, r2
   dc2a8:	bfac      	ite	ge
   dc2aa:	2300      	movge	r3, #0
   dc2ac:	2301      	movlt	r3, #1
   dc2ae:	6003      	str	r3, [r0, #0]
   dc2b0:	2001      	movs	r0, #1
   dc2b2:	e000      	b.n	dc2b6 <__tzcalc_limits+0x142>
   dc2b4:	2000      	movs	r0, #0
   dc2b6:	b003      	add	sp, #12
   dc2b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc2bc:	000dd000 	.word	0x000dd000
   dc2c0:	00015180 	.word	0x00015180

000dc2c4 <__tz_lock>:
   dc2c4:	4770      	bx	lr

000dc2c6 <__tz_unlock>:
   dc2c6:	4770      	bx	lr

000dc2c8 <_tzset_unlocked>:
   dc2c8:	4b01      	ldr	r3, [pc, #4]	; (dc2d0 <_tzset_unlocked+0x8>)
   dc2ca:	6818      	ldr	r0, [r3, #0]
   dc2cc:	f000 b802 	b.w	dc2d4 <_tzset_unlocked_r>
   dc2d0:	2003dc78 	.word	0x2003dc78

000dc2d4 <_tzset_unlocked_r>:
   dc2d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc2d8:	b08d      	sub	sp, #52	; 0x34
   dc2da:	4607      	mov	r7, r0
   dc2dc:	f000 f9c2 	bl	dc664 <__gettzinfo>
   dc2e0:	49b0      	ldr	r1, [pc, #704]	; (dc5a4 <_tzset_unlocked_r+0x2d0>)
   dc2e2:	4eb1      	ldr	r6, [pc, #708]	; (dc5a8 <_tzset_unlocked_r+0x2d4>)
   dc2e4:	4604      	mov	r4, r0
   dc2e6:	4638      	mov	r0, r7
   dc2e8:	f000 f9b4 	bl	dc654 <_getenv_r>
   dc2ec:	4605      	mov	r5, r0
   dc2ee:	b960      	cbnz	r0, dc30a <_tzset_unlocked_r+0x36>
   dc2f0:	4bae      	ldr	r3, [pc, #696]	; (dc5ac <_tzset_unlocked_r+0x2d8>)
   dc2f2:	4aaf      	ldr	r2, [pc, #700]	; (dc5b0 <_tzset_unlocked_r+0x2dc>)
   dc2f4:	6018      	str	r0, [r3, #0]
   dc2f6:	4baf      	ldr	r3, [pc, #700]	; (dc5b4 <_tzset_unlocked_r+0x2e0>)
   dc2f8:	6018      	str	r0, [r3, #0]
   dc2fa:	4baf      	ldr	r3, [pc, #700]	; (dc5b8 <_tzset_unlocked_r+0x2e4>)
   dc2fc:	6830      	ldr	r0, [r6, #0]
   dc2fe:	601a      	str	r2, [r3, #0]
   dc300:	605a      	str	r2, [r3, #4]
   dc302:	f7fb fd6f 	bl	d7de4 <free>
   dc306:	6035      	str	r5, [r6, #0]
   dc308:	e148      	b.n	dc59c <_tzset_unlocked_r+0x2c8>
   dc30a:	6831      	ldr	r1, [r6, #0]
   dc30c:	b979      	cbnz	r1, dc32e <_tzset_unlocked_r+0x5a>
   dc30e:	6830      	ldr	r0, [r6, #0]
   dc310:	f7fb fd68 	bl	d7de4 <free>
   dc314:	4628      	mov	r0, r5
   dc316:	f7ff fde7 	bl	dbee8 <strlen>
   dc31a:	1c41      	adds	r1, r0, #1
   dc31c:	4638      	mov	r0, r7
   dc31e:	f7fb fda9 	bl	d7e74 <_malloc_r>
   dc322:	6030      	str	r0, [r6, #0]
   dc324:	b148      	cbz	r0, dc33a <_tzset_unlocked_r+0x66>
   dc326:	4629      	mov	r1, r5
   dc328:	f7ff f8a6 	bl	db478 <strcpy>
   dc32c:	e005      	b.n	dc33a <_tzset_unlocked_r+0x66>
   dc32e:	f7ff f899 	bl	db464 <strcmp>
   dc332:	2800      	cmp	r0, #0
   dc334:	f000 8132 	beq.w	dc59c <_tzset_unlocked_r+0x2c8>
   dc338:	e7e9      	b.n	dc30e <_tzset_unlocked_r+0x3a>
   dc33a:	782b      	ldrb	r3, [r5, #0]
   dc33c:	4a9f      	ldr	r2, [pc, #636]	; (dc5bc <_tzset_unlocked_r+0x2e8>)
   dc33e:	49a0      	ldr	r1, [pc, #640]	; (dc5c0 <_tzset_unlocked_r+0x2ec>)
   dc340:	2b3a      	cmp	r3, #58	; 0x3a
   dc342:	bf08      	it	eq
   dc344:	3501      	addeq	r5, #1
   dc346:	ae0a      	add	r6, sp, #40	; 0x28
   dc348:	4633      	mov	r3, r6
   dc34a:	4628      	mov	r0, r5
   dc34c:	f7fb fd6a 	bl	d7e24 <siscanf>
   dc350:	2800      	cmp	r0, #0
   dc352:	f340 8123 	ble.w	dc59c <_tzset_unlocked_r+0x2c8>
   dc356:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dc358:	18ef      	adds	r7, r5, r3
   dc35a:	5ceb      	ldrb	r3, [r5, r3]
   dc35c:	2b2d      	cmp	r3, #45	; 0x2d
   dc35e:	d103      	bne.n	dc368 <_tzset_unlocked_r+0x94>
   dc360:	3701      	adds	r7, #1
   dc362:	f04f 35ff 	mov.w	r5, #4294967295
   dc366:	e003      	b.n	dc370 <_tzset_unlocked_r+0x9c>
   dc368:	2b2b      	cmp	r3, #43	; 0x2b
   dc36a:	bf08      	it	eq
   dc36c:	3701      	addeq	r7, #1
   dc36e:	2501      	movs	r5, #1
   dc370:	f10d 0a20 	add.w	sl, sp, #32
   dc374:	f10d 0b1e 	add.w	fp, sp, #30
   dc378:	f04f 0800 	mov.w	r8, #0
   dc37c:	9603      	str	r6, [sp, #12]
   dc37e:	f8cd a008 	str.w	sl, [sp, #8]
   dc382:	9601      	str	r6, [sp, #4]
   dc384:	f8cd b000 	str.w	fp, [sp]
   dc388:	4633      	mov	r3, r6
   dc38a:	aa07      	add	r2, sp, #28
   dc38c:	498d      	ldr	r1, [pc, #564]	; (dc5c4 <_tzset_unlocked_r+0x2f0>)
   dc38e:	f8ad 801e 	strh.w	r8, [sp, #30]
   dc392:	4638      	mov	r0, r7
   dc394:	f8ad 8020 	strh.w	r8, [sp, #32]
   dc398:	f7fb fd44 	bl	d7e24 <siscanf>
   dc39c:	4540      	cmp	r0, r8
   dc39e:	f340 80fd 	ble.w	dc59c <_tzset_unlocked_r+0x2c8>
   dc3a2:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   dc3a6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   dc3aa:	f8df 9224 	ldr.w	r9, [pc, #548]	; dc5d0 <_tzset_unlocked_r+0x2fc>
   dc3ae:	213c      	movs	r1, #60	; 0x3c
   dc3b0:	fb01 3302 	mla	r3, r1, r2, r3
   dc3b4:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   dc3b8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dc3bc:	fb01 3302 	mla	r3, r1, r2, r3
   dc3c0:	435d      	muls	r5, r3
   dc3c2:	6225      	str	r5, [r4, #32]
   dc3c4:	4d7c      	ldr	r5, [pc, #496]	; (dc5b8 <_tzset_unlocked_r+0x2e4>)
   dc3c6:	4b7d      	ldr	r3, [pc, #500]	; (dc5bc <_tzset_unlocked_r+0x2e8>)
   dc3c8:	602b      	str	r3, [r5, #0]
   dc3ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dc3cc:	497c      	ldr	r1, [pc, #496]	; (dc5c0 <_tzset_unlocked_r+0x2ec>)
   dc3ce:	441f      	add	r7, r3
   dc3d0:	464a      	mov	r2, r9
   dc3d2:	4633      	mov	r3, r6
   dc3d4:	4638      	mov	r0, r7
   dc3d6:	f7fb fd25 	bl	d7e24 <siscanf>
   dc3da:	4540      	cmp	r0, r8
   dc3dc:	dc08      	bgt.n	dc3f0 <_tzset_unlocked_r+0x11c>
   dc3de:	682b      	ldr	r3, [r5, #0]
   dc3e0:	606b      	str	r3, [r5, #4]
   dc3e2:	4b72      	ldr	r3, [pc, #456]	; (dc5ac <_tzset_unlocked_r+0x2d8>)
   dc3e4:	6a22      	ldr	r2, [r4, #32]
   dc3e6:	601a      	str	r2, [r3, #0]
   dc3e8:	4b72      	ldr	r3, [pc, #456]	; (dc5b4 <_tzset_unlocked_r+0x2e0>)
   dc3ea:	f8c3 8000 	str.w	r8, [r3]
   dc3ee:	e0d5      	b.n	dc59c <_tzset_unlocked_r+0x2c8>
   dc3f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dc3f2:	f8c5 9004 	str.w	r9, [r5, #4]
   dc3f6:	18fd      	adds	r5, r7, r3
   dc3f8:	5cfb      	ldrb	r3, [r7, r3]
   dc3fa:	2b2d      	cmp	r3, #45	; 0x2d
   dc3fc:	d103      	bne.n	dc406 <_tzset_unlocked_r+0x132>
   dc3fe:	3501      	adds	r5, #1
   dc400:	f04f 37ff 	mov.w	r7, #4294967295
   dc404:	e003      	b.n	dc40e <_tzset_unlocked_r+0x13a>
   dc406:	2b2b      	cmp	r3, #43	; 0x2b
   dc408:	bf08      	it	eq
   dc40a:	3501      	addeq	r5, #1
   dc40c:	2701      	movs	r7, #1
   dc40e:	2300      	movs	r3, #0
   dc410:	f8ad 301c 	strh.w	r3, [sp, #28]
   dc414:	f8ad 301e 	strh.w	r3, [sp, #30]
   dc418:	f8ad 3020 	strh.w	r3, [sp, #32]
   dc41c:	930a      	str	r3, [sp, #40]	; 0x28
   dc41e:	9603      	str	r6, [sp, #12]
   dc420:	f8cd a008 	str.w	sl, [sp, #8]
   dc424:	9601      	str	r6, [sp, #4]
   dc426:	f8cd b000 	str.w	fp, [sp]
   dc42a:	4633      	mov	r3, r6
   dc42c:	aa07      	add	r2, sp, #28
   dc42e:	4965      	ldr	r1, [pc, #404]	; (dc5c4 <_tzset_unlocked_r+0x2f0>)
   dc430:	4628      	mov	r0, r5
   dc432:	f7fb fcf7 	bl	d7e24 <siscanf>
   dc436:	2800      	cmp	r0, #0
   dc438:	dc04      	bgt.n	dc444 <_tzset_unlocked_r+0x170>
   dc43a:	6a23      	ldr	r3, [r4, #32]
   dc43c:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   dc440:	63e3      	str	r3, [r4, #60]	; 0x3c
   dc442:	e00e      	b.n	dc462 <_tzset_unlocked_r+0x18e>
   dc444:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   dc448:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   dc44c:	213c      	movs	r1, #60	; 0x3c
   dc44e:	fb01 3302 	mla	r3, r1, r2, r3
   dc452:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   dc456:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dc45a:	fb01 3302 	mla	r3, r1, r2, r3
   dc45e:	435f      	muls	r7, r3
   dc460:	63e7      	str	r7, [r4, #60]	; 0x3c
   dc462:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dc464:	4627      	mov	r7, r4
   dc466:	441d      	add	r5, r3
   dc468:	f04f 0900 	mov.w	r9, #0
   dc46c:	782b      	ldrb	r3, [r5, #0]
   dc46e:	2b2c      	cmp	r3, #44	; 0x2c
   dc470:	bf08      	it	eq
   dc472:	3501      	addeq	r5, #1
   dc474:	f895 8000 	ldrb.w	r8, [r5]
   dc478:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   dc47c:	d126      	bne.n	dc4cc <_tzset_unlocked_r+0x1f8>
   dc47e:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   dc482:	9302      	str	r3, [sp, #8]
   dc484:	ab09      	add	r3, sp, #36	; 0x24
   dc486:	9300      	str	r3, [sp, #0]
   dc488:	9603      	str	r6, [sp, #12]
   dc48a:	9601      	str	r6, [sp, #4]
   dc48c:	4633      	mov	r3, r6
   dc48e:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   dc492:	494d      	ldr	r1, [pc, #308]	; (dc5c8 <_tzset_unlocked_r+0x2f4>)
   dc494:	4628      	mov	r0, r5
   dc496:	f7fb fcc5 	bl	d7e24 <siscanf>
   dc49a:	2803      	cmp	r0, #3
   dc49c:	d17e      	bne.n	dc59c <_tzset_unlocked_r+0x2c8>
   dc49e:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   dc4a2:	1e4b      	subs	r3, r1, #1
   dc4a4:	2b0b      	cmp	r3, #11
   dc4a6:	d879      	bhi.n	dc59c <_tzset_unlocked_r+0x2c8>
   dc4a8:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   dc4ac:	1e53      	subs	r3, r2, #1
   dc4ae:	2b04      	cmp	r3, #4
   dc4b0:	d874      	bhi.n	dc59c <_tzset_unlocked_r+0x2c8>
   dc4b2:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   dc4b6:	2b06      	cmp	r3, #6
   dc4b8:	d870      	bhi.n	dc59c <_tzset_unlocked_r+0x2c8>
   dc4ba:	f887 8008 	strb.w	r8, [r7, #8]
   dc4be:	60f9      	str	r1, [r7, #12]
   dc4c0:	613a      	str	r2, [r7, #16]
   dc4c2:	617b      	str	r3, [r7, #20]
   dc4c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dc4c6:	eb05 0803 	add.w	r8, r5, r3
   dc4ca:	e02a      	b.n	dc522 <_tzset_unlocked_r+0x24e>
   dc4cc:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   dc4d0:	bf06      	itte	eq
   dc4d2:	3501      	addeq	r5, #1
   dc4d4:	4643      	moveq	r3, r8
   dc4d6:	2344      	movne	r3, #68	; 0x44
   dc4d8:	220a      	movs	r2, #10
   dc4da:	a90b      	add	r1, sp, #44	; 0x2c
   dc4dc:	4628      	mov	r0, r5
   dc4de:	9305      	str	r3, [sp, #20]
   dc4e0:	f7ff fe2e 	bl	dc140 <strtoul>
   dc4e4:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   dc4e8:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   dc4ec:	4545      	cmp	r5, r8
   dc4ee:	9b05      	ldr	r3, [sp, #20]
   dc4f0:	d114      	bne.n	dc51c <_tzset_unlocked_r+0x248>
   dc4f2:	234d      	movs	r3, #77	; 0x4d
   dc4f4:	f1b9 0f00 	cmp.w	r9, #0
   dc4f8:	d107      	bne.n	dc50a <_tzset_unlocked_r+0x236>
   dc4fa:	7223      	strb	r3, [r4, #8]
   dc4fc:	2303      	movs	r3, #3
   dc4fe:	60e3      	str	r3, [r4, #12]
   dc500:	2302      	movs	r3, #2
   dc502:	6123      	str	r3, [r4, #16]
   dc504:	f8c4 9014 	str.w	r9, [r4, #20]
   dc508:	e00b      	b.n	dc522 <_tzset_unlocked_r+0x24e>
   dc50a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   dc50e:	230b      	movs	r3, #11
   dc510:	62a3      	str	r3, [r4, #40]	; 0x28
   dc512:	2301      	movs	r3, #1
   dc514:	62e3      	str	r3, [r4, #44]	; 0x2c
   dc516:	2300      	movs	r3, #0
   dc518:	6323      	str	r3, [r4, #48]	; 0x30
   dc51a:	e002      	b.n	dc522 <_tzset_unlocked_r+0x24e>
   dc51c:	b280      	uxth	r0, r0
   dc51e:	723b      	strb	r3, [r7, #8]
   dc520:	6178      	str	r0, [r7, #20]
   dc522:	2302      	movs	r3, #2
   dc524:	f8ad 301c 	strh.w	r3, [sp, #28]
   dc528:	2300      	movs	r3, #0
   dc52a:	f8ad 301e 	strh.w	r3, [sp, #30]
   dc52e:	f8ad 3020 	strh.w	r3, [sp, #32]
   dc532:	930a      	str	r3, [sp, #40]	; 0x28
   dc534:	f898 3000 	ldrb.w	r3, [r8]
   dc538:	2b2f      	cmp	r3, #47	; 0x2f
   dc53a:	d10b      	bne.n	dc554 <_tzset_unlocked_r+0x280>
   dc53c:	9603      	str	r6, [sp, #12]
   dc53e:	f8cd a008 	str.w	sl, [sp, #8]
   dc542:	9601      	str	r6, [sp, #4]
   dc544:	f8cd b000 	str.w	fp, [sp]
   dc548:	4633      	mov	r3, r6
   dc54a:	aa07      	add	r2, sp, #28
   dc54c:	491f      	ldr	r1, [pc, #124]	; (dc5cc <_tzset_unlocked_r+0x2f8>)
   dc54e:	4640      	mov	r0, r8
   dc550:	f7fb fc68 	bl	d7e24 <siscanf>
   dc554:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   dc558:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   dc55c:	213c      	movs	r1, #60	; 0x3c
   dc55e:	fb01 3302 	mla	r3, r1, r2, r3
   dc562:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   dc566:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dc56a:	fb01 3302 	mla	r3, r1, r2, r3
   dc56e:	61bb      	str	r3, [r7, #24]
   dc570:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   dc572:	f109 0901 	add.w	r9, r9, #1
   dc576:	f1b9 0f02 	cmp.w	r9, #2
   dc57a:	4445      	add	r5, r8
   dc57c:	f107 071c 	add.w	r7, r7, #28
   dc580:	f47f af74 	bne.w	dc46c <_tzset_unlocked_r+0x198>
   dc584:	6860      	ldr	r0, [r4, #4]
   dc586:	f7ff fdf5 	bl	dc174 <__tzcalc_limits>
   dc58a:	4b08      	ldr	r3, [pc, #32]	; (dc5ac <_tzset_unlocked_r+0x2d8>)
   dc58c:	6a22      	ldr	r2, [r4, #32]
   dc58e:	601a      	str	r2, [r3, #0]
   dc590:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   dc592:	1a9b      	subs	r3, r3, r2
   dc594:	4a07      	ldr	r2, [pc, #28]	; (dc5b4 <_tzset_unlocked_r+0x2e0>)
   dc596:	bf18      	it	ne
   dc598:	2301      	movne	r3, #1
   dc59a:	6013      	str	r3, [r2, #0]
   dc59c:	b00d      	add	sp, #52	; 0x34
   dc59e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc5a2:	bf00      	nop
   dc5a4:	000dd2e8 	.word	0x000dd2e8
   dc5a8:	2003e7e0 	.word	0x2003e7e0
   dc5ac:	2003e7e8 	.word	0x2003e7e8
   dc5b0:	000dd2eb 	.word	0x000dd2eb
   dc5b4:	2003e7e4 	.word	0x2003e7e4
   dc5b8:	2003dc7c 	.word	0x2003dc7c
   dc5bc:	2003e7d3 	.word	0x2003e7d3
   dc5c0:	000dd2ef 	.word	0x000dd2ef
   dc5c4:	000dd312 	.word	0x000dd312
   dc5c8:	000dd2fe 	.word	0x000dd2fe
   dc5cc:	000dd311 	.word	0x000dd311
   dc5d0:	2003e7c8 	.word	0x2003e7c8

000dc5d4 <abs>:
   dc5d4:	2800      	cmp	r0, #0
   dc5d6:	bfb8      	it	lt
   dc5d8:	4240      	neglt	r0, r0
   dc5da:	4770      	bx	lr

000dc5dc <_findenv_r>:
   dc5dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc5e0:	4607      	mov	r7, r0
   dc5e2:	468b      	mov	fp, r1
   dc5e4:	4690      	mov	r8, r2
   dc5e6:	f000 f8dd 	bl	dc7a4 <__env_lock>
   dc5ea:	4b19      	ldr	r3, [pc, #100]	; (dc650 <_findenv_r+0x74>)
   dc5ec:	681d      	ldr	r5, [r3, #0]
   dc5ee:	469a      	mov	sl, r3
   dc5f0:	b13d      	cbz	r5, dc602 <_findenv_r+0x26>
   dc5f2:	465c      	mov	r4, fp
   dc5f4:	4623      	mov	r3, r4
   dc5f6:	f813 2b01 	ldrb.w	r2, [r3], #1
   dc5fa:	b142      	cbz	r2, dc60e <_findenv_r+0x32>
   dc5fc:	2a3d      	cmp	r2, #61	; 0x3d
   dc5fe:	461c      	mov	r4, r3
   dc600:	d1f8      	bne.n	dc5f4 <_findenv_r+0x18>
   dc602:	4638      	mov	r0, r7
   dc604:	f000 f8cf 	bl	dc7a6 <__env_unlock>
   dc608:	2000      	movs	r0, #0
   dc60a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc60e:	ebcb 0404 	rsb	r4, fp, r4
   dc612:	46a9      	mov	r9, r5
   dc614:	f859 0b04 	ldr.w	r0, [r9], #4
   dc618:	2800      	cmp	r0, #0
   dc61a:	d0f2      	beq.n	dc602 <_findenv_r+0x26>
   dc61c:	4622      	mov	r2, r4
   dc61e:	4659      	mov	r1, fp
   dc620:	f7ff fc6a 	bl	dbef8 <strncmp>
   dc624:	b988      	cbnz	r0, dc64a <_findenv_r+0x6e>
   dc626:	f859 3c04 	ldr.w	r3, [r9, #-4]
   dc62a:	191e      	adds	r6, r3, r4
   dc62c:	5d1b      	ldrb	r3, [r3, r4]
   dc62e:	2b3d      	cmp	r3, #61	; 0x3d
   dc630:	d10b      	bne.n	dc64a <_findenv_r+0x6e>
   dc632:	f8da 3000 	ldr.w	r3, [sl]
   dc636:	1aed      	subs	r5, r5, r3
   dc638:	10ad      	asrs	r5, r5, #2
   dc63a:	4638      	mov	r0, r7
   dc63c:	f8c8 5000 	str.w	r5, [r8]
   dc640:	f000 f8b1 	bl	dc7a6 <__env_unlock>
   dc644:	1c70      	adds	r0, r6, #1
   dc646:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc64a:	464d      	mov	r5, r9
   dc64c:	e7e1      	b.n	dc612 <_findenv_r+0x36>
   dc64e:	bf00      	nop
   dc650:	2003dcc4 	.word	0x2003dcc4

000dc654 <_getenv_r>:
   dc654:	b507      	push	{r0, r1, r2, lr}
   dc656:	aa01      	add	r2, sp, #4
   dc658:	f7ff ffc0 	bl	dc5dc <_findenv_r>
   dc65c:	b003      	add	sp, #12
   dc65e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000dc664 <__gettzinfo>:
   dc664:	4800      	ldr	r0, [pc, #0]	; (dc668 <__gettzinfo+0x4>)
   dc666:	4770      	bx	lr
   dc668:	2003dc84 	.word	0x2003dc84

000dc66c <gmtime_r>:
   dc66c:	6802      	ldr	r2, [r0, #0]
   dc66e:	4b47      	ldr	r3, [pc, #284]	; (dc78c <gmtime_r+0x120>)
   dc670:	b5f0      	push	{r4, r5, r6, r7, lr}
   dc672:	fb92 f4f3 	sdiv	r4, r2, r3
   dc676:	fb03 2214 	mls	r2, r3, r4, r2
   dc67a:	2a00      	cmp	r2, #0
   dc67c:	bfbc      	itt	lt
   dc67e:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   dc682:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   dc686:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   dc68a:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   dc68e:	fb92 f3f0 	sdiv	r3, r2, r0
   dc692:	fb00 2213 	mls	r2, r0, r3, r2
   dc696:	f04f 003c 	mov.w	r0, #60	; 0x3c
   dc69a:	bfac      	ite	ge
   dc69c:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   dc6a0:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   dc6a4:	608b      	str	r3, [r1, #8]
   dc6a6:	fb92 f3f0 	sdiv	r3, r2, r0
   dc6aa:	fb00 2213 	mls	r2, r0, r3, r2
   dc6ae:	604b      	str	r3, [r1, #4]
   dc6b0:	600a      	str	r2, [r1, #0]
   dc6b2:	2307      	movs	r3, #7
   dc6b4:	1ce2      	adds	r2, r4, #3
   dc6b6:	fb92 f3f3 	sdiv	r3, r2, r3
   dc6ba:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   dc6be:	1ad3      	subs	r3, r2, r3
   dc6c0:	618b      	str	r3, [r1, #24]
   dc6c2:	4b33      	ldr	r3, [pc, #204]	; (dc790 <gmtime_r+0x124>)
   dc6c4:	4d33      	ldr	r5, [pc, #204]	; (dc794 <gmtime_r+0x128>)
   dc6c6:	fb94 f5f5 	sdiv	r5, r4, r5
   dc6ca:	fb03 4405 	mla	r4, r3, r5, r4
   dc6ce:	f648 62ac 	movw	r2, #36524	; 0x8eac
   dc6d2:	fbb4 f2f2 	udiv	r2, r4, r2
   dc6d6:	4422      	add	r2, r4
   dc6d8:	f240 57b4 	movw	r7, #1460	; 0x5b4
   dc6dc:	fbb4 f3f7 	udiv	r3, r4, r7
   dc6e0:	1ad2      	subs	r2, r2, r3
   dc6e2:	482d      	ldr	r0, [pc, #180]	; (dc798 <gmtime_r+0x12c>)
   dc6e4:	fbb4 f0f0 	udiv	r0, r4, r0
   dc6e8:	f648 6694 	movw	r6, #36500	; 0x8e94
   dc6ec:	1a13      	subs	r3, r2, r0
   dc6ee:	fbb3 f6f6 	udiv	r6, r3, r6
   dc6f2:	4434      	add	r4, r6
   dc6f4:	f240 126d 	movw	r2, #365	; 0x16d
   dc6f8:	fbb3 f0f2 	udiv	r0, r3, r2
   dc6fc:	fbb3 f3f7 	udiv	r3, r3, r7
   dc700:	1ae3      	subs	r3, r4, r3
   dc702:	fb02 3310 	mls	r3, r2, r0, r3
   dc706:	2499      	movs	r4, #153	; 0x99
   dc708:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   dc70c:	3202      	adds	r2, #2
   dc70e:	fbb2 f2f4 	udiv	r2, r2, r4
   dc712:	2a0a      	cmp	r2, #10
   dc714:	fb04 f402 	mul.w	r4, r4, r2
   dc718:	f104 0602 	add.w	r6, r4, #2
   dc71c:	f04f 0405 	mov.w	r4, #5
   dc720:	fbb6 f4f4 	udiv	r4, r6, r4
   dc724:	bf34      	ite	cc
   dc726:	2602      	movcc	r6, #2
   dc728:	f06f 0609 	mvncs.w	r6, #9
   dc72c:	4416      	add	r6, r2
   dc72e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   dc732:	fb02 0505 	mla	r5, r2, r5, r0
   dc736:	1c5f      	adds	r7, r3, #1
   dc738:	2e01      	cmp	r6, #1
   dc73a:	bf98      	it	ls
   dc73c:	3501      	addls	r5, #1
   dc73e:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   dc742:	eba7 0704 	sub.w	r7, r7, r4
   dc746:	d302      	bcc.n	dc74e <gmtime_r+0xe2>
   dc748:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   dc74c:	e014      	b.n	dc778 <gmtime_r+0x10c>
   dc74e:	0782      	lsls	r2, r0, #30
   dc750:	d105      	bne.n	dc75e <gmtime_r+0xf2>
   dc752:	2464      	movs	r4, #100	; 0x64
   dc754:	fbb0 f2f4 	udiv	r2, r0, r4
   dc758:	fb04 0212 	mls	r2, r4, r2, r0
   dc75c:	b94a      	cbnz	r2, dc772 <gmtime_r+0x106>
   dc75e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   dc762:	fbb0 f4f2 	udiv	r4, r0, r2
   dc766:	fb02 0014 	mls	r0, r2, r4, r0
   dc76a:	fab0 f280 	clz	r2, r0
   dc76e:	0952      	lsrs	r2, r2, #5
   dc770:	e000      	b.n	dc774 <gmtime_r+0x108>
   dc772:	2201      	movs	r2, #1
   dc774:	333b      	adds	r3, #59	; 0x3b
   dc776:	441a      	add	r2, r3
   dc778:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   dc77c:	2300      	movs	r3, #0
   dc77e:	61ca      	str	r2, [r1, #28]
   dc780:	614d      	str	r5, [r1, #20]
   dc782:	610e      	str	r6, [r1, #16]
   dc784:	60cf      	str	r7, [r1, #12]
   dc786:	620b      	str	r3, [r1, #32]
   dc788:	4608      	mov	r0, r1
   dc78a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dc78c:	00015180 	.word	0x00015180
   dc790:	fffdc54f 	.word	0xfffdc54f
   dc794:	00023ab1 	.word	0x00023ab1
   dc798:	00023ab0 	.word	0x00023ab0

000dc79c <labs>:
   dc79c:	2800      	cmp	r0, #0
   dc79e:	bfb8      	it	lt
   dc7a0:	4240      	neglt	r0, r0
   dc7a2:	4770      	bx	lr

000dc7a4 <__env_lock>:
   dc7a4:	4770      	bx	lr

000dc7a6 <__env_unlock>:
   dc7a6:	4770      	bx	lr

000dc7a8 <dynalib_user>:
   dc7a8:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   dc7b8:	0000 0000                                   ....

000dc7bc <_ZTVN8particle13__SPISettingsE>:
	...
   dc7c4:	40d9 000d 0001 0000 26ac 0000 0000 0000     .@.......&......
   dc7d4:	0000 0000 0005 0000 6564 6166 6c75 2074     ........default 
   dc7e4:	4d00 4253 4c00 4253 3c00 5053 5349 7465     .MSB.LSB.<SPISet
   dc7f4:	6974 676e 2073 6564 6166 6c75 3e74 3c00     tings default>.<
   dc804:	5053 5349 7465 6974 676e 2073 7325 6c25     SPISettings %s%l
   dc814:	2075 7325 4d20 444f 2545 3e64 2500 6c35     u %s MODE%d>.%5l
   dc824:	3a75 3025 3031 756c 253a 3430 3a64 3025     u:%010lu:%04d:%0
   dc834:	7534 253a 3430 3a75 3025 7534 253a 3430     4u:%04u:%04u:%04
   dc844:	3a75 3025 7534 253a 3430 0a75 5300 4154     u:%04u:%04u..STA
   dc854:	5600 414b 5400 535a 4300 5654 5000 5247     .VKA.TZS.CTV.PGR
   dc864:	4400 7461 3161 0030 6144 6174 3530 4400     .Data10.Data05.D
   dc874:	7461 3061 0030 6164 6174 6e50 3074 6130     ata00.dataPnt00a
   dc884:	6f67 6400 7461 5061 746e 3530 6761 006f     go.dataPnt05ago.
   dc894:	6164 6174 6e50 3174 6130 6f67 6200 7461     dataPnt10ago.bat
   dc8a4:	4374 6168 6772 0065 7453 7461 6f69 006e     tCharge.Station.
   dc8b4:	654b 7065 6c41 7669 0065 7270 676f 6172     KeepAlive.progra
   dc8c4:	006d 6552 6976 6973 6e6f 5300 7465 6974     m.Revision.Setti
   dc8d4:	676e 0073                                   ngs.

000dc8d8 <_ZTV15RTCSynchronizer>:
	...
   dc8e0:	5309 000d 530b 000d 6573 7474 6e69 2067     .S...S..setting 
   dc8f0:	5452 2043 7266 6d6f 6320 6f6c 6475 2520     RTC from cloud %
   dc900:	0073 6573 7474 6e69 2067 6954 656d 6620     s.setting Time f
   dc910:	6f72 206d 5452 2043 7325 1f00                    rom RTC %s.

000dc91b <_ZL11daysInMonth>:
   dc91b:	1c1f 1e1f 1e1f 1f1f 1f1e 1f1e 6f6c 7367     ............logs
   dc92b:	2500 3630 2e75 7874 0074 6572 6f6d 6976     .%06u.txt.removi
   dc93b:	676e 6f20 646c 6c20 676f 6620 6c69 2065     ng old log file 
   dc94b:	7325 6d00 646b 7269 6620 6961 656c 0064     %s.mkdir failed.
   dc95b:	6166 6c69 6465 7420 206f 706f 6e65 6c20     failed to open l
   dc96b:	676f 2073 6964 0072 7263 6165 6974 676e     ogs dir.creating
   dc97b:	6c20 676f 2073 6964 2072 7325 6300 6572      logs dir %s.cre
   dc98b:	7461 6e69 2067 656e 2077 6f6c 2067 6966     ating new log fi
   dc99b:	656c 2520 3430 0064 7277 7469 2065 6f74     le %04d.write to
   dc9ab:	7320 2064 6163 6472 6620 6961 656c 0064      sd card failed.
	...

000dc9bc <_ZTV18SdCardPrintHandler>:
	...
   dc9c4:	740d 000d 7429 000d 773d 000d 948d 000d     .t..)t..=w......

000dc9d4 <_ZTVN5spark12NetworkClassE>:
	...
   dc9dc:	7e95 000d 7e9f 000d 7ea9 000d 7eb3 000d     .~...~...~...~..
   dc9ec:	7ebd 000d 7ec9 000d 7ed5 000d 7ee1 000d     .~...~...~...~..
   dc9fc:	7ee9 000d 7ef3 000d 7efd 000d               .~...~...~..

000dca08 <_ZTVN5spark9MeshClassE>:
	...
   dca10:	803b 000d 8031 000d 8027 000d 801d 000d     ;...1...'.......
   dca20:	8011 000d 8005 000d 7ff9 000d 7ff1 000d     ................
   dca30:	7fe7 000d 7fdd 000d 7efd 000d               .........~..

000dca3c <_ZTV8SPIClass>:
	...
   dca44:	8141 000d 8143 000d                         A...C...

000dca4c <_ZL14clock_divisors>:
   dca4c:	0800 1810 2820 3830                         .... (08

000dca54 <_ZTV7TwoWire>:
	...
   dca5c:	82f5 000d 833f 000d 8317 000d 82f7 000d     ....?...........
   dca6c:	831f 000d 8327 000d 832f 000d 8337 000d     ....'.../...7...

000dca7c <_ZTV9USBSerial>:
	...
   dca84:	83fd 000d 844d 000d 845b 000d 948d 000d     ....M...[.......
   dca94:	8439 000d 83ff 000d 8415 000d 8447 000d     9...........G...
   dcaa4:	842b 000d 83f9 000d                         +.......

000dcaac <_ZTV9IPAddress>:
	...
   dcab4:	8519 000d 8509 000d 850b 000d               ............

000dcac0 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dcac8:	85ed 000d 85f3 000d 8649 000d 8601 000d     ........I.......
   dcad8:	85ef 000d                                   ....

000dcadc <_ZTVN5spark13CellularClassE>:
	...
   dcae4:	903f 000d 9035 000d 902b 000d 8fe1 000d     ?...5...+.......
   dcaf4:	901f 000d 9013 000d 9007 000d 8fff 000d     ................
   dcb04:	8ff5 000d 8feb 000d 7efd 000d 2b25 3330     .........~..%+03
   dcb14:	3a64 3025 7532 2500 2d59 6d25 252d 5464     d:%02u.%Y-%m-%dT
   dcb24:	4825 253a 3a4d 5325 7a25 6100 6373 6974     %H:%M:%S%z.ascti
   dcb34:	656d 6200 7561 0064 6553 6972 6c61 5300     me.baud.Serial.S
   dcb44:	7265 6169 316c 7400 7079 0065 6170 6172     erial1.type.para
   dcb54:	006d 6d63 0064 6469 6800 646e 7300 7274     m.cmd.id.hnd.str
   dcb64:	006d 6966 746c 6c00 6c76 6100 6464 6148     m.filt.lvl.addHa
   dcb74:	646e 656c 0072 6572 6f6d 6576 6148 646e     ndler.removeHand
   dcb84:	656c 0072 6e65 6d75 6148 646e 656c 7372     ler.enumHandlers
   dcb94:	4a00 4f53 534e 7274 6165 4c6d 676f 6148     .JSONStreamLogHa
   dcba4:	646e 656c 0072 7061 0070 3025 3031 2075     ndler.app.%010u 
   dcbb4:	5d00 0020 202c 2800 3a29 0020 5b20 6300     .] ., .(): . [.c
   dcbc4:	646f 2065 203d 2500 0069 6564 6174 6c69     ode = .%i.detail
   dcbd4:	2073 203d 0d00 000a 0066 6e6c 6600 006e     s = ....f.ln.fn.
   dcbe4:	6f63 6564 6400 7465 6961 006c 6f6e 656e     code.detail.none
   dcbf4:	7400 6172 6563 6900 666e 006f 6177 6e72     .trace.info.warn
   dcc04:	6500 7272 726f 7000 6e61 6369 6100 6c6c     .error.panic.all
   dcc14:	0000 0000                                   ....

000dcc18 <_ZTVSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   dcc20:	95b1 000d 95b7 000d 9775 000d 95c5 000d     ........u.......
   dcc30:	95b3 000d 6977 6972 676e 622e 656c 5300     ....wiring.ble.S
   dcc40:	6174 7472 6420 7369 6f63 6576 6972 676e     tart discovering
   dcc50:	7320 7265 6976 6563 2e73 5300 6174 7472      services..Start
   dcc60:	6420 7369 6f63 6576 6972 676e 6320 6168      discovering cha
   dcc70:	6172 7463 7265 7369 6974 7363 002e 6550     racteristics..Pe
   dcc80:	7265 6420 7665 6369 2065 7369 6d20 7369     er device is mis
   dcc90:	6973 676e 0021 6146 6c69 6465 7420 206f     sing!.Failed to 
   dcca0:	7061 6570 646e 7020 6565 2072 6543 746e     append peer Cent
   dccb0:	6172 206c 6564 6976 6563 002e 6f43 6e6e     ral device..Conn
   dccc0:	6365 6574 2064 7962 4320 6e65 7274 6c61     ected by Central
   dccd0:	6420 7665 6369 2e65 4400 7369 6f63 6e6e      device..Disconn
   dcce0:	6365 6574 2064 7962 7220 6d65 746f 2065     ected by remote 
   dccf0:	6564 6976 6563 002e 6143 6e6e 746f 6120     device..Cannot a
   dcd00:	6464 6e20 7765 7020 6565 2072 6564 6976     dd new peer devi
   dcd10:	6563 002e 654e 2077 6570 6972 6870 7265     ce..New peripher
   dcd20:	6c61 6920 2073 6f63 6e6e 6365 6574 2e64     al is connected.
   dcd30:	4600 6961 656c 2064 6f74 6120 7070 6e65     .Failed to appen
   dcd40:	2064 6964 6373 766f 7265 6465 6320 6168     d discovered cha
   dcd50:	6172 7463 7265 7369 6974 2e63 4600 6961     racteristic..Fai
   dcd60:	656c 2064 6f74 6120 7070 6e65 2064 6964     led to append di
   dcd70:	6373 766f 7265 6465 7320 7265 6976 6563     scovered service
   dcd80:	002e 6146 6c69 6465 7420 206f 7061 6570     ..Failed to appe
   dcd90:	646e 6c20 636f 6c61 6320 6168 6172 7463     nd local charact
   dcda0:	7265 7369 6974 2e63 4400 7075 696c 6163     eristic..Duplica
   dcdb0:	6574 2064 6863 7261 6361 6574 6972 7473     ted characterist
   dcdc0:	6369 6320 6e61 6f6e 2074 6562 6120 6464     ic cannot be add
   dcdd0:	6465 002e                                   ed..

000dcdd4 <_ZTV11USARTSerial>:
	...
   dcddc:	9b25 000d 9b75 000d 9b83 000d 948d 000d     %...u...........
   dcdec:	9b39 000d 9b5b 000d 9b47 000d 9b6f 000d     9...[...G...o...
   dcdfc:	9b27 000d 9b2b 000d                         '...+...

000dce04 <_ZTVN5spark13EthernetClassE>:
	...
   dce0c:	9d57 000d 9d4d 000d 9d43 000d 9d39 000d     W...M...C...9...
   dce1c:	9d2d 000d 9d21 000d 9d15 000d 9d0d 000d     -...!...........
   dce2c:	9d03 000d 9cf9 000d 7efd 000d 7173 7472     .........~..sqrt
   dce3c:	0000 0000                                   ....

000dce40 <day_name.4725>:
   dce40:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   dce50:	6972 6153 4a74                                   riSat

000dce55 <mon_name.4726>:
   dce55:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   dce65:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   dce75:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
   dce85:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
   dce95:	6425 000a                                   %d..

000dce99 <_ctype_>:
   dce99:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   dcea9:	2020 2020 2020 2020 2020 2020 2020 2020                     
   dceb9:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   dcec9:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   dced9:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   dcee9:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   dcef9:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   dcf09:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   dcf19:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000dcf9c <__sf_fake_stdin>:
	...

000dcfbc <__sf_fake_stdout>:
	...

000dcfdc <__sf_fake_stderr>:
	...
   dcffc:	0043 0000                                   C...

000dd000 <__month_lengths>:
   dd000:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   dd010:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   dd020:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   dd030:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   dd040:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   dd050:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   dd060:	7325 2e25 642a 2500 2573 2e30 642a 2b00     %s%.*d.%s%0.*d.+
   dd070:	2d00 2500 6432 2500 322e 2f64 2e25 6432     .-.%2d.%.2d/%.2d
   dd080:	252f 322e 0064 6c25 0075 2d59 6d25 252d     /%.2d.%lu.Y-%m-%
   dd090:	0064 2a2e 0075 2e25 6433 2500 6c6c 0064     d..*u.%.3d.%lld.
   dd0a0:	2e25 6432 253a 322e 3a64 2e25 6432 2500     %.2d:%.2d:%.2d.%
   dd0b0:	302b 6c33 2564 322e 646c 4c00 5f43 4954     +03ld%.2ld.LC_TI
   dd0c0:	454d 4a00 6e61 4600 6265 4d00 7261 4100     ME.Jan.Feb.Mar.A
   dd0d0:	7270 4d00 7961 4a00 6e75 4a00 6c75 4100     pr.May.Jun.Jul.A
   dd0e0:	6775 5300 7065 4f00 7463 4e00 766f 4400     ug.Sep.Oct.Nov.D
   dd0f0:	6365 4a00 6e61 6175 7972 4600 6265 7572     ec.January.Febru
   dd100:	7261 0079 614d 6372 0068 7041 6972 006c     ary.March.April.
   dd110:	754a 656e 4a00 6c75 0079 7541 7567 7473     June.July.August
   dd120:	5300 7065 6574 626d 7265 4f00 7463 626f     .September.Octob
   dd130:	7265 4e00 766f 6d65 6562 0072 6544 6563     er.November.Dece
   dd140:	626d 7265 5300 6e75 4d00 6e6f 5400 6575     mber.Sun.Mon.Tue
   dd150:	5700 6465 5400 7568 4600 6972 5300 7461     .Wed.Thu.Fri.Sat
   dd160:	5300 6e75 6164 0079 6f4d 646e 7961 5400     .Sunday.Monday.T
   dd170:	6575 6473 7961 5700 6465 656e 6473 7961     uesday.Wednesday
   dd180:	5400 7568 7372 6164 0079 7246 6469 7961     .Thursday.Friday
   dd190:	5300 7461 7275 6164 0079 4825 253a 3a4d     .Saturday.%H:%M:
   dd1a0:	5325 2500 2f6d 6425 252f 0079 6125 2520     %S.%m/%d/%y.%a %
   dd1b0:	2062 6525 2520 3a48 4d25 253a 2053 5925     b %e %H:%M:%S %Y
   dd1c0:	4100 004d 4d50 2500 2061 6225 2520 2065     .AM.PM.%a %b %e 
   dd1d0:	4825 253a 3a4d 5325 2520 205a 5925 2500     %H:%M:%S %Z %Y.%
   dd1e0:	3a49 4d25 253a 2053 7025 0000               I:%M:%S %p..

000dd1ec <_C_time_locale>:
   dd1ec:	d0c3 000d d0c7 000d d0cb 000d d0cf 000d     ................
   dd1fc:	d0d3 000d d0d7 000d d0db 000d d0df 000d     ................
   dd20c:	d0e3 000d d0e7 000d d0eb 000d d0ef 000d     ................
   dd21c:	d0f3 000d d0fb 000d d104 000d d10a 000d     ................
   dd22c:	d0d3 000d d110 000d d115 000d d11a 000d     ................
   dd23c:	d121 000d d12b 000d d133 000d d13c 000d     !...+...3...<...
   dd24c:	d145 000d d149 000d d14d 000d d151 000d     E...I...M...Q...
   dd25c:	d155 000d d159 000d d15d 000d d161 000d     U...Y...]...a...
   dd26c:	d168 000d d16f 000d d177 000d d181 000d     h...o...w.......
   dd27c:	d18a 000d d191 000d d19a 000d d1a3 000d     ................
   dd28c:	d1ac 000d d1c1 000d d1c4 000d d1c7 000d     ................
   dd29c:	d0f3 000d d0fb 000d d104 000d d10a 000d     ................
   dd2ac:	d0d3 000d d110 000d d115 000d d11a 000d     ................
   dd2bc:	d121 000d d12b 000d d133 000d d13c 000d     !...+...3...<...
   dd2cc:	cb57 000d d1df 000d cbdb 000d cbdb 000d     W...............
   dd2dc:	cbdb 000d cbdb 000d cbdb 000d 5a54 4700     ............TZ.G
   dd2ec:	544d 2500 3031 5e5b 2d30 2c39 2d2b 255d     MT.%10[^0-9,+-]%
   dd2fc:	006e 254d 7568 6e25 252e 7568 6e25 252e     n.M%hu%n.%hu%n.%
   dd30c:	7568 6e25 2f00 6825 2575 3a6e 6825 2575     hu%n./%hu%n:%hu%
   dd31c:	3a6e 6825 2575 006e                         n:%hu%n.

000dd324 <link_const_variable_data_end>:
   dd324:	000d5225 	.word	0x000d5225
   dd328:	000d545f 	.word	0x000d545f
   dd32c:	000d5463 	.word	0x000d5463
   dd330:	000d5509 	.word	0x000d5509
   dd334:	000d550d 	.word	0x000d550d
   dd338:	000d5511 	.word	0x000d5511
   dd33c:	000d5a4b 	.word	0x000d5a4b
   dd340:	000d5a4f 	.word	0x000d5a4f
   dd344:	000d5a53 	.word	0x000d5a53
   dd348:	000d5d91 	.word	0x000d5d91
   dd34c:	000d5d95 	.word	0x000d5d95
   dd350:	000d5db9 	.word	0x000d5db9
   dd354:	000d66f5 	.word	0x000d66f5
   dd358:	000d6727 	.word	0x000d6727
   dd35c:	000d672b 	.word	0x000d672b
   dd360:	000d672f 	.word	0x000d672f
   dd364:	000d6f21 	.word	0x000d6f21
   dd368:	000d6f25 	.word	0x000d6f25
   dd36c:	000d7207 	.word	0x000d7207
   dd370:	000d775b 	.word	0x000d775b
   dd374:	000d7fc9 	.word	0x000d7fc9
   dd378:	000d80f1 	.word	0x000d80f1
   dd37c:	000d9049 	.word	0x000d9049
   dd380:	000d9085 	.word	0x000d9085
   dd384:	000d9469 	.word	0x000d9469
   dd388:	000d947d 	.word	0x000d947d
   dd38c:	000d9b15 	.word	0x000d9b15
   dd390:	000d9ce1 	.word	0x000d9ce1
   dd394:	000d9d61 	.word	0x000d9d61
   dd398:	000d9e1d 	.word	0x000d9e1d
   dd39c:	000da289 	.word	0x000da289
   dd3a0:	000da30d 	.word	0x000da30d
   dd3a4:	000da3d1 	.word	0x000da3d1
   dd3a8:	000da495 	.word	0x000da495

000dd3ac <link_constructors_end>:
   dd3ac:	00000000 	.word	0x00000000
